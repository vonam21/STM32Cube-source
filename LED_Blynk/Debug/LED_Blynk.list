
LED_Blynk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08002798  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  080027a4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  080027a4  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008505  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001858  00000000  00000000  0002858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e68  00000000  00000000  00029de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ab8  00000000  00000000  0002ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001f83b  00000000  00000000  0002b708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00009ad3  00000000  00000000  0004af43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cb991  00000000  00000000  00054a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003a4c  00000000  00000000  001203a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  00123df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080026cc 	.word	0x080026cc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080026cc 	.word	0x080026cc

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 f9a6 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f822 	bl	8000200 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001bc:	f000 f876 	bl	80002ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f898 	bl	80002f4 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80001c4:	f000 f88f 	bl	80002e6 <MX_MEMORYMAP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80001c8:	2120      	movs	r1, #32
 80001ca:	480c      	ldr	r0, [pc, #48]	; (80001fc <main+0x4c>)
 80001cc:	f000 fcb0 	bl	8000b30 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d4:	f000 fa1c 	bl	8000610 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80001d8:	2101      	movs	r1, #1
 80001da:	4808      	ldr	r0, [pc, #32]	; (80001fc <main+0x4c>)
 80001dc:	f000 fca8 	bl	8000b30 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	f000 fa14 	bl	8000610 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80001e8:	2102      	movs	r1, #2
 80001ea:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x4c>)
 80001ec:	f000 fca0 	bl	8000b30 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f000 fa0c 	bl	8000610 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80001f8:	e7e6      	b.n	80001c8 <main+0x18>
 80001fa:	bf00      	nop
 80001fc:	48000400 	.word	0x48000400

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b09a      	sub	sp, #104	; 0x68
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0320 	add.w	r3, r7, #32
 800020a:	2248      	movs	r2, #72	; 0x48
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fa30 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]
 8000222:	615a      	str	r2, [r3, #20]
 8000224:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000226:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <SystemClock_Config+0xa8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <SystemClock_Config+0xa8>)
 8000230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000234:	6013      	str	r3, [r2, #0]
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <SystemClock_Config+0xa8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000242:	2303      	movs	r3, #3
 8000244:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2340      	movs	r3, #64	; 0x40
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000256:	2300      	movs	r3, #0
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0320 	add.w	r3, r7, #32
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fffc 	bl	800125c <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026a:	f000 f889 	bl	8000380 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800026e:	236f      	movs	r3, #111	; 0x6f
 8000270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000272:	2302      	movs	r3, #2
 8000274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2101      	movs	r1, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fb58 	bl	8001944 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800029a:	f000 f871 	bl	8000380 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3768      	adds	r7, #104	; 0x68
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	58000400 	.word	0x58000400

080002ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b094      	sub	sp, #80	; 0x50
 80002b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002b2:	463b      	mov	r3, r7
 80002b4:	2250      	movs	r2, #80	; 0x50
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 f9db 	bl	8002674 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002cc:	463b      	mov	r3, r7
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 ff49 	bl	8002166 <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002da:	f000 f851 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002de:	bf00      	nop
 80002e0:	3750      	adds	r7, #80	; 0x50
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000308:	2004      	movs	r0, #4
 800030a:	f7ff ff37 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	2002      	movs	r0, #2
 8000310:	f7ff ff34 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	2008      	movs	r0, #8
 8000316:	f7ff ff31 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2123      	movs	r1, #35	; 0x23
 800031e:	4815      	ldr	r0, [pc, #84]	; (8000374 <MX_GPIO_Init+0x80>)
 8000320:	f000 fbee 	bl	8000b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000324:	2310      	movs	r3, #16
 8000326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4810      	ldr	r0, [pc, #64]	; (8000378 <MX_GPIO_Init+0x84>)
 8000336:	f000 fa73 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800033a:	2323      	movs	r3, #35	; 0x23
 800033c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	4809      	ldr	r0, [pc, #36]	; (8000374 <MX_GPIO_Init+0x80>)
 8000350:	f000 fa66 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000354:	2303      	movs	r3, #3
 8000356:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_GPIO_Init+0x88>)
 8000366:	f000 fa5b 	bl	8000820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036a:	bf00      	nop
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	48000400 	.word	0x48000400
 8000378:	48000800 	.word	0x48000800
 800037c:	48000c00 	.word	0x48000c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>

0800038a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800039c:	e7fe      	b.n	800039c <NMI_Handler+0x4>

0800039e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <HardFault_Handler+0x4>

080003a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <MemManage_Handler+0x4>

080003aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <BusFault_Handler+0x4>

080003b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <UsageFault_Handler+0x4>

080003b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e4:	f000 f8e8 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80003f0:	4b24      	ldr	r3, [pc, #144]	; (8000484 <SystemInit+0x98>)
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f6:	4a23      	ldr	r2, [pc, #140]	; (8000484 <SystemInit+0x98>)
 80003f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000414:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000418:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800041a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <SystemInit+0x9c>)
 8000426:	4013      	ands	r3, r2
 8000428:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800042a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800042e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000436:	f023 0305 	bic.w	r3, r3, #5
 800043a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800043e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <SystemInit+0xa0>)
 8000458:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800045a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <SystemInit+0xa0>)
 8000460:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800046c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000470:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	faf6fefb 	.word	0xfaf6fefb
 800048c:	22041000 	.word	0x22041000

08000490 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000490:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000492:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000494:	3304      	adds	r3, #4

08000496 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000496:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000498:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800049a:	d3f9      	bcc.n	8000490 <CopyDataInit>
  bx lr
 800049c:	4770      	bx	lr

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800049e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80004a0:	3004      	adds	r0, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80004a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>
  bx lr
 80004a6:	4770      	bx	lr

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f7ff ff9e 	bl	80003ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <LoopForever+0x6>)
 80004b2:	490c      	ldr	r1, [pc, #48]	; (80004e4 <LoopForever+0xa>)
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <LoopForever+0xe>)
 80004b6:	2300      	movs	r3, #0
 80004b8:	f7ff ffed 	bl	8000496 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <LoopForever+0x12>)
 80004be:	490c      	ldr	r1, [pc, #48]	; (80004f0 <LoopForever+0x16>)
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <LoopForever+0x1a>)
 80004c2:	2300      	movs	r3, #0
 80004c4:	f7ff ffe7 	bl	8000496 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <LoopForever+0x1e>)
 80004ca:	490c      	ldr	r1, [pc, #48]	; (80004fc <LoopForever+0x22>)
 80004cc:	2300      	movs	r3, #0
 80004ce:	f7ff ffe8 	bl	80004a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d2:	f002 f8d7 	bl	8002684 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004d6:	f7ff fe6b 	bl	80001b0 <main>

080004da <LoopForever>:

LoopForever:
  b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004e0:	20000008 	.word	0x20000008
 80004e4:	20000014 	.word	0x20000014
 80004e8:	08002798 	.word	0x08002798
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80004ec:	20030000 	.word	0x20030000
 80004f0:	20030000 	.word	0x20030000
 80004f4:	080027a4 	.word	0x080027a4
  INIT_BSS _sbss, _ebss
 80004f8:	20000014 	.word	0x20000014
 80004fc:	20000034 	.word	0x20000034

08000500 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_IRQHandler>
	...

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_Init+0x3c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x3c>)
 8000514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000518:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051a:	2003      	movs	r0, #3
 800051c:	f000 f94e 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000520:	2000      	movs	r0, #0
 8000522:	f000 f80f 	bl	8000544 <HAL_InitTick>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	e001      	b.n	8000536 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000532:	f7ff ff2a 	bl	800038a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000536:	79fb      	ldrb	r3, [r7, #7]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	58004000 	.word	0x58004000

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d024      	beq.n	80005a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000558:	f001 fba0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 800055c:	4602      	mov	r2, r0
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_InitTick+0x6c>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4619      	mov	r1, r3
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	fbb3 f3f1 	udiv	r3, r3, r1
 800056c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f948 	bl	8000806 <HAL_SYSTICK_Config>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10f      	bne.n	800059c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b0f      	cmp	r3, #15
 8000580:	d809      	bhi.n	8000596 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000582:	2200      	movs	r2, #0
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	f04f 30ff 	mov.w	r0, #4294967295
 800058a:	f000 f922 	bl	80007d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <HAL_InitTick+0x70>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e007      	b.n	80005a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e004      	b.n	80005a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e001      	b.n	80005a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000010 	.word	0x20000010
 80005b4:	2000000c 	.word	0x2000000c

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000010 	.word	0x20000010
 80005dc:	20000030 	.word	0x20000030

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000030 	.word	0x20000030

080005f8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <HAL_GetTickPrio+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000000c 	.word	0x2000000c

08000610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000618:	f7ff ffe2 	bl	80005e0 <HAL_GetTick>
 800061c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000628:	d005      	beq.n	8000636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_Delay+0x44>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000636:	bf00      	nop
 8000638:	f7ff ffd2 	bl	80005e0 <HAL_GetTick>
 800063c:	4602      	mov	r2, r0
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8f7      	bhi.n	8000638 <HAL_Delay+0x28>
  {
  }
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000010 	.word	0x20000010

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db0a      	blt.n	80006e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <__NVIC_SetPriority+0x4c>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e4:	e00a      	b.n	80006fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4908      	ldr	r1, [pc, #32]	; (800070c <__NVIC_SetPriority+0x50>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	3b04      	subs	r3, #4
 80006f4:	0112      	lsls	r2, r2, #4
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	440b      	add	r3, r1
 80006fa:	761a      	strb	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf28      	it	cs
 800072e:	2304      	movcs	r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3304      	adds	r3, #4
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3b03      	subs	r3, #3
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 32ff 	mov.w	r2, #4294967295
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	43da      	mvns	r2, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	401a      	ands	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000758:	f04f 31ff 	mov.w	r1, #4294967295
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43d9      	mvns	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	4313      	orrs	r3, r2
         );
}
 800076a:	4618      	mov	r0, r3
 800076c:	3724      	adds	r7, #36	; 0x24
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000788:	d301      	bcc.n	800078e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078a:	2301      	movs	r3, #1
 800078c:	e00f      	b.n	80007ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <SysTick_Config+0x40>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000796:	210f      	movs	r1, #15
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f7ff ff8e 	bl	80006bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x40>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Config+0x40>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff47 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff5e 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff90 	bl	8000710 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5f 	bl	80006bc <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffb2 	bl	8000778 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e14c      	b.n	8000aca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	f000 813e 	beq.w	8000ac4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	2b01      	cmp	r3, #1
 8000852:	d005      	beq.n	8000860 <HAL_GPIO_Init+0x40>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 0303 	and.w	r3, r3, #3
 800085c:	2b02      	cmp	r3, #2
 800085e:	d130      	bne.n	80008c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000896:	2201      	movs	r2, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	f003 0201 	and.w	r2, r3, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d017      	beq.n	80008fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	2b02      	cmp	r3, #2
 8000908:	d123      	bne.n	8000952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	08da      	lsrs	r2, r3, #3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3208      	adds	r2, #8
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	220f      	movs	r2, #15
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	691a      	ldr	r2, [r3, #16]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	08da      	lsrs	r2, r3, #3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3208      	adds	r2, #8
 800094c:	6939      	ldr	r1, [r7, #16]
 800094e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2203      	movs	r2, #3
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0203 	and.w	r2, r3, #3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 8098 	beq.w	8000ac4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000994:	4a54      	ldr	r2, [pc, #336]	; (8000ae8 <HAL_GPIO_Init+0x2c8>)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	220f      	movs	r2, #15
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009be:	d019      	beq.n	80009f4 <HAL_GPIO_Init+0x1d4>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d013      	beq.n	80009f0 <HAL_GPIO_Init+0x1d0>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a49      	ldr	r2, [pc, #292]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d00d      	beq.n	80009ec <HAL_GPIO_Init+0x1cc>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <HAL_GPIO_Init+0x2d4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d007      	beq.n	80009e8 <HAL_GPIO_Init+0x1c8>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a47      	ldr	r2, [pc, #284]	; (8000af8 <HAL_GPIO_Init+0x2d8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d101      	bne.n	80009e4 <HAL_GPIO_Init+0x1c4>
 80009e0:	2304      	movs	r3, #4
 80009e2:	e008      	b.n	80009f6 <HAL_GPIO_Init+0x1d6>
 80009e4:	2307      	movs	r3, #7
 80009e6:	e006      	b.n	80009f6 <HAL_GPIO_Init+0x1d6>
 80009e8:	2303      	movs	r3, #3
 80009ea:	e004      	b.n	80009f6 <HAL_GPIO_Init+0x1d6>
 80009ec:	2302      	movs	r3, #2
 80009ee:	e002      	b.n	80009f6 <HAL_GPIO_Init+0x1d6>
 80009f0:	2301      	movs	r3, #1
 80009f2:	e000      	b.n	80009f6 <HAL_GPIO_Init+0x1d6>
 80009f4:	2300      	movs	r3, #0
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	f002 0203 	and.w	r2, r2, #3
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	4093      	lsls	r3, r2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a06:	4938      	ldr	r1, [pc, #224]	; (8000ae8 <HAL_GPIO_Init+0x2c8>)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a14:	4b39      	ldr	r3, [pc, #228]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a38:	4a30      	ldr	r2, [pc, #192]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a62:	4a26      	ldr	r2, [pc, #152]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_GPIO_Init+0x2dc>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f47f aeab 	bne.w	8000830 <HAL_GPIO_Init+0x10>
  }
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48000800 	.word	0x48000800
 8000af4:	48000c00 	.word	0x48000c00
 8000af8:	48001000 	.word	0x48001000
 8000afc:	58000800 	.word	0x58000800

08000b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b1c:	e002      	b.n	8000b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4013      	ands	r3, r2
 8000b48:	041a      	lsls	r2, r3, #16
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43d9      	mvns	r1, r3
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	400b      	ands	r3, r1
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	619a      	str	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	58000400 	.word	0x58000400

08000b84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	58000400 	.word	0x58000400

08000ba0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bb2:	d101      	bne.n	8000bb8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c12:	d101      	bne.n	8000c18 <LL_RCC_HSE_IsReady+0x18>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <LL_RCC_HSE_IsReady+0x1a>
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c54:	6013      	str	r3, [r2, #0]
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c72:	d101      	bne.n	8000c78 <LL_RCC_HSI_IsReady+0x18>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <LL_RCC_HSI_IsReady+0x1a>
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	061b      	lsls	r3, r3, #24
 8000c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	604b      	str	r3, [r1, #4]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce0:	f023 0301 	bic.w	r3, r3, #1
 8000ce4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d101      	bne.n	8000d0a <LL_RCC_HSI48_IsReady+0x18>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <LL_RCC_HSI48_IsReady+0x1a>
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8c:	f023 0304 	bic.w	r3, r3, #4
 8000d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d101      	bne.n	8000db6 <LL_RCC_LSE_IsReady+0x18>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <LL_RCC_LSE_IsReady+0x1a>
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d101      	bne.n	8000e1e <LL_RCC_LSI1_IsReady+0x18>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <LL_RCC_LSI1_IsReady+0x1a>
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d101      	bne.n	8000e86 <LL_RCC_LSI2_IsReady+0x18>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <LL_RCC_LSI2_IsReady+0x1a>
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d101      	bne.n	8000f12 <LL_RCC_MSI_IsReady+0x16>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_RCC_MSI_IsReady+0x18>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f56:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2bb0      	cmp	r3, #176	; 0xb0
 8000f5c:	d901      	bls.n	8000f62 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000f5e:	23b0      	movs	r3, #176	; 0xb0
 8000f60:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	604b      	str	r3, [r1, #4]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 0203 	bic.w	r2, r3, #3
 8000fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	608b      	str	r3, [r1, #8]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	608b      	str	r3, [r1, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800103e:	f023 020f 	bic.w	r2, r3, #15
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104a:	4313      	orrs	r3, r2
 800104c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800106e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4313      	orrs	r3, r2
 8001076:	608b      	str	r3, [r1, #8]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800112e:	d101      	bne.n	8001134 <LL_RCC_PLL_IsReady+0x18>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <LL_RCC_PLL_IsReady+0x1a>
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0303 	and.w	r3, r3, #3
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d101      	bne.n	80011ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011da:	d101      	bne.n	80011e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d101      	bne.n	8001206 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001224:	d101      	bne.n	800122a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001248:	d101      	bne.n	800124e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b08d      	sub	sp, #52	; 0x34
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e363      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 808d 	beq.w	8001396 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127c:	f7ff fea1 	bl	8000fc2 <LL_RCC_GetSysClkSource>
 8001280:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001282:	f7ff ff82 	bl	800118a <LL_RCC_PLL_GetMainSource>
 8001286:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x3e>
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d147      	bne.n	8001324 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	2b01      	cmp	r3, #1
 8001298:	d144      	bne.n	8001324 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e347      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_RCC_MSI_GetRange>
 80012ae:	4603      	mov	r3, r0
 80012b0:	429c      	cmp	r4, r3
 80012b2:	d914      	bls.n	80012de <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd03 	bl	8001cc4 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e336      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe26 	bl	8000f1e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe4a 	bl	8000f70 <LL_RCC_MSI_SetCalibTrimming>
 80012dc:	e013      	b.n	8001306 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fe1b 	bl	8000f1e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe3f 	bl	8000f70 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fce4 	bl	8001cc4 <RCC_SetFlashLatencyFromMSIRange>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e317      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001306:	f000 fcc9 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 800130a:	4603      	mov	r3, r0
 800130c:	4aa4      	ldr	r2, [pc, #656]	; (80015a0 <HAL_RCC_OscConfig+0x344>)
 800130e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001310:	4ba4      	ldr	r3, [pc, #656]	; (80015a4 <HAL_RCC_OscConfig+0x348>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f915 	bl	8000544 <HAL_InitTick>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d039      	beq.n	8001394 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e308      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d01e      	beq.n	800136a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800132c:	f7ff fdc8 	bl	8000ec0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001330:	f7ff f956 	bl	80005e0 <HAL_GetTick>
 8001334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001338:	f7ff f952 	bl	80005e0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e2f5      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800134a:	f7ff fdd7 	bl	8000efc <LL_RCC_MSI_IsReady>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f1      	beq.n	8001338 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fde0 	bl	8000f1e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe04 	bl	8000f70 <LL_RCC_MSI_SetCalibTrimming>
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800136a:	f7ff fdb8 	bl	8000ede <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136e:	f7ff f937 	bl	80005e0 <HAL_GetTick>
 8001372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001376:	f7ff f933 	bl	80005e0 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e2d6      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001388:	f7ff fdb8 	bl	8000efc <LL_RCC_MSI_IsReady>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f1      	bne.n	8001376 <HAL_RCC_OscConfig+0x11a>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001394:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d047      	beq.n	8001432 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a2:	f7ff fe0e 	bl	8000fc2 <LL_RCC_GetSysClkSource>
 80013a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a8:	f7ff feef 	bl	800118a <LL_RCC_PLL_GetMainSource>
 80013ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x164>
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d108      	bne.n	80013cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d134      	bne.n	8001432 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e2b4      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d102      	bne.n	80013dc <HAL_RCC_OscConfig+0x180>
 80013d6:	f7ff fbf5 	bl	8000bc4 <LL_RCC_HSE_Enable>
 80013da:	e001      	b.n	80013e0 <HAL_RCC_OscConfig+0x184>
 80013dc:	f7ff fc01 	bl	8000be2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d012      	beq.n	800140e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff f8fa 	bl	80005e0 <HAL_GetTick>
 80013ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff f8f6 	bl	80005e0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e299      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001402:	f7ff fbfd 	bl	8000c00 <LL_RCC_HSE_IsReady>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f1      	beq.n	80013f0 <HAL_RCC_OscConfig+0x194>
 800140c:	e011      	b.n	8001432 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff f8e7 	bl	80005e0 <HAL_GetTick>
 8001412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff f8e3 	bl	80005e0 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e286      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001428:	f7ff fbea 	bl	8000c00 <LL_RCC_HSE_IsReady>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f1      	bne.n	8001416 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d04c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143e:	f7ff fdc0 	bl	8000fc2 <LL_RCC_GetSysClkSource>
 8001442:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001444:	f7ff fea1 	bl	800118a <LL_RCC_PLL_GetMainSource>
 8001448:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x200>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d10e      	bne.n	8001474 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e266      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc09 	bl	8000c84 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001472:	e031      	b.n	80014d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d019      	beq.n	80014b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	f7ff fbd2 	bl	8000c24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff f8ae 	bl	80005e0 <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff f8aa 	bl	80005e0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e24d      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800149a:	f7ff fbe1 	bl	8000c60 <LL_RCC_HSI_IsReady>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f1      	beq.n	8001488 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fbeb 	bl	8000c84 <LL_RCC_HSI_SetCalibTrimming>
 80014ae:	e013      	b.n	80014d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b0:	f7ff fbc7 	bl	8000c42 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff f894 	bl	80005e0 <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff f890 	bl	80005e0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e233      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014ce:	f7ff fbc7 	bl	8000c60 <LL_RCC_HSI_IsReady>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f1      	bne.n	80014bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a3 	beq.w	8001638 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d076      	beq.n	80015e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d046      	beq.n	8001594 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001506:	f7ff fc7e 	bl	8000e06 <LL_RCC_LSI1_IsReady>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d113      	bne.n	8001538 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001510:	f7ff fc57 	bl	8000dc2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001514:	f7ff f864 	bl	80005e0 <HAL_GetTick>
 8001518:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800151c:	f7ff f860 	bl	80005e0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e203      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800152e:	f7ff fc6a 	bl	8000e06 <LL_RCC_LSI1_IsReady>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f1      	beq.n	800151c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001538:	f7ff fc77 	bl	8000e2a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff f850 	bl	80005e0 <HAL_GetTick>
 8001540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001544:	f7ff f84c 	bl	80005e0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b03      	cmp	r3, #3
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1ef      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001556:	f7ff fc8a 	bl	8000e6e <LL_RCC_LSI2_IsReady>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f1      	beq.n	8001544 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fc94 	bl	8000e92 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800156a:	f7ff fc3b 	bl	8000de4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff f837 	bl	80005e0 <HAL_GetTick>
 8001572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001576:	f7ff f833 	bl	80005e0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1d6      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001588:	f7ff fc3d 	bl	8000e06 <LL_RCC_LSI1_IsReady>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f1      	bne.n	8001576 <HAL_RCC_OscConfig+0x31a>
 8001592:	e051      	b.n	8001638 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001594:	f7ff fc15 	bl	8000dc2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff f822 	bl	80005e0 <HAL_GetTick>
 800159c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800159e:	e00c      	b.n	80015ba <HAL_RCC_OscConfig+0x35e>
 80015a0:	20000008 	.word	0x20000008
 80015a4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015a8:	f7ff f81a 	bl	80005e0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1bd      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80015ba:	f7ff fc24 	bl	8000e06 <LL_RCC_LSI1_IsReady>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f1      	beq.n	80015a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80015c4:	f7ff fc42 	bl	8000e4c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015ca:	f7ff f809 	bl	80005e0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1ac      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015dc:	f7ff fc47 	bl	8000e6e <LL_RCC_LSI2_IsReady>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f1      	bne.n	80015ca <HAL_RCC_OscConfig+0x36e>
 80015e6:	e027      	b.n	8001638 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80015e8:	f7ff fc30 	bl	8000e4c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7fe fff8 	bl	80005e0 <HAL_GetTick>
 80015f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015f4:	f7fe fff4 	bl	80005e0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e197      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001606:	f7ff fc32 	bl	8000e6e <LL_RCC_LSI2_IsReady>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f1      	bne.n	80015f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001610:	f7ff fbe8 	bl	8000de4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7fe ffe4 	bl	80005e0 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800161c:	f7fe ffe0 	bl	80005e0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e183      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800162e:	f7ff fbea 	bl	8000e06 <LL_RCC_LSI1_IsReady>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f1      	bne.n	800161c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05b      	beq.n	80016fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	4ba7      	ldr	r3, [pc, #668]	; (80018e4 <HAL_RCC_OscConfig+0x688>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d114      	bne.n	800167a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001650:	f7ff fa88 	bl	8000b64 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001654:	f7fe ffc4 	bl	80005e0 <HAL_GetTick>
 8001658:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7fe ffc0 	bl	80005e0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e163      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <HAL_RCC_OscConfig+0x688>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d102      	bne.n	8001688 <HAL_RCC_OscConfig+0x42c>
 8001682:	f7ff fb48 	bl	8000d16 <LL_RCC_LSE_Enable>
 8001686:	e00c      	b.n	80016a2 <HAL_RCC_OscConfig+0x446>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d104      	bne.n	800169a <HAL_RCC_OscConfig+0x43e>
 8001690:	f7ff fb63 	bl	8000d5a <LL_RCC_LSE_EnableBypass>
 8001694:	f7ff fb3f 	bl	8000d16 <LL_RCC_LSE_Enable>
 8001698:	e003      	b.n	80016a2 <HAL_RCC_OscConfig+0x446>
 800169a:	f7ff fb4d 	bl	8000d38 <LL_RCC_LSE_Disable>
 800169e:	f7ff fb6d 	bl	8000d7c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d014      	beq.n	80016d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7fe ff99 	bl	80005e0 <HAL_GetTick>
 80016ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7fe ff95 	bl	80005e0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e136      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80016c8:	f7ff fb69 	bl	8000d9e <LL_RCC_LSE_IsReady>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ef      	beq.n	80016b2 <HAL_RCC_OscConfig+0x456>
 80016d2:	e013      	b.n	80016fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7fe ff84 	bl	80005e0 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7fe ff80 	bl	80005e0 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e121      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80016f2:	f7ff fb54 	bl	8000d9e <LL_RCC_LSE_IsReady>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ef      	bne.n	80016dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d02c      	beq.n	8001762 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d014      	beq.n	800173a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001710:	f7ff facd 	bl	8000cae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7fe ff64 	bl	80005e0 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800171c:	f7fe ff60 	bl	80005e0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e103      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800172e:	f7ff fae0 	bl	8000cf2 <LL_RCC_HSI48_IsReady>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f1      	beq.n	800171c <HAL_RCC_OscConfig+0x4c0>
 8001738:	e013      	b.n	8001762 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800173a:	f7ff fac9 	bl	8000cd0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7fe ff4f 	bl	80005e0 <HAL_GetTick>
 8001742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001746:	f7fe ff4b 	bl	80005e0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0ee      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001758:	f7ff facb 	bl	8000cf2 <LL_RCC_HSI48_IsReady>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f1      	bne.n	8001746 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80e4 	beq.w	8001934 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176c:	f7ff fc29 	bl	8000fc2 <LL_RCC_GetSysClkSource>
 8001770:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2b02      	cmp	r3, #2
 8001780:	f040 80b4 	bne.w	80018ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0203 	and.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	429a      	cmp	r2, r3
 8001790:	d123      	bne.n	80017da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d11c      	bne.n	80017da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d114      	bne.n	80017da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d10d      	bne.n	80017da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d05d      	beq.n	8001896 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d058      	beq.n	8001892 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0a1      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017f2:	f7ff fc84 	bl	80010fe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f6:	f7fe fef3 	bl	80005e0 <HAL_GetTick>
 80017fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7fe feef 	bl	80005e0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e092      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x68c>)
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001836:	0212      	lsls	r2, r2, #8
 8001838:	4311      	orrs	r1, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800184a:	430a      	orrs	r2, r1
 800184c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001850:	4313      	orrs	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001854:	f7ff fc44 	bl	80010e0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001868:	f7fe feba 	bl	80005e0 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7fe feb6 	bl	80005e0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e059      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	e050      	b.n	8001934 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e04f      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d147      	bne.n	8001934 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a4:	f7ff fc1c 	bl	80010e0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b8:	f7fe fe92 	bl	80005e0 <HAL_GetTick>
 80018bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7fe fe8e 	bl	80005e0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e031      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ef      	beq.n	80018c0 <HAL_RCC_OscConfig+0x664>
 80018e0:	e028      	b.n	8001934 <HAL_RCC_OscConfig+0x6d8>
 80018e2:	bf00      	nop
 80018e4:	58000400 	.word	0x58000400
 80018e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d01e      	beq.n	8001930 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	f7ff fc04 	bl	80010fe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7fe fe73 	bl	80005e0 <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe fe6f 	bl	80005e0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e012      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_OscConfig+0x6e4>)
 800192a:	4013      	ands	r3, r2
 800192c:	60cb      	str	r3, [r1, #12]
 800192e:	e001      	b.n	8001934 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3734      	adds	r7, #52	; 0x34
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	eefefffc 	.word	0xeefefffc

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e12d      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b98      	ldr	r3, [pc, #608]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d91b      	bls.n	800199e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b95      	ldr	r3, [pc, #596]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4993      	ldr	r1, [pc, #588]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001976:	f7fe fe33 	bl	80005e0 <HAL_GetTick>
 800197a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197c:	e008      	b.n	8001990 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800197e:	f7fe fe2f 	bl	80005e0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e111      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	4b8a      	ldr	r3, [pc, #552]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d016      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fb13 	bl	8000fda <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019b4:	f7fe fe14 	bl	80005e0 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019bc:	f7fe fe10 	bl	80005e0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0f2      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ce:	f7ff fbe8 	bl	80011a2 <LL_RCC_IsActiveFlag_HPRE>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f1      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d016      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fb0a 	bl	8001002 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019ee:	f7fe fdf7 	bl	80005e0 <HAL_GetTick>
 80019f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019f6:	f7fe fdf3 	bl	80005e0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0d5      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a08:	f7ff fbdd 	bl	80011c6 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f1      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fb03 	bl	800102e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a28:	f7fe fdda 	bl	80005e0 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a30:	f7fe fdd6 	bl	80005e0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0b8      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a42:	f7ff fbd3 	bl	80011ec <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f1      	beq.n	8001a30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d016      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fafd 	bl	800105c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a62:	f7fe fdbd 	bl	80005e0 <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a6a:	f7fe fdb9 	bl	80005e0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e09b      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a7c:	f7ff fbc9 	bl	8001212 <LL_RCC_IsActiveFlag_PPRE1>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f1      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d017      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff faf3 	bl	8001084 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a9e:	f7fe fd9f 	bl	80005e0 <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aa6:	f7fe fd9b 	bl	80005e0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e07d      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ab8:	f7ff fbbd 	bl	8001236 <LL_RCC_IsActiveFlag_PPRE2>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f1      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d043      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ad6:	f7ff f893 	bl	8000c00 <LL_RCC_HSE_IsReady>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11e      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e067      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001aec:	f7ff fb16 	bl	800111c <LL_RCC_PLL_IsReady>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d113      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e05c      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b02:	f7ff f9fb 	bl	8000efc <LL_RCC_MSI_IsReady>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e051      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b10:	f7ff f8a6 	bl	8000c60 <LL_RCC_HSI_IsReady>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e04a      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fa39 	bl	8000f9a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b28:	f7fe fd5a 	bl	80005e0 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7fe fd56 	bl	80005e0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e036      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	f7ff fa3c 	bl	8000fc2 <LL_RCC_GetSysClkSource>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d1ec      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d21b      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b74:	f7fe fd34 	bl	80005e0 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b7c:	f7fe fd30 	bl	80005e0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e012      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x278>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1ef      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b9c:	f000 f87e 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_RCC_ClockConfig+0x27c>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001ba6:	f7fe fd27 	bl	80005f8 <HAL_GetTickPrio>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcc9 	bl	8000544 <HAL_InitTick>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	58004000 	.word	0x58004000
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bca:	f7ff f9fa 	bl	8000fc2 <LL_RCC_GetSysClkSource>
 8001bce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001bd6:	f7ff f9b6 	bl	8000f46 <LL_RCC_MSI_GetRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e04b      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e045      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d10a      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bfe:	f7fe ffcf 	bl	8000ba0 <LL_RCC_HSE_IsEnabledDiv2>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e03a      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e037      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c14:	f7ff fab9 	bl	800118a <LL_RCC_PLL_GetMainSource>
 8001c18:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d003      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x64>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x6a>
 8001c26:	e00d      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c2a:	60bb      	str	r3, [r7, #8]
        break;
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c2e:	f7fe ffb7 	bl	8000ba0 <LL_RCC_HSE_IsEnabledDiv2>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c3a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c3c:	e00d      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c40:	60bb      	str	r3, [r7, #8]
        break;
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c44:	f7ff f97f 	bl	8000f46 <LL_RCC_MSI_GetRange>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	60bb      	str	r3, [r7, #8]
        break;
 8001c58:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001c5a:	f7ff fa71 	bl	8001140 <LL_RCC_PLL_GetN>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	fb03 f402 	mul.w	r4, r3, r2
 8001c66:	f7ff fa84 	bl	8001172 <LL_RCC_PLL_GetDivider>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	3301      	adds	r3, #1
 8001c70:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c74:	f7ff fa71 	bl	800115a <LL_RCC_PLL_GetR>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	0f5b      	lsrs	r3, r3, #29
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c82:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c84:	68fb      	ldr	r3, [r7, #12]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08002750 	.word	0x08002750
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	01e84800 	.word	0x01e84800

08001c9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b598      	push	{r3, r4, r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ca0:	f7ff ff90 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f7ff fa01 	bl	80010ac <LL_RCC_GetAHBPrescaler>
 8001caa:	4603      	mov	r3, r0
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd98      	pop	{r3, r4, r7, pc}
 8001cc0:	08002710 	.word	0x08002710

08001cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2bb0      	cmp	r3, #176	; 0xb0
 8001cd0:	d903      	bls.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e007      	b.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001cea:	f7ff f9eb 	bl	80010c4 <LL_RCC_GetAHB4Prescaler>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9c      	lsrs	r4, r3, #18
 8001d0e:	f7fe ff39 	bl	8000b84 <HAL_PWREx_GetVoltageRange>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4620      	mov	r0, r4
 8001d18:	f000 f80c 	bl	8001d34 <RCC_SetFlashLatency>
 8001d1c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08002750 	.word	0x08002750
 8001d2c:	08002710 	.word	0x08002710
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b093      	sub	sp, #76	; 0x4c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <RCC_SetFlashLatency+0xe8>)
 8001d40:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001d4a:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <RCC_SetFlashLatency+0xec>)
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <RCC_SetFlashLatency+0xf0>)
 8001d58:	f107 040c 	add.w	r4, r7, #12
 8001d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d62:	2300      	movs	r3, #0
 8001d64:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6c:	d11a      	bne.n	8001da4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	643b      	str	r3, [r7, #64]	; 0x40
 8001d72:	e013      	b.n	8001d9c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	3348      	adds	r3, #72	; 0x48
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d807      	bhi.n	8001d96 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	3348      	adds	r3, #72	; 0x48
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001d94:	e020      	b.n	8001dd8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	3301      	adds	r3, #1
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9e8      	bls.n	8001d74 <RCC_SetFlashLatency+0x40>
 8001da2:	e019      	b.n	8001dd8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da8:	e013      	b.n	8001dd2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	3348      	adds	r3, #72	; 0x48
 8001db0:	443b      	add	r3, r7
 8001db2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d807      	bhi.n	8001dcc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	3348      	adds	r3, #72	; 0x48
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001dca:	e005      	b.n	8001dd8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dce:	3301      	adds	r3, #1
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d9e8      	bls.n	8001daa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <RCC_SetFlashLatency+0xf4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 0207 	bic.w	r2, r3, #7
 8001de0:	4911      	ldr	r1, [pc, #68]	; (8001e28 <RCC_SetFlashLatency+0xf4>)
 8001de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001de8:	f7fe fbfa 	bl	80005e0 <HAL_GetTick>
 8001dec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dee:	e008      	b.n	8001e02 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001df0:	f7fe fbf6 	bl	80005e0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e007      	b.n	8001e12 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <RCC_SetFlashLatency+0xf4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1ef      	bne.n	8001df0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	374c      	adds	r7, #76	; 0x4c
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	080026e4 	.word	0x080026e4
 8001e20:	080026f4 	.word	0x080026f4
 8001e24:	08002700 	.word	0x08002700
 8001e28:	58004000 	.word	0x58004000

08001e2c <LL_RCC_LSE_IsEnabled>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <LL_RCC_LSE_IsEnabled+0x18>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <LL_RCC_LSE_IsEnabled+0x1a>
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_LSE_IsReady>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d101      	bne.n	8001e68 <LL_RCC_LSE_IsReady+0x18>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <LL_RCC_LSE_IsReady+0x1a>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_RCC_SetRFWKPClockSource>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_SetSMPSClockSource>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_RCC_SetSMPSPrescaler>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_RCC_SetUSARTClockSource>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f00:	f023 0203 	bic.w	r2, r3, #3
 8001f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_SetLPUARTClockSource>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_SetI2CClockSource>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_SetLPTIMClockSource>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_SetSAIClockSource>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_SetRNGClockSource>:
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_RCC_SetCLK48ClockSource>:
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_SetUSBClockSource>:
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffe3 	bl	800200e <LL_RCC_SetCLK48ClockSource>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <LL_RCC_SetADCClockSource>:
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_RCC_SetRTCClockSource>:
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_GetRTCClockSource>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_RCC_ForceBackupDomainReset>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_RCC_PLLSAI1_Enable>:
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002118:	6013      	str	r3, [r2, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_RCC_PLLSAI1_Disable>:
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_PLLSAI1_IsReady>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002154:	d101      	bne.n	800215a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b088      	sub	sp, #32
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800216e:	2300      	movs	r3, #0
 8002170:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002172:	2300      	movs	r3, #0
 8002174:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d034      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800218a:	d021      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800218c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002190:	d81b      	bhi.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002196:	d01d      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002198:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800219c:	d815      	bhi.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x54>
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d110      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80021b8:	e00d      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f947 	bl	8002452 <RCCEx_PLLSAI1_ConfigNP>
 80021c4:	4603      	mov	r3, r0
 80021c6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80021c8:	e005      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	77fb      	strb	r3, [r7, #31]
        break;
 80021ce:	e002      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021d0:	bf00      	nop
 80021d2:	e000      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fee8 	bl	8001fb6 <LL_RCC_SetSAIClockSource>
 80021e6:	e001      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d046      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80021f8:	f7ff ff56 	bl	80020a8 <LL_RCC_GetRTCClockSource>
 80021fc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	429a      	cmp	r2, r3
 8002206:	d03c      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002208:	f7fe fcac 	bl	8000b64 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff30 	bl	800207c <LL_RCC_SetRTCClockSource>
 800221c:	e02e      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002228:	f7ff ff4b 	bl	80020c2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800222c:	f7ff ff5a 	bl	80020e4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002248:	f7ff fdf0 	bl	8001e2c <LL_RCC_LSE_IsEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d114      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002252:	f7fe f9c5 	bl	80005e0 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002258:	e00b      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe f9c1 	bl	80005e0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d902      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	77fb      	strb	r3, [r7, #31]
              break;
 8002270:	e004      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002272:	f7ff fded 	bl	8001e50 <LL_RCC_LSE_IsReady>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d1ee      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800227c:	7ffb      	ldrb	r3, [r7, #31]
 800227e:	77bb      	strb	r3, [r7, #30]
 8002280:	e001      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe2a 	bl	8001ef0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fe35 	bl	8001f1c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fe5d 	bl	8001f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fe52 	bl	8001f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fe2a 	bl	8001f48 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fe1f 	bl	8001f48 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d022      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe8d 	bl	800203a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002328:	d107      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002338:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002342:	d10b      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f8dd 	bl	8002508 <RCCEx_PLLSAI1_ConfigNQ>
 800234e:	4603      	mov	r3, r0
 8002350:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002352:	7ffb      	ldrb	r3, [r7, #31]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002358:	7ffb      	ldrb	r3, [r7, #31]
 800235a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02b      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d008      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800237a:	d003      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe2a 	bl	8001fe2 <LL_RCC_SetRNGClockSource>
 800238e:	e00a      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff fe21 	bl	8001fe2 <LL_RCC_SetRNGClockSource>
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff fe34 	bl	800200e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80023ae:	d107      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d022      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fe3d 	bl	8002050 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023de:	d107      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023f8:	d10b      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f8dd 	bl	80025be <RCCEx_PLLSAI1_ConfigNR>
 8002404:	4603      	mov	r3, r0
 8002406:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002408:	7ffb      	ldrb	r3, [r7, #31]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800240e:	7ffb      	ldrb	r3, [r7, #31]
 8002410:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd26 	bl	8001e74 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fd45 	bl	8001ec8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd2c 	bl	8001ea0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002448:	7fbb      	ldrb	r3, [r7, #30]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800245e:	f7ff fe61 	bl	8002124 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002462:	f7fe f8bd 	bl	80005e0 <HAL_GetTick>
 8002466:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002468:	e009      	b.n	800247e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800246a:	f7fe f8b9 	bl	80005e0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d902      	bls.n	800247e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e004      	b.n	8002488 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800247e:	f7ff fe60 	bl	8002142 <LL_RCC_PLLSAI1_IsReady>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d137      	bne.n	80024fe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024a2:	4313      	orrs	r3, r2
 80024a4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b8:	4313      	orrs	r3, r2
 80024ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80024bc:	f7ff fe23 	bl	8002106 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe f88e 	bl	80005e0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024c6:	e009      	b.n	80024dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c8:	f7fe f88a 	bl	80005e0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d902      	bls.n	80024dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	73fb      	strb	r3, [r7, #15]
        break;
 80024da:	e004      	b.n	80024e6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024dc:	f7ff fe31 	bl	8002142 <LL_RCC_PLLSAI1_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d1f0      	bne.n	80024c8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d108      	bne.n	80024fe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fa:	4313      	orrs	r3, r2
 80024fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002514:	f7ff fe06 	bl	8002124 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002518:	f7fe f862 	bl	80005e0 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800251e:	e009      	b.n	8002534 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002520:	f7fe f85e 	bl	80005e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	73fb      	strb	r3, [r7, #15]
      break;
 8002532:	e004      	b.n	800253e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002534:	f7ff fe05 	bl	8002142 <LL_RCC_PLLSAI1_IsReady>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d137      	bne.n	80025b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800256e:	4313      	orrs	r3, r2
 8002570:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002572:	f7ff fdc8 	bl	8002106 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002576:	f7fe f833 	bl	80005e0 <HAL_GetTick>
 800257a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800257c:	e009      	b.n	8002592 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800257e:	f7fe f82f 	bl	80005e0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d902      	bls.n	8002592 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	73fb      	strb	r3, [r7, #15]
        break;
 8002590:	e004      	b.n	800259c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002592:	f7ff fdd6 	bl	8002142 <LL_RCC_PLLSAI1_IsReady>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d1f0      	bne.n	800257e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b0:	4313      	orrs	r3, r2
 80025b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80025ca:	f7ff fdab 	bl	8002124 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025ce:	f7fe f807 	bl	80005e0 <HAL_GetTick>
 80025d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025d4:	e009      	b.n	80025ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d6:	f7fe f803 	bl	80005e0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d902      	bls.n	80025ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e004      	b.n	80025f4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025ea:	f7ff fdaa 	bl	8002142 <LL_RCC_PLLSAI1_IsReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d137      	bne.n	800266a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800260e:	4313      	orrs	r3, r2
 8002610:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002624:	4313      	orrs	r3, r2
 8002626:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002628:	f7ff fd6d 	bl	8002106 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262c:	f7fd ffd8 	bl	80005e0 <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002632:	e009      	b.n	8002648 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002634:	f7fd ffd4 	bl	80005e0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d902      	bls.n	8002648 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	73fb      	strb	r3, [r7, #15]
        break;
 8002646:	e004      	b.n	8002652 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002648:	f7ff fd7b 	bl	8002142 <LL_RCC_PLLSAI1_IsReady>
 800264c:	4603      	mov	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d1f0      	bne.n	8002634 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002666:	4313      	orrs	r3, r2
 8002668:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <memset>:
 8002674:	4402      	add	r2, r0
 8002676:	4603      	mov	r3, r0
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	f803 1b01 	strb.w	r1, [r3], #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	4d0d      	ldr	r5, [pc, #52]	; (80026bc <__libc_init_array+0x38>)
 8002688:	4c0d      	ldr	r4, [pc, #52]	; (80026c0 <__libc_init_array+0x3c>)
 800268a:	1b64      	subs	r4, r4, r5
 800268c:	10a4      	asrs	r4, r4, #2
 800268e:	2600      	movs	r6, #0
 8002690:	42a6      	cmp	r6, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	4d0b      	ldr	r5, [pc, #44]	; (80026c4 <__libc_init_array+0x40>)
 8002696:	4c0c      	ldr	r4, [pc, #48]	; (80026c8 <__libc_init_array+0x44>)
 8002698:	f000 f818 	bl	80026cc <_init>
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	2600      	movs	r6, #0
 80026a2:	42a6      	cmp	r6, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ac:	4798      	blx	r3
 80026ae:	3601      	adds	r6, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b6:	4798      	blx	r3
 80026b8:	3601      	adds	r6, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	08002790 	.word	0x08002790
 80026c0:	08002790 	.word	0x08002790
 80026c4:	08002790 	.word	0x08002790
 80026c8:	08002794 	.word	0x08002794

080026cc <_init>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr

080026d8 <_fini>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr
