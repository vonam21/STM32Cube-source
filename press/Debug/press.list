
press.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08003c04  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  20000014  08003c10  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003bc  08003c10  000203bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013410  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000285e  00000000  00000000  00033497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001428  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f54  00000000  00000000  00037120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020ff5  00000000  00000000  00038074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011bd1  00000000  00000000  00059069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d4d60  00000000  00000000  0006ac3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005474  00000000  00000000  0013f99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00144e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003ae8 	.word	0x08003ae8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003ae8 	.word	0x08003ae8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb11 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f80b 	bl	80004f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e2:	f000 f87f 	bl	80005e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f917 	bl	8000718 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f89f 	bl	800062c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004ee:	f000 f8eb 	bl	80006c8 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 80004f2:	f000 f894 	bl	800061e <MX_MEMORYMAP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x20>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09a      	sub	sp, #104	; 0x68
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2248      	movs	r2, #72	; 0x48
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fac2 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800051e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800052c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800052e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	f023 0303 	bic.w	r3, r3, #3
 8000538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000542:	f000 fed3 	bl	80012ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ff96 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SystemClock_Config+0xe8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000554:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <SystemClock_Config+0xe8>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <SystemClock_Config+0xe8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000568:	2327      	movs	r3, #39	; 0x27
 800056a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fa3d 	bl	8001a14 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005a0:	f000 f904 	bl	80007ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005a4:	236f      	movs	r3, #111	; 0x6f
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005a8:	2302      	movs	r3, #2
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2101      	movs	r1, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fd99 	bl	80020fc <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005d0:	f000 f8ec 	bl	80007ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d4:	f002 fb54 	bl	8002c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005d8:	bf00      	nop
 80005da:	3768      	adds	r7, #104	; 0x68
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	58000400 	.word	0x58000400

080005e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2250      	movs	r2, #80	; 0x50
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fa4d 	bl	8003a90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f9c4 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000612:	f000 f8cb 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000632:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <MX_USART1_UART_Init+0x98>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000644:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000654:	220c      	movs	r2, #12
 8000656:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000678:	f002 fc39 	bl	8002eee <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000682:	f000 f893 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 800068a:	f003 f8fb 	bl	8003884 <HAL_UARTEx_SetTxFifoThreshold>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000694:	f000 f88a 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 800069c:	f003 f930 	bl	8003900 <HAL_UARTEx_SetRxFifoThreshold>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80006a6:	f000 f881 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 80006ac:	f003 f8b1 	bl	8003812 <HAL_UARTEx_DisableFifoMode>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80006b6:	f000 f879 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000030 	.word	0x20000030
 80006c4:	40013800 	.word	0x40013800

080006c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_USB_PCD_Init+0x4c>)
 80006d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006da:	2202      	movs	r2, #2
 80006dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_USB_PCD_Init+0x48>)
 80006fe:	f000 fcf1 	bl	80010e4 <HAL_PCD_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000708:	f000 f850 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000c4 	.word	0x200000c4
 8000714:	40006800 	.word	0x40006800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	2004      	movs	r0, #4
 800072e:	f7ff feb9 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2002      	movs	r0, #2
 8000734:	f7ff feb6 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff feb3 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2008      	movs	r0, #8
 8000740:	f7ff feb0 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2123      	movs	r1, #35	; 0x23
 8000748:	4815      	ldr	r0, [pc, #84]	; (80007a0 <MX_GPIO_Init+0x88>)
 800074a:	f000 fcb3 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800074e:	2310      	movs	r3, #16
 8000750:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8000752:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8000756:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_GPIO_Init+0x8c>)
 8000762:	f000 fb37 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000766:	2323      	movs	r3, #35	; 0x23
 8000768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_GPIO_Init+0x88>)
 800077c:	f000 fb2a 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000780:	2303      	movs	r3, #3
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000792:	f000 fb1f 	bl	8000dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000800 	.word	0x48000800
 80007a8:	48000c00 	.word	0x48000c00

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>

080007b6 <LL_AHB2_GRP1_EnableClock>:
{
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	; 0x70
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2250      	movs	r2, #80	; 0x50
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 f907 	bl	8003a90 <memset>
  if(huart->Instance==USART1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_UART_MspInit+0x84>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d124      	bne.n	80008d6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800088c:	2301      	movs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f87b 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008a4:	f7ff ff82 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008ac:	f7ff ffb5 	bl	800081a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff ff80 	bl	80007b6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80008b6:	23c0      	movs	r3, #192	; 0xc0
 80008b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c6:	2307      	movs	r3, #7
 80008c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008ce:	4619      	mov	r1, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HAL_UART_MspInit+0x88>)
 80008d2:	f000 fa7f 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3770      	adds	r7, #112	; 0x70
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40013800 	.word	0x40013800
 80008e4:	48000400 	.word	0x48000400

080008e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2250      	movs	r2, #80	; 0x50
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f003 f8c1 	bl	8003a90 <memset>
  if(hpcd->Instance==USB)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_PCD_MspInit+0xa8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d136      	bne.n	8000986 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800091e:	2318      	movs	r3, #24
 8000920:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000926:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800092c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800092e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000932:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000938:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800093a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4618      	mov	r0, r3
 8000946:	f002 f825 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000950:	f7ff ff2c 	bl	80007ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff2e 	bl	80007b6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800095a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800095e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800096c:	230a      	movs	r3, #10
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fa2b 	bl	8000dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800097e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000982:	f7ff ff31 	bl	80007e8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3770      	adds	r7, #112	; 0x70
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40006800 	.word	0x40006800

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8e8 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <SystemInit+0x98>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <SystemInit+0x98>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a10:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a14:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <SystemInit+0x9c>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a32:	f023 0305 	bic.w	r3, r3, #5
 8000a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a52:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <SystemInit+0xa0>)
 8000a54:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <SystemInit+0xa0>)
 8000a5c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	faf6fefb 	.word	0xfaf6fefb
 8000a88:	22041000 	.word	0x22041000

08000a8c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a8c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a90:	3304      	adds	r3, #4

08000a92 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a92:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a94:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a96:	d3f9      	bcc.n	8000a8c <CopyDataInit>
  bx lr
 8000a98:	4770      	bx	lr

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a9a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a9c:	3004      	adds	r0, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a9e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>
  bx lr
 8000aa2:	4770      	bx	lr

08000aa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa8:	f7ff ff9e 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopForever+0x6>)
 8000aae:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <LoopForever+0xa>)
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <LoopForever+0xe>)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f7ff ffed 	bl	8000a92 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <LoopForever+0x12>)
 8000aba:	490c      	ldr	r1, [pc, #48]	; (8000aec <LoopForever+0x16>)
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <LoopForever+0x1a>)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f7ff ffe7 	bl	8000a92 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <LoopForever+0x1e>)
 8000ac6:	490c      	ldr	r1, [pc, #48]	; (8000af8 <LoopForever+0x22>)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f7ff ffe8 	bl	8000a9e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f002 ffe7 	bl	8003aa0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ad2:	f7ff fd00 	bl	80004d6 <main>

08000ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000014 	.word	0x20000014
 8000ae4:	08003c04 	.word	0x08003c04
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ae8:	20030000 	.word	0x20030000
 8000aec:	20030000 	.word	0x20030000
 8000af0:	08003c10 	.word	0x08003c10
  INIT_BSS _sbss, _ebss
 8000af4:	20000014 	.word	0x20000014
 8000af8:	200003bc 	.word	0x200003bc

08000afc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_Init+0x3c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <HAL_Init+0x3c>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f92a 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 f80f 	bl	8000b40 <HAL_InitTick>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	e001      	b.n	8000b32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2e:	f7ff fe8d 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58004000 	.word	0x58004000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d024      	beq.n	8000b9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	f001 fc7e 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x6c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f924 	bl	8000dba <HAL_SYSTICK_Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d809      	bhi.n	8000b92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	f000 f8fe 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e004      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000000c 	.word	0x2000000c

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000010 	.word	0x20000010
 8000bd8:	200003b8 	.word	0x200003b8

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200003b8 	.word	0x200003b8

08000bf4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTickPrio+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000000c 	.word	0x2000000c

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff47 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff5e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff90 	bl	8000cc4 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5f 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb2 	bl	8000d2c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e14c      	b.n	800107e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 813e 	beq.w	8001078 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8098 	beq.w	8001078 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f48:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f72:	d019      	beq.n	8000fa8 <HAL_GPIO_Init+0x1d4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d013      	beq.n	8000fa4 <HAL_GPIO_Init+0x1d0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00d      	beq.n	8000fa0 <HAL_GPIO_Init+0x1cc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x1c8>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d101      	bne.n	8000f98 <HAL_GPIO_Init+0x1c4>
 8000f94:	2304      	movs	r3, #4
 8000f96:	e008      	b.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000f98:	2307      	movs	r3, #7
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fba:	4938      	ldr	r1, [pc, #224]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc8:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fec:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001016:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 800104c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	f47f aeab 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40010000 	.word	0x40010000
 80010a0:	48000400 	.word	0x48000400
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000c00 	.word	0x48000c00
 80010ac:	48001000 	.word	0x48001000
 80010b0:	58000800 	.word	0x58000800

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b08b      	sub	sp, #44	; 0x2c
 80010e8:	af06      	add	r7, sp, #24
 80010ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e0cb      	b.n	800128e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fbec 	bl	80008e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fc7b 	bl	8003a18 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e040      	b.n	80011aa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3301      	adds	r3, #1
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	3303      	adds	r3, #3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	3338      	adds	r3, #56	; 0x38
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	333c      	adds	r3, #60	; 0x3c
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	3340      	adds	r3, #64	; 0x40
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	3301      	adds	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d3b9      	bcc.n	8001128 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e044      	b.n	8001244 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	3301      	adds	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	d3b5      	bcc.n	80011ba <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	687e      	ldr	r6, [r7, #4]
 8001256:	466d      	mov	r5, sp
 8001258:	f106 0410 	add.w	r4, r6, #16
 800125c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	1d33      	adds	r3, r6, #4
 8001266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	f002 fbf0 	bl	8003a4e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d102      	bne.n	800128c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f805 	bl	8001296 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001296 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	58000400 	.word	0x58000400

0800130c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <HAL_PWREx_GetVoltageRange+0x18>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	58000400 	.word	0x58000400

08001328 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800133a:	d101      	bne.n	8001340 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_RCC_HSE_Enable>:
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800135a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_RCC_HSE_Disable>:
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_RCC_HSE_IsReady>:
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800139a:	d101      	bne.n	80013a0 <LL_RCC_HSE_IsReady+0x18>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <LL_RCC_HSE_IsReady+0x1a>
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_RCC_HSI_Enable>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_HSI_Disable>:
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_RCC_HSI_IsReady>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fa:	d101      	bne.n	8001400 <LL_RCC_HSI_IsReady+0x18>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <LL_RCC_HSI_IsReady+0x1a>
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_RCC_HSI_SetCalibTrimming>:
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_RCC_HSI48_Enable>:
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_RCC_HSI48_Disable>:
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_RCC_HSI48_IsReady>:
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d101      	bne.n	8001492 <LL_RCC_HSI48_IsReady+0x18>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_RCC_HSI48_IsReady+0x1a>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_RCC_LSE_Enable>:
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_RCC_LSE_Disable>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_RCC_LSE_EnableBypass>:
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_RCC_LSE_DisableBypass>:
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d101      	bne.n	800153e <LL_RCC_LSE_IsReady+0x18>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_RCC_LSE_IsReady+0x1a>
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d101      	bne.n	80015a6 <LL_RCC_LSI1_IsReady+0x18>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_RCC_LSI1_IsReady+0x1a>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b08      	cmp	r3, #8
 8001608:	d101      	bne.n	800160e <LL_RCC_LSI2_IsReady+0x18>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_RCC_LSI2_IsReady+0x1a>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001636:	4313      	orrs	r3, r2
 8001638:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6013      	str	r3, [r2, #0]
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b02      	cmp	r3, #2
 8001694:	d101      	bne.n	800169a <LL_RCC_MSI_IsReady+0x16>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_RCC_MSI_IsReady+0x18>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016de:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2bb0      	cmp	r3, #176	; 0xb0
 80016e4:	d901      	bls.n	80016ea <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80016e6:	23b0      	movs	r3, #176	; 0xb0
 80016e8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 0203 	bic.w	r2, r3, #3
 8001734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800179a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017c6:	f023 020f 	bic.w	r2, r3, #15
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800181e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018e6:	d101      	bne.n	80018ec <LL_RCC_PLL_IsReady+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_RCC_PLL_IsReady+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0303 	and.w	r3, r3, #3
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d101      	bne.n	8001972 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001992:	d101      	bne.n	8001998 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d101      	bne.n	80019be <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019dc:	d101      	bne.n	80019e2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a00:	d101      	bne.n	8001a06 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b08d      	sub	sp, #52	; 0x34
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e363      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 808d 	beq.w	8001b4e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a34:	f7ff fe89 	bl	800174a <LL_RCC_GetSysClkSource>
 8001a38:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3a:	f7ff ff82 	bl	8001942 <LL_RCC_PLL_GetMainSource>
 8001a3e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3e>
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d147      	bne.n	8001adc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d144      	bne.n	8001adc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e347      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001a62:	f7ff fe34 	bl	80016ce <LL_RCC_MSI_GetRange>
 8001a66:	4603      	mov	r3, r0
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	d914      	bls.n	8001a96 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fd2f 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e336      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe0e 	bl	80016a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe32 	bl	80016f8 <LL_RCC_MSI_SetCalibTrimming>
 8001a94:	e013      	b.n	8001abe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe03 	bl	80016a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fe27 	bl	80016f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd10 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e317      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001abe:	f000 fcc9 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4aa4      	ldr	r2, [pc, #656]	; (8001d58 <HAL_RCC_OscConfig+0x344>)
 8001ac6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ac8:	4ba4      	ldr	r3, [pc, #656]	; (8001d5c <HAL_RCC_OscConfig+0x348>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f837 	bl	8000b40 <HAL_InitTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d039      	beq.n	8001b4c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e308      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01e      	beq.n	8001b22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ae4:	f7ff fdb0 	bl	8001648 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f878 	bl	8000bdc <HAL_GetTick>
 8001aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af0:	f7ff f874 	bl	8000bdc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e2f5      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b02:	f7ff fdbf 	bl	8001684 <LL_RCC_MSI_IsReady>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f1      	beq.n	8001af0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fdc8 	bl	80016a6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fdec 	bl	80016f8 <LL_RCC_MSI_SetCalibTrimming>
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b22:	f7ff fda0 	bl	8001666 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f859 	bl	8000bdc <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f855 	bl	8000bdc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e2d6      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b40:	f7ff fda0 	bl	8001684 <LL_RCC_MSI_IsReady>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f1      	bne.n	8001b2e <HAL_RCC_OscConfig+0x11a>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d047      	beq.n	8001bea <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	f7ff fdf6 	bl	800174a <LL_RCC_GetSysClkSource>
 8001b5e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	f7ff feef 	bl	8001942 <LL_RCC_PLL_GetMainSource>
 8001b64:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_OscConfig+0x164>
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d108      	bne.n	8001b84 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d134      	bne.n	8001bea <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e2b4      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d102      	bne.n	8001b94 <HAL_RCC_OscConfig+0x180>
 8001b8e:	f7ff fbdd 	bl	800134c <LL_RCC_HSE_Enable>
 8001b92:	e001      	b.n	8001b98 <HAL_RCC_OscConfig+0x184>
 8001b94:	f7ff fbe9 	bl	800136a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d012      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f81c 	bl	8000bdc <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff f818 	bl	8000bdc <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e299      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bba:	f7ff fbe5 	bl	8001388 <LL_RCC_HSE_IsReady>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f1      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x194>
 8001bc4:	e011      	b.n	8001bea <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f809 	bl	8000bdc <HAL_GetTick>
 8001bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bce:	f7ff f805 	bl	8000bdc <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b64      	cmp	r3, #100	; 0x64
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e286      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001be0:	f7ff fbd2 	bl	8001388 <LL_RCC_HSE_IsReady>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f1      	bne.n	8001bce <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf6:	f7ff fda8 	bl	800174a <LL_RCC_GetSysClkSource>
 8001bfa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfc:	f7ff fea1 	bl	8001942 <LL_RCC_PLL_GetMainSource>
 8001c00:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x200>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d10e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e266      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fbf1 	bl	800140c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c2a:	e031      	b.n	8001c90 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d019      	beq.n	8001c68 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	f7ff fbba 	bl	80013ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7fe ffd0 	bl	8000bdc <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7fe ffcc 	bl	8000bdc <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e24d      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c52:	f7ff fbc9 	bl	80013e8 <LL_RCC_HSI_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f1      	beq.n	8001c40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fbd3 	bl	800140c <LL_RCC_HSI_SetCalibTrimming>
 8001c66:	e013      	b.n	8001c90 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c68:	f7ff fbaf 	bl	80013ca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ffb6 	bl	8000bdc <HAL_GetTick>
 8001c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7fe ffb2 	bl	8000bdc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e233      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c86:	f7ff fbaf 	bl	80013e8 <LL_RCC_HSI_IsReady>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f1      	bne.n	8001c74 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a3 	beq.w	8001df0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d076      	beq.n	8001da0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d046      	beq.n	8001d4c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001cbe:	f7ff fc66 	bl	800158e <LL_RCC_LSI1_IsReady>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d113      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001cc8:	f7ff fc3f 	bl	800154a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ccc:	f7fe ff86 	bl	8000bdc <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001cd4:	f7fe ff82 	bl	8000bdc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e203      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ce6:	f7ff fc52 	bl	800158e <LL_RCC_LSI1_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f1      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001cf0:	f7ff fc5f 	bl	80015b2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff72 	bl	8000bdc <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001cfc:	f7fe ff6e 	bl	8000bdc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1ef      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001d0e:	f7ff fc72 	bl	80015f6 <LL_RCC_LSI2_IsReady>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f1      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fc7c 	bl	800161a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001d22:	f7ff fc23 	bl	800156c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7fe ff59 	bl	8000bdc <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001d2e:	f7fe ff55 	bl	8000bdc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1d6      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001d40:	f7ff fc25 	bl	800158e <LL_RCC_LSI1_IsReady>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f1      	bne.n	8001d2e <HAL_RCC_OscConfig+0x31a>
 8001d4a:	e051      	b.n	8001df0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001d4c:	f7ff fbfd 	bl	800154a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe ff44 	bl	8000bdc <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001d56:	e00c      	b.n	8001d72 <HAL_RCC_OscConfig+0x35e>
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001d60:	f7fe ff3c 	bl	8000bdc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1bd      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001d72:	f7ff fc0c 	bl	800158e <LL_RCC_LSI1_IsReady>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f1      	beq.n	8001d60 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001d7c:	f7ff fc2a 	bl	80015d4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001d82:	f7fe ff2b 	bl	8000bdc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1ac      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001d94:	f7ff fc2f 	bl	80015f6 <LL_RCC_LSI2_IsReady>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f1      	bne.n	8001d82 <HAL_RCC_OscConfig+0x36e>
 8001d9e:	e027      	b.n	8001df0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001da0:	f7ff fc18 	bl	80015d4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7fe ff1a 	bl	8000bdc <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001dac:	f7fe ff16 	bl	8000bdc <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e197      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001dbe:	f7ff fc1a 	bl	80015f6 <LL_RCC_LSI2_IsReady>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f1      	bne.n	8001dac <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001dc8:	f7ff fbd0 	bl	800156c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7fe ff06 	bl	8000bdc <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001dd4:	f7fe ff02 	bl	8000bdc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e183      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001de6:	f7ff fbd2 	bl	800158e <LL_RCC_LSI1_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f1      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d05b      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfc:	4ba7      	ldr	r3, [pc, #668]	; (800209c <HAL_RCC_OscConfig+0x688>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d114      	bne.n	8001e32 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e08:	f7ff fa70 	bl	80012ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fee6 	bl	8000bdc <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7fe fee2 	bl	8000bdc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e163      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e26:	4b9d      	ldr	r3, [pc, #628]	; (800209c <HAL_RCC_OscConfig+0x688>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0x42c>
 8001e3a:	f7ff fb30 	bl	800149e <LL_RCC_LSE_Enable>
 8001e3e:	e00c      	b.n	8001e5a <HAL_RCC_OscConfig+0x446>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d104      	bne.n	8001e52 <HAL_RCC_OscConfig+0x43e>
 8001e48:	f7ff fb4b 	bl	80014e2 <LL_RCC_LSE_EnableBypass>
 8001e4c:	f7ff fb27 	bl	800149e <LL_RCC_LSE_Enable>
 8001e50:	e003      	b.n	8001e5a <HAL_RCC_OscConfig+0x446>
 8001e52:	f7ff fb35 	bl	80014c0 <LL_RCC_LSE_Disable>
 8001e56:	f7ff fb55 	bl	8001504 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d014      	beq.n	8001e8c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7fe febb 	bl	8000bdc <HAL_GetTick>
 8001e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe feb7 	bl	8000bdc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e136      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e80:	f7ff fb51 	bl	8001526 <LL_RCC_LSE_IsReady>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ef      	beq.n	8001e6a <HAL_RCC_OscConfig+0x456>
 8001e8a:	e013      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fea6 	bl	8000bdc <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7fe fea2 	bl	8000bdc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e121      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001eaa:	f7ff fb3c 	bl	8001526 <LL_RCC_LSE_IsReady>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ef      	bne.n	8001e94 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d02c      	beq.n	8001f1a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d014      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec8:	f7ff fab5 	bl	8001436 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fe86 	bl	8000bdc <HAL_GetTick>
 8001ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed4:	f7fe fe82 	bl	8000bdc <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e103      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001ee6:	f7ff fac8 	bl	800147a <LL_RCC_HSI48_IsReady>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4c0>
 8001ef0:	e013      	b.n	8001f1a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef2:	f7ff fab1 	bl	8001458 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fe71 	bl	8000bdc <HAL_GetTick>
 8001efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efe:	f7fe fe6d 	bl	8000bdc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0ee      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001f10:	f7ff fab3 	bl	800147a <LL_RCC_HSI48_IsReady>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f1      	bne.n	8001efe <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80e4 	beq.w	80020ec <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f24:	f7ff fc11 	bl	800174a <LL_RCC_GetSysClkSource>
 8001f28:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	f040 80b4 	bne.w	80020a4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0203 	and.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d123      	bne.n	8001f92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d11c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d114      	bne.n	8001f92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d10d      	bne.n	8001f92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d05d      	beq.n	800204e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	d058      	beq.n	800204a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0a1      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001faa:	f7ff fc84 	bl	80018b6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fae:	f7fe fe15 	bl	8000bdc <HAL_GetTick>
 8001fb2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7fe fe11 	bl	8000bdc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e092      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ef      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x68c>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fee:	0212      	lsls	r2, r2, #8
 8001ff0:	4311      	orrs	r1, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002002:	430a      	orrs	r2, r1
 8002004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800200c:	f7ff fc44 	bl	8001898 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002020:	f7fe fddc 	bl	8000bdc <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe fdd8 	bl	8000bdc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e059      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002048:	e050      	b.n	80020ec <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e04f      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d147      	bne.n	80020ec <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800205c:	f7ff fc1c 	bl	8001898 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002070:	f7fe fdb4 	bl	8000bdc <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fdb0 	bl	8000bdc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e031      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ef      	beq.n	8002078 <HAL_RCC_OscConfig+0x664>
 8002098:	e028      	b.n	80020ec <HAL_RCC_OscConfig+0x6d8>
 800209a:	bf00      	nop
 800209c:	58000400 	.word	0x58000400
 80020a0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d01e      	beq.n	80020e8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	f7ff fc04 	bl	80018b6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7fe fd95 	bl	8000bdc <HAL_GetTick>
 80020b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe fd91 	bl	8000bdc <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e012      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ef      	bne.n	80020b6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_OscConfig+0x6e4>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60cb      	str	r3, [r1, #12]
 80020e6:	e001      	b.n	80020ec <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3734      	adds	r7, #52	; 0x34
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	eefefffc 	.word	0xeefefffc

080020fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e12d      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b98      	ldr	r3, [pc, #608]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d91b      	bls.n	8002156 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b95      	ldr	r3, [pc, #596]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4993      	ldr	r1, [pc, #588]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212e:	f7fe fd55 	bl	8000bdc <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002134:	e008      	b.n	8002148 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002136:	f7fe fd51 	bl	8000bdc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e111      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002148:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fafb 	bl	8001762 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800216c:	f7fe fd36 	bl	8000bdc <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002174:	f7fe fd32 	bl	8000bdc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0f2      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002186:	f7ff fbe8 	bl	800195a <LL_RCC_IsActiveFlag_HPRE>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f1      	beq.n	8002174 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff faf2 	bl	800178a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021a6:	f7fe fd19 	bl	8000bdc <HAL_GetTick>
 80021aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021ae:	f7fe fd15 	bl	8000bdc <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0d5      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80021c0:	f7ff fbdd 	bl	800197e <LL_RCC_IsActiveFlag_C2HPRE>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f1      	beq.n	80021ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff faeb 	bl	80017b6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fcfc 	bl	8000bdc <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021e8:	f7fe fcf8 	bl	8000bdc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0b8      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80021fa:	f7ff fbd3 	bl	80019a4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f1      	beq.n	80021e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d016      	beq.n	800223e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fae5 	bl	80017e4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800221a:	f7fe fcdf 	bl	8000bdc <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002222:	f7fe fcdb 	bl	8000bdc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e09b      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002234:	f7ff fbc9 	bl	80019ca <LL_RCC_IsActiveFlag_PPRE1>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f1      	beq.n	8002222 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d017      	beq.n	800227a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fadb 	bl	800180c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002256:	f7fe fcc1 	bl	8000bdc <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800225e:	f7fe fcbd 	bl	8000bdc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e07d      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002270:	f7ff fbbd 	bl	80019ee <LL_RCC_IsActiveFlag_PPRE2>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f1      	beq.n	800225e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d043      	beq.n	800230e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d106      	bne.n	800229c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800228e:	f7ff f87b 	bl	8001388 <LL_RCC_HSE_IsReady>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11e      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e067      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80022a4:	f7ff fb16 	bl	80018d4 <LL_RCC_PLL_IsReady>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e05c      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80022ba:	f7ff f9e3 	bl	8001684 <LL_RCC_MSI_IsReady>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e051      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80022c8:	f7ff f88e 	bl	80013e8 <LL_RCC_HSI_IsReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04a      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fa21 	bl	8001722 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e0:	f7fe fc7c 	bl	8000bdc <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fc78 	bl	8000bdc <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e036      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	f7ff fa24 	bl	800174a <LL_RCC_GetSysClkSource>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	429a      	cmp	r2, r3
 800230c:	d1ec      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d21b      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 0207 	bic.w	r2, r3, #7
 8002324:	4913      	ldr	r1, [pc, #76]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7fe fc56 	bl	8000bdc <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	e008      	b.n	8002346 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002334:	f7fe fc52 	bl	8000bdc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e012      	b.n	800236c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x278>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d1ef      	bne.n	8002334 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002354:	f000 f87e 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002358:	4603      	mov	r3, r0
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_RCC_ClockConfig+0x27c>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800235e:	f7fe fc49 	bl	8000bf4 <HAL_GetTickPrio>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fbeb 	bl	8000b40 <HAL_InitTick>
 800236a:	4603      	mov	r3, r0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58004000 	.word	0x58004000
 8002378:	20000008 	.word	0x20000008

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	f7ff f9e2 	bl	800174a <LL_RCC_GetSysClkSource>
 8002386:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800238e:	f7ff f99e 	bl	80016ce <LL_RCC_MSI_GetRange>
 8002392:	4603      	mov	r3, r0
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <HAL_RCC_GetSysClockFreq+0xcc>)
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e04b      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e045      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d10a      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80023b6:	f7fe ffb7 	bl	8001328 <LL_RCC_HSE_IsEnabledDiv2>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e03a      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e037      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80023cc:	f7ff fab9 	bl	8001942 <LL_RCC_PLL_GetMainSource>
 80023d0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d003      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x64>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x6a>
 80023de:	e00d      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023e2:	60bb      	str	r3, [r7, #8]
        break;
 80023e4:	e015      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80023e6:	f7fe ff9f 	bl	8001328 <LL_RCC_HSE_IsEnabledDiv2>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d102      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023f2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80023f4:	e00d      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023f8:	60bb      	str	r3, [r7, #8]
        break;
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80023fc:	f7ff f967 	bl	80016ce <LL_RCC_MSI_GetRange>
 8002400:	4603      	mov	r3, r0
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_RCC_GetSysClockFreq+0xcc>)
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	60bb      	str	r3, [r7, #8]
        break;
 8002410:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002412:	f7ff fa71 	bl	80018f8 <LL_RCC_PLL_GetN>
 8002416:	4602      	mov	r2, r0
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	fb03 f402 	mul.w	r4, r3, r2
 800241e:	f7ff fa84 	bl	800192a <LL_RCC_PLL_GetDivider>
 8002422:	4603      	mov	r3, r0
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	3301      	adds	r3, #1
 8002428:	fbb4 f4f3 	udiv	r4, r4, r3
 800242c:	f7ff fa71 	bl	8001912 <LL_RCC_PLL_GetR>
 8002430:	4603      	mov	r3, r0
 8002432:	0f5b      	lsrs	r3, r3, #29
 8002434:	3301      	adds	r3, #1
 8002436:	fbb4 f3f3 	udiv	r3, r4, r3
 800243a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800243c:	68fb      	ldr	r3, [r7, #12]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	08003b8c 	.word	0x08003b8c
 800244c:	00f42400 	.word	0x00f42400
 8002450:	01e84800 	.word	0x01e84800

08002454 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002454:	b598      	push	{r3, r4, r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002458:	f7ff ff90 	bl	800237c <HAL_RCC_GetSysClockFreq>
 800245c:	4604      	mov	r4, r0
 800245e:	f7ff f9e9 	bl	8001834 <LL_RCC_GetAHBPrescaler>
 8002462:	4603      	mov	r3, r0
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a03      	ldr	r2, [pc, #12]	; (8002478 <HAL_RCC_GetHCLKFreq+0x24>)
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd98      	pop	{r3, r4, r7, pc}
 8002478:	08003b2c 	.word	0x08003b2c

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b598      	push	{r3, r4, r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002480:	f7ff ffe8 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002484:	4604      	mov	r4, r0
 8002486:	f7ff f9ef 	bl	8001868 <LL_RCC_GetAPB1Prescaler>
 800248a:	4603      	mov	r3, r0
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd98      	pop	{r3, r4, r7, pc}
 80024a4:	08003b6c 	.word	0x08003b6c

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b598      	push	{r3, r4, r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80024ac:	f7ff ffd2 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 80024b0:	4604      	mov	r4, r0
 80024b2:	f7ff f9e5 	bl	8001880 <LL_RCC_GetAPB2Prescaler>
 80024b6:	4603      	mov	r3, r0
 80024b8:	0adb      	lsrs	r3, r3, #11
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd98      	pop	{r3, r4, r7, pc}
 80024d0:	08003b6c 	.word	0x08003b6c

080024d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2bb0      	cmp	r3, #176	; 0xb0
 80024e0:	d903      	bls.n	80024ea <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e007      	b.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a11      	ldr	r2, [pc, #68]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80024fa:	f7ff f9a7 	bl	800184c <LL_RCC_GetAHB4Prescaler>
 80024fe:	4603      	mov	r3, r0
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a0d      	ldr	r2, [pc, #52]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	0c9c      	lsrs	r4, r3, #18
 800251e:	f7fe fef5 	bl	800130c <HAL_PWREx_GetVoltageRange>
 8002522:	4603      	mov	r3, r0
 8002524:	4619      	mov	r1, r3
 8002526:	4620      	mov	r0, r4
 8002528:	f000 f80c 	bl	8002544 <RCC_SetFlashLatency>
 800252c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}
 8002536:	bf00      	nop
 8002538:	08003b8c 	.word	0x08003b8c
 800253c:	08003b2c 	.word	0x08003b2c
 8002540:	431bde83 	.word	0x431bde83

08002544 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b093      	sub	sp, #76	; 0x4c
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <RCC_SetFlashLatency+0xe8>)
 8002550:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002554:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002556:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800255a:	4a35      	ldr	r2, [pc, #212]	; (8002630 <RCC_SetFlashLatency+0xec>)
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	ca07      	ldmia	r2, {r0, r1, r2}
 8002562:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <RCC_SetFlashLatency+0xf0>)
 8002568:	f107 040c 	add.w	r4, r7, #12
 800256c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002572:	2300      	movs	r3, #0
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257c:	d11a      	bne.n	80025b4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800257e:	2300      	movs	r3, #0
 8002580:	643b      	str	r3, [r7, #64]	; 0x40
 8002582:	e013      	b.n	80025ac <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	3348      	adds	r3, #72	; 0x48
 800258a:	443b      	add	r3, r7
 800258c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	d807      	bhi.n	80025a6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	3348      	adds	r3, #72	; 0x48
 800259c:	443b      	add	r3, r7
 800259e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80025a2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80025a4:	e020      	b.n	80025e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80025a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a8:	3301      	adds	r3, #1
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
 80025ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d9e8      	bls.n	8002584 <RCC_SetFlashLatency+0x40>
 80025b2:	e019      	b.n	80025e8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	e013      	b.n	80025e2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3348      	adds	r3, #72	; 0x48
 80025c0:	443b      	add	r3, r7
 80025c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d807      	bhi.n	80025dc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80025cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3348      	adds	r3, #72	; 0x48
 80025d2:	443b      	add	r3, r7
 80025d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80025da:	e005      	b.n	80025e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025de:	3301      	adds	r3, #1
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d9e8      	bls.n	80025ba <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <RCC_SetFlashLatency+0xf4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 0207 	bic.w	r2, r3, #7
 80025f0:	4911      	ldr	r1, [pc, #68]	; (8002638 <RCC_SetFlashLatency+0xf4>)
 80025f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025f8:	f7fe faf0 	bl	8000bdc <HAL_GetTick>
 80025fc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80025fe:	e008      	b.n	8002612 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002600:	f7fe faec 	bl	8000bdc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e007      	b.n	8002622 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <RCC_SetFlashLatency+0xf4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261c:	429a      	cmp	r2, r3
 800261e:	d1ef      	bne.n	8002600 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	374c      	adds	r7, #76	; 0x4c
 8002626:	46bd      	mov	sp, r7
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	08003b00 	.word	0x08003b00
 8002630:	08003b10 	.word	0x08003b10
 8002634:	08003b1c 	.word	0x08003b1c
 8002638:	58004000 	.word	0x58004000

0800263c <LL_RCC_LSE_IsEnabled>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <LL_RCC_LSE_IsEnabled+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_RCC_LSE_IsEnabled+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_RCC_LSE_IsReady>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d101      	bne.n	8002678 <LL_RCC_LSE_IsReady+0x18>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <LL_RCC_LSE_IsReady+0x1a>
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_RCC_MSI_EnablePLLMode>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_RCC_SetRFWKPClockSource>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_SetSMPSClockSource>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f023 0203 	bic.w	r2, r3, #3
 80026e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_RCC_SetSMPSPrescaler>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4313      	orrs	r3, r2
 8002710:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_RCC_SetUSARTClockSource>:
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_RCC_SetLPUARTClockSource>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_RCC_SetI2CClockSource>:
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800278e:	43db      	mvns	r3, r3
 8002790:	401a      	ands	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800279a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_SetLPTIMClockSource>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	43db      	mvns	r3, r3
 80027c8:	401a      	ands	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_SetSAIClockSource>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_RCC_SetRNGClockSource>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_RCC_SetCLK48ClockSource>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_RCC_SetUSBClockSource>:
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffe3 	bl	800283c <LL_RCC_SetCLK48ClockSource>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <LL_RCC_SetADCClockSource>:
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_SetRTCClockSource>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_RCC_GetRTCClockSource>:
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_RCC_ForceBackupDomainReset>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_RCC_PLLSAI1_Enable>:
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_PLLSAI1_Disable>:
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002960:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002964:	6013      	str	r3, [r2, #0]
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_RCC_PLLSAI1_IsReady>:
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800297e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002982:	d101      	bne.n	8002988 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d034      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029b8:	d021      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80029ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029be:	d81b      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029c4:	d01d      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80029c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ca:	d815      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80029d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d4:	d110      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80029e6:	e00d      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f94d 	bl	8002c8c <RCCEx_PLLSAI1_ConfigNP>
 80029f2:	4603      	mov	r3, r0
 80029f4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80029f6:	e005      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
        break;
 80029fc:	e002      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a04:	7ffb      	ldrb	r3, [r7, #31]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fee8 	bl	80027e4 <LL_RCC_SetSAIClockSource>
 8002a14:	e001      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d046      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002a26:	f7ff ff56 	bl	80028d6 <LL_RCC_GetRTCClockSource>
 8002a2a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d03c      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a36:	f7fe fc59 	bl	80012ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff30 	bl	80028aa <LL_RCC_SetRTCClockSource>
 8002a4a:	e02e      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002a56:	f7ff ff4b 	bl	80028f0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002a5a:	f7ff ff5a 	bl	8002912 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002a76:	f7ff fde1 	bl	800263c <LL_RCC_LSE_IsEnabled>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d114      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a80:	f7fe f8ac 	bl	8000bdc <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe f8a8 	bl	8000bdc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d902      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	77fb      	strb	r3, [r7, #31]
              break;
 8002a9e:	e004      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002aa0:	f7ff fdde 	bl	8002660 <LL_RCC_LSE_IsReady>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	77bb      	strb	r3, [r7, #30]
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
 8002ab2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fe2a 	bl	800271e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fe35 	bl	800274a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fe5d 	bl	80027b0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe52 	bl	80027b0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fe2a 	bl	8002776 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fe1f 	bl	8002776 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d022      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fe8d 	bl	8002868 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b56:	d107      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f8e3 	bl	8002d42 <RCCEx_PLLSAI1_ConfigNQ>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02b      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fe2a 	bl	8002810 <LL_RCC_SetRNGClockSource>
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff fe21 	bl	8002810 <LL_RCC_SetRNGClockSource>
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff fe34 	bl	800283c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002bdc:	d107      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d022      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fe3d 	bl	800287e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f8e3 	bl	8002df8 <RCCEx_PLLSAI1_ConfigNR>
 8002c32:	4603      	mov	r3, r0
 8002c34:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
 8002c3e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fd26 	bl	80026a2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd45 	bl	80026f6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fd2c 	bl	80026ce <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002c76:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002c84:	f7ff fcfe 	bl	8002684 <LL_RCC_MSI_EnablePLLMode>
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002c98:	f7ff fe5b 	bl	8002952 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c9c:	f7fd ff9e 	bl	8000bdc <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ca2:	e009      	b.n	8002cb8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ca4:	f7fd ff9a 	bl	8000bdc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb6:	e004      	b.n	8002cc2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002cb8:	f7ff fe5a 	bl	8002970 <LL_RCC_PLLSAI1_IsReady>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d137      	bne.n	8002d38 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002cf6:	f7ff fe1d 	bl	8002934 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfa:	f7fd ff6f 	bl	8000bdc <HAL_GetTick>
 8002cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d00:	e009      	b.n	8002d16 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d02:	f7fd ff6b 	bl	8000bdc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	73fb      	strb	r3, [r7, #15]
        break;
 8002d14:	e004      	b.n	8002d20 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d16:	f7ff fe2b 	bl	8002970 <LL_RCC_PLLSAI1_IsReady>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d1f0      	bne.n	8002d02 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d34:	4313      	orrs	r3, r2
 8002d36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002d4e:	f7ff fe00 	bl	8002952 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d52:	f7fd ff43 	bl	8000bdc <HAL_GetTick>
 8002d56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d58:	e009      	b.n	8002d6e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d5a:	f7fd ff3f 	bl	8000bdc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d902      	bls.n	8002d6e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	e004      	b.n	8002d78 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d6e:	f7ff fdff 	bl	8002970 <LL_RCC_PLLSAI1_IsReady>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d137      	bne.n	8002dee <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	4313      	orrs	r3, r2
 8002d94:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da8:	4313      	orrs	r3, r2
 8002daa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002dac:	f7ff fdc2 	bl	8002934 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fd ff14 	bl	8000bdc <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fd ff10 	bl	8000bdc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e004      	b.n	8002dd6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002dcc:	f7ff fdd0 	bl	8002970 <LL_RCC_PLLSAI1_IsReady>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d1f0      	bne.n	8002db8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d108      	bne.n	8002dee <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dea:	4313      	orrs	r3, r2
 8002dec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e04:	f7ff fda5 	bl	8002952 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e08:	f7fd fee8 	bl	8000bdc <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e0e:	e009      	b.n	8002e24 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e10:	f7fd fee4 	bl	8000bdc <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	73fb      	strb	r3, [r7, #15]
      break;
 8002e22:	e004      	b.n	8002e2e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e24:	f7ff fda4 	bl	8002970 <LL_RCC_PLLSAI1_IsReady>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d137      	bne.n	8002ea4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e62:	f7ff fd67 	bl	8002934 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e66:	f7fd feb9 	bl	8000bdc <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e6c:	e009      	b.n	8002e82 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6e:	f7fd feb5 	bl	8000bdc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d902      	bls.n	8002e82 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e80:	e004      	b.n	8002e8c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e82:	f7ff fd75 	bl	8002970 <LL_RCC_PLLSAI1_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1f0      	bne.n	8002e6e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <LL_RCC_GetUSARTClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4013      	ands	r3, r2
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_GetLPUARTClockSource>:
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4013      	ands	r3, r2
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e042      	b.n	8002f86 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fca2 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fa51 	bl	80033e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f826 	bl	8002f90 <UART_SetConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01b      	b.n	8002f86 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fad0 	bl	8003524 <UART_CheckIdleState>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b08c      	sub	sp, #48	; 0x30
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4baf      	ldr	r3, [pc, #700]	; (800327c <UART_SetConfig+0x2ec>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4aa4      	ldr	r2, [pc, #656]	; (8003280 <UART_SetConfig+0x2f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003006:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003010:	430b      	orrs	r3, r1
 8003012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	f023 010f 	bic.w	r1, r3, #15
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a95      	ldr	r2, [pc, #596]	; (8003284 <UART_SetConfig+0x2f4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d125      	bne.n	8003080 <UART_SetConfig+0xf0>
 8003034:	2003      	movs	r0, #3
 8003036:	f7ff ff3a 	bl	8002eae <LL_RCC_GetUSARTClockSource>
 800303a:	4603      	mov	r3, r0
 800303c:	2b03      	cmp	r3, #3
 800303e:	d81b      	bhi.n	8003078 <UART_SetConfig+0xe8>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0xb8>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	08003069 	.word	0x08003069
 8003050:	08003061 	.word	0x08003061
 8003054:	08003071 	.word	0x08003071
 8003058:	2301      	movs	r3, #1
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305e:	e042      	b.n	80030e6 <UART_SetConfig+0x156>
 8003060:	2302      	movs	r3, #2
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003066:	e03e      	b.n	80030e6 <UART_SetConfig+0x156>
 8003068:	2304      	movs	r3, #4
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800306e:	e03a      	b.n	80030e6 <UART_SetConfig+0x156>
 8003070:	2308      	movs	r3, #8
 8003072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003076:	e036      	b.n	80030e6 <UART_SetConfig+0x156>
 8003078:	2310      	movs	r3, #16
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800307e:	e032      	b.n	80030e6 <UART_SetConfig+0x156>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7e      	ldr	r2, [pc, #504]	; (8003280 <UART_SetConfig+0x2f0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d12a      	bne.n	80030e0 <UART_SetConfig+0x150>
 800308a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800308e:	f7ff ff1e 	bl	8002ece <LL_RCC_GetLPUARTClockSource>
 8003092:	4603      	mov	r3, r0
 8003094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003098:	d01a      	beq.n	80030d0 <UART_SetConfig+0x140>
 800309a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800309e:	d81b      	bhi.n	80030d8 <UART_SetConfig+0x148>
 80030a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a4:	d00c      	beq.n	80030c0 <UART_SetConfig+0x130>
 80030a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030aa:	d815      	bhi.n	80030d8 <UART_SetConfig+0x148>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <UART_SetConfig+0x128>
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b4:	d008      	beq.n	80030c8 <UART_SetConfig+0x138>
 80030b6:	e00f      	b.n	80030d8 <UART_SetConfig+0x148>
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030be:	e012      	b.n	80030e6 <UART_SetConfig+0x156>
 80030c0:	2302      	movs	r3, #2
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c6:	e00e      	b.n	80030e6 <UART_SetConfig+0x156>
 80030c8:	2304      	movs	r3, #4
 80030ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ce:	e00a      	b.n	80030e6 <UART_SetConfig+0x156>
 80030d0:	2308      	movs	r3, #8
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d6:	e006      	b.n	80030e6 <UART_SetConfig+0x156>
 80030d8:	2310      	movs	r3, #16
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x156>
 80030e0:	2310      	movs	r3, #16
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a65      	ldr	r2, [pc, #404]	; (8003280 <UART_SetConfig+0x2f0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	f040 8097 	bne.w	8003220 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d823      	bhi.n	8003142 <UART_SetConfig+0x1b2>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0x170>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003125 	.word	0x08003125
 8003104:	08003143 	.word	0x08003143
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003143 	.word	0x08003143
 8003110:	08003133 	.word	0x08003133
 8003114:	08003143 	.word	0x08003143
 8003118:	08003143 	.word	0x08003143
 800311c:	08003143 	.word	0x08003143
 8003120:	0800313b 	.word	0x0800313b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7ff f9aa 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800312a:	e010      	b.n	800314e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <UART_SetConfig+0x2f8>)
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003130:	e00d      	b.n	800314e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003132:	f7ff f923 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003138:	e009      	b.n	800314e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003140:	e005      	b.n	800314e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800314c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 812b 	beq.w	80033ac <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	4a4c      	ldr	r2, [pc, #304]	; (800328c <UART_SetConfig+0x2fc>)
 800315c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003160:	461a      	mov	r2, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	fbb3 f3f2 	udiv	r3, r3, r2
 8003168:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	429a      	cmp	r2, r3
 8003178:	d305      	bcc.n	8003186 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	429a      	cmp	r2, r3
 8003184:	d903      	bls.n	800318e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800318c:	e10e      	b.n	80033ac <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2200      	movs	r2, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	60fa      	str	r2, [r7, #12]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <UART_SetConfig+0x2fc>)
 800319c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2200      	movs	r2, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031b0:	f7fc ffe4 	bl	800017c <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	020b      	lsls	r3, r1, #8
 80031c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031ca:	0202      	lsls	r2, r0, #8
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	6849      	ldr	r1, [r1, #4]
 80031d0:	0849      	lsrs	r1, r1, #1
 80031d2:	2000      	movs	r0, #0
 80031d4:	460c      	mov	r4, r1
 80031d6:	4605      	mov	r5, r0
 80031d8:	eb12 0804 	adds.w	r8, r2, r4
 80031dc:	eb43 0905 	adc.w	r9, r3, r5
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	469a      	mov	sl, r3
 80031e8:	4693      	mov	fp, r2
 80031ea:	4652      	mov	r2, sl
 80031ec:	465b      	mov	r3, fp
 80031ee:	4640      	mov	r0, r8
 80031f0:	4649      	mov	r1, r9
 80031f2:	f7fc ffc3 	bl	800017c <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4613      	mov	r3, r2
 80031fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003204:	d308      	bcc.n	8003218 <UART_SetConfig+0x288>
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320c:	d204      	bcs.n	8003218 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	e0c9      	b.n	80033ac <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800321e:	e0c5      	b.n	80033ac <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003228:	d16d      	bne.n	8003306 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800322a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800322e:	3b01      	subs	r3, #1
 8003230:	2b07      	cmp	r3, #7
 8003232:	d82d      	bhi.n	8003290 <UART_SetConfig+0x300>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <UART_SetConfig+0x2ac>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	0800325d 	.word	0x0800325d
 8003240:	08003265 	.word	0x08003265
 8003244:	08003291 	.word	0x08003291
 8003248:	0800326b 	.word	0x0800326b
 800324c:	08003291 	.word	0x08003291
 8003250:	08003291 	.word	0x08003291
 8003254:	08003291 	.word	0x08003291
 8003258:	08003273 	.word	0x08003273
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7ff f924 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003262:	e01b      	b.n	800329c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <UART_SetConfig+0x2f8>)
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003268:	e018      	b.n	800329c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326a:	f7ff f887 	bl	800237c <HAL_RCC_GetSysClockFreq>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003270:	e014      	b.n	800329c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003278:	e010      	b.n	800329c <UART_SetConfig+0x30c>
 800327a:	bf00      	nop
 800327c:	cfff69f3 	.word	0xcfff69f3
 8003280:	40008000 	.word	0x40008000
 8003284:	40013800 	.word	0x40013800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	08003bcc 	.word	0x08003bcc
      default:
        pclk = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800329a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8084 	beq.w	80033ac <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <UART_SetConfig+0x448>)
 80032aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b6:	005a      	lsls	r2, r3, #1
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	441a      	add	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	d916      	bls.n	80032fe <UART_SetConfig+0x36e>
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d212      	bcs.n	80032fe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f023 030f 	bic.w	r3, r3, #15
 80032e0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	8bfb      	ldrh	r3, [r7, #30]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	8bfa      	ldrh	r2, [r7, #30]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e056      	b.n	80033ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003304:	e052      	b.n	80033ac <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800330a:	3b01      	subs	r3, #1
 800330c:	2b07      	cmp	r3, #7
 800330e:	d822      	bhi.n	8003356 <UART_SetConfig+0x3c6>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0x388>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	08003339 	.word	0x08003339
 800331c:	08003341 	.word	0x08003341
 8003320:	08003357 	.word	0x08003357
 8003324:	08003347 	.word	0x08003347
 8003328:	08003357 	.word	0x08003357
 800332c:	08003357 	.word	0x08003357
 8003330:	08003357 	.word	0x08003357
 8003334:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff f8b6 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 800333c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800333e:	e010      	b.n	8003362 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b26      	ldr	r3, [pc, #152]	; (80033dc <UART_SetConfig+0x44c>)
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003344:	e00d      	b.n	8003362 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7ff f819 	bl	800237c <HAL_RCC_GetSysClockFreq>
 800334a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800334c:	e009      	b.n	8003362 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003354:	e005      	b.n	8003362 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003360:	bf00      	nop
    }

    if (pclk != 0U)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d021      	beq.n	80033ac <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <UART_SetConfig+0x448>)
 800336e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003372:	461a      	mov	r2, r3
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	fbb3 f2f2 	udiv	r2, r3, r2
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	441a      	add	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	d909      	bls.n	80033a6 <UART_SetConfig+0x416>
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d205      	bcs.n	80033a6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	b29a      	uxth	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e002      	b.n	80033ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80033c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3730      	adds	r7, #48	; 0x30
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d6:	bf00      	nop
 80033d8:	08003bcc 	.word	0x08003bcc
 80033dc:	00f42400 	.word	0x00f42400

080033e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01a      	beq.n	80034f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034de:	d10a      	bne.n	80034f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b098      	sub	sp, #96	; 0x60
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003534:	f7fd fb52 	bl	8000bdc <HAL_GetTick>
 8003538:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d12f      	bne.n	80035a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f88e 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d022      	beq.n	80035a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003576:	653b      	str	r3, [r7, #80]	; 0x50
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
 8003582:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e6      	bne.n	8003562 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e063      	b.n	8003670 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d149      	bne.n	800364a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	2200      	movs	r2, #0
 80035c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f857 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d03c      	beq.n	800364a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	623b      	str	r3, [r7, #32]
   return(result);
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
 80035f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e6      	bne.n	80035d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3308      	adds	r3, #8
 8003608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	60fb      	str	r3, [r7, #12]
   return(result);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3308      	adds	r3, #8
 8003620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003622:	61fa      	str	r2, [r7, #28]
 8003624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	617b      	str	r3, [r7, #20]
   return(result);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e012      	b.n	8003670 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3758      	adds	r7, #88	; 0x58
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003688:	e049      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d045      	beq.n	800371e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fd faa3 	bl	8000bdc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e048      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d031      	beq.n	800371e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d110      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2208      	movs	r2, #8
 80036ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f838 	bl	8003746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2208      	movs	r2, #8
 80036da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e029      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f8:	d111      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f81e 	bl	8003746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00f      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d0a6      	beq.n	800368a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003746:	b480      	push	{r7}
 8003748:	b095      	sub	sp, #84	; 0x54
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
 800376e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e3      	bne.n	8003780 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d118      	bne.n	80037f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0310 	bic.w	r3, r3, #16
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6979      	ldr	r1, [r7, #20]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	613b      	str	r3, [r7, #16]
   return(result);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e6      	bne.n	80037c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003806:	bf00      	nop
 8003808:	3754      	adds	r7, #84	; 0x54
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_UARTEx_DisableFifoMode+0x16>
 8003824:	2302      	movs	r3, #2
 8003826:	e027      	b.n	8003878 <HAL_UARTEx_DisableFifoMode+0x66>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003856:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003898:	2302      	movs	r3, #2
 800389a:	e02d      	b.n	80038f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f84f 	bl	800397c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003914:	2302      	movs	r3, #2
 8003916:	e02d      	b.n	8003974 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	; 0x24
 8003924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f811 	bl	800397c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800399c:	e031      	b.n	8003a02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800399e:	2308      	movs	r3, #8
 80039a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039a2:	2308      	movs	r3, #8
 80039a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	0e5b      	lsrs	r3, r3, #25
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	0f5b      	lsrs	r3, r3, #29
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039c6:	7bbb      	ldrb	r3, [r7, #14]
 80039c8:	7b3a      	ldrb	r2, [r7, #12]
 80039ca:	4911      	ldr	r1, [pc, #68]	; (8003a10 <UARTEx_SetNbDataToProcess+0x94>)
 80039cc:	5c8a      	ldrb	r2, [r1, r2]
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039d2:	7b3a      	ldrb	r2, [r7, #12]
 80039d4:	490f      	ldr	r1, [pc, #60]	; (8003a14 <UARTEx_SetNbDataToProcess+0x98>)
 80039d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	7b7a      	ldrb	r2, [r7, #13]
 80039e8:	4909      	ldr	r1, [pc, #36]	; (8003a10 <UARTEx_SetNbDataToProcess+0x94>)
 80039ea:	5c8a      	ldrb	r2, [r1, r2]
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039f0:	7b7a      	ldrb	r2, [r7, #13]
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <UARTEx_SetNbDataToProcess+0x98>)
 80039f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	08003be4 	.word	0x08003be4
 8003a14:	08003bec 	.word	0x08003bec

08003a18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a20:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003a24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4013      	ands	r3, r2
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a4e:	b084      	sub	sp, #16
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	f107 0014 	add.w	r0, r7, #20
 8003a5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	b004      	add	sp, #16
 8003a8e:	4770      	bx	lr

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4d0d      	ldr	r5, [pc, #52]	; (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	; (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1b64      	subs	r4, r4, r5
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	42a6      	cmp	r6, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4d0b      	ldr	r5, [pc, #44]	; (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	; (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f000 f818 	bl	8003ae8 <_init>
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2600      	movs	r6, #0
 8003abe:	42a6      	cmp	r6, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac8:	4798      	blx	r3
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad2:	4798      	blx	r3
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08003bfc 	.word	0x08003bfc
 8003adc:	08003bfc 	.word	0x08003bfc
 8003ae0:	08003bfc 	.word	0x08003bfc
 8003ae4:	08003c00 	.word	0x08003c00

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr
