
do_an_2_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002870  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e0  080029e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080029e0  080029e0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e0  080029e0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080029e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000005c  08002a44  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08002a44  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b53  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f9  00000000  00000000  00027c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00029318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058b  00000000  00000000  00029a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017566  00000000  00000000  00029feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095b5  00000000  00000000  00041551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086dfd  00000000  00000000  0004ab06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000215c  00000000  00000000  000d1904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d3a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002964 	.word	0x08002964

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002964 	.word	0x08002964

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	; 0x38
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fa8b 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f857 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f90d 	bl	8000388 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f8a3 	bl	80002b8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8df 	bl	8000334 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000176:	4823      	ldr	r0, [pc, #140]	; (8000204 <main+0xa8>)
 8000178:	f000 fbde 	bl	8000938 <HAL_ADC_Start>
	  HAL_Delay(50);
 800017c:	2032      	movs	r0, #50	; 0x32
 800017e:	f000 fadf 	bl	8000740 <HAL_Delay>
	  var = HAL_ADC_GetValue(&hadc1);
 8000182:	4820      	ldr	r0, [pc, #128]	; (8000204 <main+0xa8>)
 8000184:	f000 fc86 	bl	8000a94 <HAL_ADC_GetValue>
 8000188:	4603      	mov	r3, r0
 800018a:	4a1f      	ldr	r2, [pc, #124]	; (8000208 <main+0xac>)
 800018c:	6013      	str	r3, [r2, #0]
	  sprintf(buffer, "%ld", var);
 800018e:	4b1e      	ldr	r3, [pc, #120]	; (8000208 <main+0xac>)
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	463b      	mov	r3, r7
 8000194:	491d      	ldr	r1, [pc, #116]	; (800020c <main+0xb0>)
 8000196:	4618      	mov	r0, r3
 8000198:	f001 ff32 	bl	8002000 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 10);
 800019c:	463b      	mov	r3, r7
 800019e:	4618      	mov	r0, r3
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	4639      	mov	r1, r7
 80001aa:	230a      	movs	r3, #10
 80001ac:	4818      	ldr	r0, [pc, #96]	; (8000210 <main+0xb4>)
 80001ae:	f001 fda7 	bl	8001d00 <HAL_UART_Transmit>
	  for(int i=0;i< strlen(buffer);i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
 80001b6:	e007      	b.n	80001c8 <main+0x6c>
		  buffer[i] = 0;
 80001b8:	463a      	mov	r2, r7
 80001ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001bc:	4413      	add	r3, r2
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i< strlen(buffer);i++) {
 80001c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001c4:	3301      	adds	r3, #1
 80001c6:	637b      	str	r3, [r7, #52]	; 0x34
 80001c8:	463b      	mov	r3, r7
 80001ca:	4618      	mov	r0, r3
 80001cc:	f7ff ffbe 	bl	800014c <strlen>
 80001d0:	4602      	mov	r2, r0
 80001d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d8ef      	bhi.n	80001b8 <main+0x5c>
	  }
	  if(var < 200)
 80001d8:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <main+0xac>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2bc7      	cmp	r3, #199	; 0xc7
 80001de:	d806      	bhi.n	80001ee <main+0x92>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	480b      	ldr	r0, [pc, #44]	; (8000214 <main+0xb8>)
 80001e8:	f001 f85c 	bl	80012a4 <HAL_GPIO_WritePin>
 80001ec:	e005      	b.n	80001fa <main+0x9e>
	  }
	  else{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	4807      	ldr	r0, [pc, #28]	; (8000214 <main+0xb8>)
 80001f6:	f001 f855 	bl	80012a4 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(2000);
 80001fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001fe:	f000 fa9f 	bl	8000740 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000202:	e7b8      	b.n	8000176 <main+0x1a>
 8000204:	2000007c 	.word	0x2000007c
 8000208:	20000078 	.word	0x20000078
 800020c:	0800297c 	.word	0x0800297c
 8000210:	200000ac 	.word	0x200000ac
 8000214:	40011000 	.word	0x40011000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	; 0x50
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 ff0a 	bl	8002040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000248:	2302      	movs	r3, #2
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025c:	4618      	mov	r0, r3
 800025e:	f001 f839 	bl	80012d4 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000268:	f000 f8ce 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000270:	2300      	movs	r3, #0
 8000272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 faa6 	bl	80017d8 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000292:	f000 f8b9 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000296:	2302      	movs	r3, #2
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fc27 	bl	8001af4 <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002ac:	f000 f8ac 	bl	8000408 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3750      	adds	r7, #80	; 0x50
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_ADC1_Init+0x74>)
 80002ca:	4a19      	ldr	r2, [pc, #100]	; (8000330 <MX_ADC1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_ADC1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_ADC1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_ADC1_Init+0x74>)
 80002e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_ADC1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_ADC1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fa47 	bl	8000788 <HAL_ADC_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000300:	f000 f882 	bl	8000408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000304:	2306      	movs	r3, #6
 8000306:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000308:	2301      	movs	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_ADC1_Init+0x74>)
 8000316:	f000 fbc9 	bl	8000aac <HAL_ADC_ConfigChannel>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000320:	f000 f872 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000007c 	.word	0x2000007c
 8000330:	40012400 	.word	0x40012400

08000334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_USART1_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800036c:	f001 fc78 	bl	8001c60 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f847 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000ac 	.word	0x200000ac
 8000384:	40013800 	.word	0x40013800

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0x78>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a17      	ldr	r2, [pc, #92]	; (8000400 <MX_GPIO_Init+0x78>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_GPIO_Init+0x78>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_GPIO_Init+0x78>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <MX_GPIO_Init+0x78>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_GPIO_Init+0x78>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_GPIO_Init+0x7c>)
 80003d4:	f000 ff66 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 0308 	add.w	r3, r7, #8
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_GPIO_Init+0x7c>)
 80003f2:	f000 fdd3 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	e7fe      	b.n	8000410 <Error_Handler+0x8>
	...

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_MspInit+0x40>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <HAL_MspInit+0x40>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <HAL_MspInit+0x40>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <HAL_MspInit+0x40>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a07      	ldr	r2, [pc, #28]	; (8000454 <HAL_MspInit+0x40>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <HAL_MspInit+0x40>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000

08000458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <HAL_ADC_MspInit+0x6c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d121      	bne.n	80004bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <HAL_ADC_MspInit+0x70>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <HAL_ADC_MspInit+0x70>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <HAL_ADC_MspInit+0x70>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <HAL_ADC_MspInit+0x70>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <HAL_ADC_MspInit+0x70>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_ADC_MspInit+0x70>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <HAL_ADC_MspInit+0x74>)
 80004b8:	f000 fd70 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004bc:	bf00      	nop
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40012400 	.word	0x40012400
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800

080004d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <HAL_UART_MspInit+0x8c>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d131      	bne.n	8000554 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a1a      	ldr	r2, [pc, #104]	; (8000560 <HAL_UART_MspInit+0x90>)
 80004f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <HAL_UART_MspInit+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <HAL_UART_MspInit+0x90>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_UART_MspInit+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000526:	2302      	movs	r3, #2
 8000528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <HAL_UART_MspInit+0x94>)
 8000536:	f000 fd31 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <HAL_UART_MspInit+0x94>)
 8000550:	f000 fd24 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40013800 	.word	0x40013800
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f8ab 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f001 fd32 	bl	8002050 <__errno>
 80005ec:	4603      	mov	r3, r0
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20005000 	.word	0x20005000
 8000618:	00000400 	.word	0x00000400
 800061c:	200000f4 	.word	0x200000f4
 8000620:	20000248 	.word	0x20000248

08000624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000630:	f7ff fff8 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000636:	490c      	ldr	r1, [pc, #48]	; (8000668 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <LoopFillZerobss+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800064c:	4c09      	ldr	r4, [pc, #36]	; (8000674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065a:	f001 fcff 	bl	800205c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fd7d 	bl	800015c <main>
  bx lr
 8000662:	4770      	bx	lr
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800066c:	080029e8 	.word	0x080029e8
  ldr r2, =_sbss
 8000670:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000674:	20000244 	.word	0x20000244

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_Init+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_Init+0x28>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 fc51 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000692:	200f      	movs	r0, #15
 8000694:	f000 f808 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000698:	f7ff febc 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x54>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x58>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fc5b 	bl	8000f82 <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00e      	b.n	80006f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d80a      	bhi.n	80006f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 fc31 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_InitTick+0x5c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x20>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <HAL_IncTick+0x20>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000008 	.word	0x20000008
 8000728:	200000f8 	.word	0x200000f8

0800072c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <HAL_GetTick+0x10>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	200000f8 	.word	0x200000f8

08000740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000748:	f7ff fff0 	bl	800072c <HAL_GetTick>
 800074c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d005      	beq.n	8000766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_Delay+0x44>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000766:	bf00      	nop
 8000768:	f7ff ffe0 	bl	800072c <HAL_GetTick>
 800076c:	4602      	mov	r2, r0
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8f7      	bhi.n	8000768 <HAL_Delay+0x28>
  {
  }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008

08000788 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0be      	b.n	8000928 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d109      	bne.n	80007cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fe46 	bl	8000458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fabf 	bl	8000d50 <ADC_ConversionStop_Disable>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f040 8099 	bne.w	8000916 <HAL_ADC_Init+0x18e>
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f040 8095 	bne.w	8000916 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	f043 0202 	orr.w	r2, r3, #2
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000808:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7b1b      	ldrb	r3, [r3, #12]
 800080e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000810:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	4313      	orrs	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000820:	d003      	beq.n	800082a <HAL_ADC_Init+0xa2>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d102      	bne.n	8000830 <HAL_ADC_Init+0xa8>
 800082a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082e:	e000      	b.n	8000832 <HAL_ADC_Init+0xaa>
 8000830:	2300      	movs	r3, #0
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7d1b      	ldrb	r3, [r3, #20]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d119      	bne.n	8000874 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b1b      	ldrb	r3, [r3, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d109      	bne.n	800085c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	3b01      	subs	r3, #1
 800084e:	035a      	lsls	r2, r3, #13
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4313      	orrs	r3, r2
 8000854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	e00b      	b.n	8000874 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	f043 0220 	orr.w	r2, r3, #32
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086c:	f043 0201 	orr.w	r2, r3, #1
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	430a      	orrs	r2, r1
 8000886:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <HAL_ADC_Init+0x1a8>)
 8000890:	4013      	ands	r3, r2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	430b      	orrs	r3, r1
 800089a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a4:	d003      	beq.n	80008ae <HAL_ADC_Init+0x126>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d104      	bne.n	80008b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	051b      	lsls	r3, r3, #20
 80008b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_ADC_Init+0x1ac>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d10b      	bne.n	80008f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e6:	f023 0303 	bic.w	r3, r3, #3
 80008ea:	f043 0201 	orr.w	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f2:	e018      	b.n	8000926 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f8:	f023 0312 	bic.w	r3, r3, #18
 80008fc:	f043 0210 	orr.w	r2, r3, #16
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f043 0201 	orr.w	r2, r3, #1
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000914:	e007      	b.n	8000926 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	f043 0210 	orr.w	r2, r3, #16
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000926:	7dfb      	ldrb	r3, [r7, #23]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	ffe1f7fd 	.word	0xffe1f7fd
 8000934:	ff1f0efe 	.word	0xff1f0efe

08000938 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800094a:	2b01      	cmp	r3, #1
 800094c:	d101      	bne.n	8000952 <HAL_ADC_Start+0x1a>
 800094e:	2302      	movs	r3, #2
 8000950:	e098      	b.n	8000a84 <HAL_ADC_Start+0x14c>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f99e 	bl	8000c9c <ADC_Enable>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 8087 	bne.w	8000a7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000974:	f023 0301 	bic.w	r3, r3, #1
 8000978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a41      	ldr	r2, [pc, #260]	; (8000a8c <HAL_ADC_Start+0x154>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d105      	bne.n	8000996 <HAL_ADC_Start+0x5e>
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <HAL_ADC_Start+0x158>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d115      	bne.n	80009c2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d026      	beq.n	80009fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009c0:	e01d      	b.n	80009fe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <HAL_ADC_Start+0x158>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d004      	beq.n	80009e2 <HAL_ADC_Start+0xaa>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <HAL_ADC_Start+0x154>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10d      	bne.n	80009fe <HAL_ADC_Start+0xc6>
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <HAL_ADC_Start+0x158>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d006      	beq.n	8000a18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f023 0206 	bic.w	r2, r3, #6
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a16:	e002      	b.n	8000a1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f06f 0202 	mvn.w	r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a3e:	d113      	bne.n	8000a68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_ADC_Start+0x154>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d105      	bne.n	8000a56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_ADC_Start+0x158>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d108      	bne.n	8000a68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	e00c      	b.n	8000a82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	e003      	b.n	8000a82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40012800 	.word	0x40012800
 8000a90:	40012400 	.word	0x40012400

08000a94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d101      	bne.n	8000acc <HAL_ADC_ConfigChannel+0x20>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e0dc      	b.n	8000c86 <HAL_ADC_ConfigChannel+0x1da>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d81c      	bhi.n	8000b16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	3b05      	subs	r3, #5
 8000aee:	221f      	movs	r2, #31
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	4019      	ands	r1, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	3b05      	subs	r3, #5
 8000b08:	fa00 f203 	lsl.w	r2, r0, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	430a      	orrs	r2, r1
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
 8000b14:	e03c      	b.n	8000b90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b0c      	cmp	r3, #12
 8000b1c:	d81c      	bhi.n	8000b58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b23      	subs	r3, #35	; 0x23
 8000b30:	221f      	movs	r2, #31
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4019      	ands	r1, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	3b23      	subs	r3, #35	; 0x23
 8000b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
 8000b56:	e01b      	b.n	8000b90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	3b41      	subs	r3, #65	; 0x41
 8000b6a:	221f      	movs	r2, #31
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4019      	ands	r1, r3
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	3b41      	subs	r3, #65	; 0x41
 8000b84:	fa00 f203 	lsl.w	r2, r0, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b09      	cmp	r3, #9
 8000b96:	d91c      	bls.n	8000bd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68d9      	ldr	r1, [r3, #12]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3b1e      	subs	r3, #30
 8000baa:	2207      	movs	r2, #7
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4019      	ands	r1, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	6898      	ldr	r0, [r3, #8]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	3b1e      	subs	r3, #30
 8000bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	e019      	b.n	8000c06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6919      	ldr	r1, [r3, #16]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	2207      	movs	r2, #7
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4019      	ands	r1, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6898      	ldr	r0, [r3, #8]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	d003      	beq.n	8000c16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c12:	2b11      	cmp	r3, #17
 8000c14:	d132      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d125      	bne.n	8000c6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d126      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b10      	cmp	r3, #16
 8000c44:	d11a      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	0c9a      	lsrs	r2, r3, #18
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c5c:	e002      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f9      	bne.n	8000c5e <HAL_ADC_ConfigChannel+0x1b2>
 8000c6a:	e007      	b.n	8000c7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f043 0220 	orr.w	r2, r3, #32
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40012400 	.word	0x40012400
 8000c94:	20000000 	.word	0x20000000
 8000c98:	431bde83 	.word	0x431bde83

08000c9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d040      	beq.n	8000d3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0201 	orr.w	r2, r2, #1
 8000cc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <ADC_Enable+0xac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <ADC_Enable+0xb0>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	0c9b      	lsrs	r3, r3, #18
 8000cd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000cd8:	e002      	b.n	8000ce0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f9      	bne.n	8000cda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ce6:	f7ff fd21 	bl	800072c <HAL_GetTick>
 8000cea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cec:	e01f      	b.n	8000d2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cee:	f7ff fd1d 	bl	800072c <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d918      	bls.n	8000d2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d011      	beq.n	8000d2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	f043 0210 	orr.w	r2, r3, #16
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e007      	b.n	8000d3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1d8      	bne.n	8000cee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	431bde83 	.word	0x431bde83

08000d50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d12e      	bne.n	8000dc8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0201 	bic.w	r2, r2, #1
 8000d78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fcd7 	bl	800072c <HAL_GetTick>
 8000d7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d80:	e01b      	b.n	8000dba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d82:	f7ff fcd3 	bl	800072c <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d914      	bls.n	8000dba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d10d      	bne.n	8000dba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f043 0210 	orr.w	r2, r3, #16
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f043 0201 	orr.w	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e007      	b.n	8000dca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d0dc      	beq.n	8000d82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff90 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff49 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff5e 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff90 	bl	8000e8c <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5f 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffb0 	bl	8000ef0 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b08b      	sub	sp, #44	; 0x2c
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e169      	b.n	8001284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8158 	bne.w	800127e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a9a      	ldr	r2, [pc, #616]	; (800123c <HAL_GPIO_Init+0x2a0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d05e      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a98      	ldr	r2, [pc, #608]	; (800123c <HAL_GPIO_Init+0x2a0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d875      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000fde:	4a98      	ldr	r2, [pc, #608]	; (8001240 <HAL_GPIO_Init+0x2a4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d058      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a96      	ldr	r2, [pc, #600]	; (8001240 <HAL_GPIO_Init+0x2a4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d86f      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000fea:	4a96      	ldr	r2, [pc, #600]	; (8001244 <HAL_GPIO_Init+0x2a8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d052      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000ff0:	4a94      	ldr	r2, [pc, #592]	; (8001244 <HAL_GPIO_Init+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d869      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000ff6:	4a94      	ldr	r2, [pc, #592]	; (8001248 <HAL_GPIO_Init+0x2ac>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d04c      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000ffc:	4a92      	ldr	r2, [pc, #584]	; (8001248 <HAL_GPIO_Init+0x2ac>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d863      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8001002:	4a92      	ldr	r2, [pc, #584]	; (800124c <HAL_GPIO_Init+0x2b0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d046      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8001008:	4a90      	ldr	r2, [pc, #576]	; (800124c <HAL_GPIO_Init+0x2b0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d85d      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 800100e:	2b12      	cmp	r3, #18
 8001010:	d82a      	bhi.n	8001068 <HAL_GPIO_Init+0xcc>
 8001012:	2b12      	cmp	r3, #18
 8001014:	d859      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <HAL_GPIO_Init+0x80>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001097 	.word	0x08001097
 8001020:	08001071 	.word	0x08001071
 8001024:	08001083 	.word	0x08001083
 8001028:	080010c5 	.word	0x080010c5
 800102c:	080010cb 	.word	0x080010cb
 8001030:	080010cb 	.word	0x080010cb
 8001034:	080010cb 	.word	0x080010cb
 8001038:	080010cb 	.word	0x080010cb
 800103c:	080010cb 	.word	0x080010cb
 8001040:	080010cb 	.word	0x080010cb
 8001044:	080010cb 	.word	0x080010cb
 8001048:	080010cb 	.word	0x080010cb
 800104c:	080010cb 	.word	0x080010cb
 8001050:	080010cb 	.word	0x080010cb
 8001054:	080010cb 	.word	0x080010cb
 8001058:	080010cb 	.word	0x080010cb
 800105c:	080010cb 	.word	0x080010cb
 8001060:	08001079 	.word	0x08001079
 8001064:	0800108d 	.word	0x0800108d
 8001068:	4a79      	ldr	r2, [pc, #484]	; (8001250 <HAL_GPIO_Init+0x2b4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106e:	e02c      	b.n	80010ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e029      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	3304      	adds	r3, #4
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e024      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e01f      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	330c      	adds	r3, #12
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e01a      	b.n	80010cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109e:	2304      	movs	r3, #4
 80010a0:	623b      	str	r3, [r7, #32]
          break;
 80010a2:	e013      	b.n	80010cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	611a      	str	r2, [r3, #16]
          break;
 80010b6:	e009      	b.n	80010cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b8:	2308      	movs	r3, #8
 80010ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	615a      	str	r2, [r3, #20]
          break;
 80010c2:	e003      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x130>
          break;
 80010ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	; 0xff
 80010d0:	d801      	bhi.n	80010d6 <HAL_GPIO_Init+0x13a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	e001      	b.n	80010da <HAL_GPIO_Init+0x13e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2bff      	cmp	r3, #255	; 0xff
 80010e0:	d802      	bhi.n	80010e8 <HAL_GPIO_Init+0x14c>
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	e002      	b.n	80010ee <HAL_GPIO_Init+0x152>
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	3b08      	subs	r3, #8
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	210f      	movs	r1, #15
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	6a39      	ldr	r1, [r7, #32]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	431a      	orrs	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80b1 	beq.w	800127e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x2b8>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_GPIO_Init+0x2b8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_GPIO_Init+0x2bc>)
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a40      	ldr	r2, [pc, #256]	; (800125c <HAL_GPIO_Init+0x2c0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d013      	beq.n	8001188 <HAL_GPIO_Init+0x1ec>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3f      	ldr	r2, [pc, #252]	; (8001260 <HAL_GPIO_Init+0x2c4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d00d      	beq.n	8001184 <HAL_GPIO_Init+0x1e8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3e      	ldr	r2, [pc, #248]	; (8001264 <HAL_GPIO_Init+0x2c8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d007      	beq.n	8001180 <HAL_GPIO_Init+0x1e4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <HAL_GPIO_Init+0x2cc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d101      	bne.n	800117c <HAL_GPIO_Init+0x1e0>
 8001178:	2303      	movs	r3, #3
 800117a:	e006      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 800117c:	2304      	movs	r3, #4
 800117e:	e004      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001180:	2302      	movs	r3, #2
 8001182:	e002      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001188:	2300      	movs	r3, #0
 800118a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800118c:	f002 0203 	and.w	r2, r2, #3
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	4093      	lsls	r3, r2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119a:	492f      	ldr	r1, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x2bc>)
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	492c      	ldr	r1, [pc, #176]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4928      	ldr	r1, [pc, #160]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	4922      	ldr	r1, [pc, #136]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	491e      	ldr	r1, [pc, #120]	; (800126c <HAL_GPIO_Init+0x2d0>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_GPIO_Init+0x2d0>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4918      	ldr	r1, [pc, #96]	; (800126c <HAL_GPIO_Init+0x2d0>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_GPIO_Init+0x2d0>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	43db      	mvns	r3, r3
 800121a:	4914      	ldr	r1, [pc, #80]	; (800126c <HAL_GPIO_Init+0x2d0>)
 800121c:	4013      	ands	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d021      	beq.n	8001270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_GPIO_Init+0x2d0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	490e      	ldr	r1, [pc, #56]	; (800126c <HAL_GPIO_Init+0x2d0>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e021      	b.n	800127e <HAL_GPIO_Init+0x2e2>
 800123a:	bf00      	nop
 800123c:	10320000 	.word	0x10320000
 8001240:	10310000 	.word	0x10310000
 8001244:	10220000 	.word	0x10220000
 8001248:	10210000 	.word	0x10210000
 800124c:	10120000 	.word	0x10120000
 8001250:	10110000 	.word	0x10110000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_GPIO_Init+0x304>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	43db      	mvns	r3, r3
 8001278:	4909      	ldr	r1, [pc, #36]	; (80012a0 <HAL_GPIO_Init+0x304>)
 800127a:	4013      	ands	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	f47f ae8e 	bne.w	8000fb0 <HAL_GPIO_Init+0x14>
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	372c      	adds	r7, #44	; 0x2c
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e272      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8087 	beq.w	8001402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f4:	4b92      	ldr	r3, [pc, #584]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d00c      	beq.n	800131a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001300:	4b8f      	ldr	r3, [pc, #572]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d112      	bne.n	8001332 <HAL_RCC_OscConfig+0x5e>
 800130c:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d10b      	bne.n	8001332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131a:	4b89      	ldr	r3, [pc, #548]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d06c      	beq.n	8001400 <HAL_RCC_OscConfig+0x12c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d168      	bne.n	8001400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e24c      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x76>
 800133c:	4b80      	ldr	r3, [pc, #512]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a7f      	ldr	r2, [pc, #508]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e02e      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x98>
 8001352:	4b7b      	ldr	r3, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b78      	ldr	r3, [pc, #480]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a77      	ldr	r2, [pc, #476]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0xbc>
 8001376:	4b72      	ldr	r3, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a71      	ldr	r2, [pc, #452]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6f      	ldr	r3, [pc, #444]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6e      	ldr	r2, [pc, #440]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 8001390:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a67      	ldr	r2, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff f9bc 	bl	800072c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff f9b8 	bl	800072c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e200      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xe4>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff f9a8 	bl	800072c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff f9a4 	bl	800072c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1ec      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x10c>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800141a:	4b49      	ldr	r3, [pc, #292]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x18c>
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x176>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1c0      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4939      	ldr	r1, [pc, #228]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff f95d 	bl	800072c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff f959 	bl	800072c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1a1      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f93c 	bl	800072c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff f938 	bl	800072c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e180      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03a      	beq.n	8001558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f91c 	bl	800072c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff f918 	bl	800072c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e160      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f000 face 	bl	8001ab8 <RCC_Delay>
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff f902 	bl	800072c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152a:	e00f      	b.n	800154c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff f8fe 	bl	800072c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d908      	bls.n	800154c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e146      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	42420000 	.word	0x42420000
 8001548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e9      	bne.n	800152c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a6 	beq.w	80016b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10d      	bne.n	8001592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a87      	ldr	r2, [pc, #540]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b85      	ldr	r3, [pc, #532]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b82      	ldr	r3, [pc, #520]	; (800179c <HAL_RCC_OscConfig+0x4c8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7e      	ldr	r2, [pc, #504]	; (800179c <HAL_RCC_OscConfig+0x4c8>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015aa:	f7ff f8bf 	bl	800072c <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff f8bb 	bl	800072c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e103      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b75      	ldr	r3, [pc, #468]	; (800179c <HAL_RCC_OscConfig+0x4c8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x312>
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	e02d      	b.n	8001642 <HAL_RCC_OscConfig+0x36e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x334>
 80015ee:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a69      	ldr	r2, [pc, #420]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a66      	ldr	r2, [pc, #408]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e01c      	b.n	8001642 <HAL_RCC_OscConfig+0x36e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x356>
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a60      	ldr	r2, [pc, #384]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a5d      	ldr	r2, [pc, #372]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e00b      	b.n	8001642 <HAL_RCC_OscConfig+0x36e>
 800162a:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a5a      	ldr	r2, [pc, #360]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d015      	beq.n	8001676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f86f 	bl	800072c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff f86b 	bl	800072c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0b1      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ee      	beq.n	8001652 <HAL_RCC_OscConfig+0x37e>
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff f859 	bl	800072c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff f855 	bl	800072c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e09b      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ee      	bne.n	800167e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d105      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8087 	beq.w	80017ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d061      	beq.n	800178c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d146      	bne.n	800175e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff f829 	bl	800072c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff f825 	bl	800072c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e06d      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d108      	bne.n	8001718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4921      	ldr	r1, [pc, #132]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a19      	ldr	r1, [r3, #32]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	430b      	orrs	r3, r1
 800172a:	491b      	ldr	r1, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7fe fff9 	bl	800072c <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7fe fff5 	bl	800072c <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e03d      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x46a>
 800175c:	e035      	b.n	80017ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe ffe2 	bl	800072c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7fe ffde 	bl	800072c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e026      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x498>
 800178a:	e01e      	b.n	80017ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e019      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
 8001798:	40021000 	.word	0x40021000
 800179c:	40007000 	.word	0x40007000
 80017a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x500>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0d0      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d910      	bls.n	800181c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b67      	ldr	r3, [pc, #412]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 0207 	bic.w	r2, r3, #7
 8001802:	4965      	ldr	r1, [pc, #404]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b8      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001834:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800183e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	494d      	ldr	r1, [pc, #308]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d040      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e07f      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b41      	ldr	r3, [pc, #260]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e073      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06b      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b39      	ldr	r3, [pc, #228]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4936      	ldr	r1, [pc, #216]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7fe ff30 	bl	800072c <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7fe ff2c 	bl	800072c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e053      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d210      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0207 	bic.w	r2, r3, #7
 800190e:	4922      	ldr	r1, [pc, #136]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e032      	b.n	800198e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4916      	ldr	r1, [pc, #88]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001966:	f000 f821 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	490a      	ldr	r1, [pc, #40]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fe8e 	bl	80006a8 <HAL_InitTick>

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000
 800199c:	40021000 	.word	0x40021000
 80019a0:	08002980 	.word	0x08002980
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x30>
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x36>
 80019da:	e027      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80019de:	613b      	str	r3, [r7, #16]
      break;
 80019e0:	e027      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	0c5b      	lsrs	r3, r3, #17
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e004      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	613b      	str	r3, [r7, #16]
      break;
 8001a2a:	e002      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2e:	613b      	str	r3, [r7, #16]
      break;
 8001a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a32:	693b      	ldr	r3, [r7, #16]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	007a1200 	.word	0x007a1200
 8001a48:	08002998 	.word	0x08002998
 8001a4c:	080029a8 	.word	0x080029a8
 8001a50:	003d0900 	.word	0x003d0900

08001a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	f7ff fff2 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08002990 	.word	0x08002990

08001a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	0adb      	lsrs	r3, r3, #11
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08002990 	.word	0x08002990

08001ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <RCC_Delay+0x34>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <RCC_Delay+0x38>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad4:	bf00      	nop
  }
  while (Delay --);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	60fa      	str	r2, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f9      	bne.n	8001ad4 <RCC_Delay+0x1c>
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000000 	.word	0x20000000
 8001af0:	10624dd3 	.word	0x10624dd3

08001af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d07d      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	61d3      	str	r3, [r2, #28]
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d118      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b54:	f7fe fdea 	bl	800072c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	e008      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7fe fde6 	bl	800072c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e06d      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d02e      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d027      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b98:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bae:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fdb5 	bl	800072c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7fe fdb1 	bl	800072c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e036      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ee      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4917      	ldr	r1, [pc, #92]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	490b      	ldr	r1, [pc, #44]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4904      	ldr	r1, [pc, #16]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42420440 	.word	0x42420440

08001c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e042      	b.n	8001cf8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fc22 	bl	80004d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f91d 	bl	8001ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d16d      	bne.n	8001dfc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <HAL_UART_Transmit+0x2c>
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e066      	b.n	8001dfe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2221      	movs	r2, #33	; 0x21
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d3e:	f7fe fcf5 	bl	800072c <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d58:	d108      	bne.n	8001d6c <HAL_UART_Transmit+0x6c>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d104      	bne.n	8001d6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	e003      	b.n	8001d74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d74:	e02a      	b.n	8001dcc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f840 	bl	8001e06 <UART_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e036      	b.n	8001dfe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3302      	adds	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e007      	b.n	8001dbe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1cf      	bne.n	8001d76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f810 	bl	8001e06 <UART_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e006      	b.n	8001dfe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b090      	sub	sp, #64	; 0x40
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e16:	e050      	b.n	8001eba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d04c      	beq.n	8001eba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e26:	f7fe fc81 	bl	800072c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d241      	bcs.n	8001eba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	e853 3f00 	ldrex	r3, [r3]
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	330c      	adds	r3, #12
 8001e54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e56:	637a      	str	r2, [r7, #52]	; 0x34
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e5e:	e841 2300 	strex	r3, r2, [r1]
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e5      	bne.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3314      	adds	r3, #20
 8001e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	e853 3f00 	ldrex	r3, [r3]
 8001e78:	613b      	str	r3, [r7, #16]
   return(result);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3314      	adds	r3, #20
 8001e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e8a:	623a      	str	r2, [r7, #32]
 8001e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8e:	69f9      	ldr	r1, [r7, #28]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	e841 2300 	strex	r3, r2, [r1]
 8001e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e5      	bne.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e00f      	b.n	8001eda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d09f      	beq.n	8001e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3740      	adds	r7, #64	; 0x40
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f1e:	f023 030c 	bic.w	r3, r3, #12
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <UART_SetConfig+0x114>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d103      	bne.n	8001f54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f4c:	f7ff fda0 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	e002      	b.n	8001f5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f54:	f7ff fd88 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8001f58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <UART_SetConfig+0x118>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	0119      	lsls	r1, r3, #4
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009a      	lsls	r2, r3, #2
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <UART_SetConfig+0x118>)
 8001f92:	fba3 0302 	umull	r0, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2064      	movs	r0, #100	; 0x64
 8001f9a:	fb00 f303 	mul.w	r3, r0, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	3332      	adds	r3, #50	; 0x32
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <UART_SetConfig+0x118>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	4419      	add	r1, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	009a      	lsls	r2, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <UART_SetConfig+0x118>)
 8001fca:	fba3 0302 	umull	r0, r3, r3, r2
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2064      	movs	r0, #100	; 0x64
 8001fd2:	fb00 f303 	mul.w	r3, r0, r3
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	3332      	adds	r3, #50	; 0x32
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <UART_SetConfig+0x118>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	440a      	add	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	51eb851f 	.word	0x51eb851f

08002000 <siprintf>:
 8002000:	b40e      	push	{r1, r2, r3}
 8002002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002006:	b500      	push	{lr}
 8002008:	b09c      	sub	sp, #112	; 0x70
 800200a:	ab1d      	add	r3, sp, #116	; 0x74
 800200c:	9002      	str	r0, [sp, #8]
 800200e:	9006      	str	r0, [sp, #24]
 8002010:	9107      	str	r1, [sp, #28]
 8002012:	9104      	str	r1, [sp, #16]
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <siprintf+0x38>)
 8002016:	4909      	ldr	r1, [pc, #36]	; (800203c <siprintf+0x3c>)
 8002018:	f853 2b04 	ldr.w	r2, [r3], #4
 800201c:	9105      	str	r1, [sp, #20]
 800201e:	6800      	ldr	r0, [r0, #0]
 8002020:	a902      	add	r1, sp, #8
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	f000 f98e 	bl	8002344 <_svfiprintf_r>
 8002028:	2200      	movs	r2, #0
 800202a:	9b02      	ldr	r3, [sp, #8]
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	b01c      	add	sp, #112	; 0x70
 8002030:	f85d eb04 	ldr.w	lr, [sp], #4
 8002034:	b003      	add	sp, #12
 8002036:	4770      	bx	lr
 8002038:	20000058 	.word	0x20000058
 800203c:	ffff0208 	.word	0xffff0208

08002040 <memset>:
 8002040:	4603      	mov	r3, r0
 8002042:	4402      	add	r2, r0
 8002044:	4293      	cmp	r3, r2
 8002046:	d100      	bne.n	800204a <memset+0xa>
 8002048:	4770      	bx	lr
 800204a:	f803 1b01 	strb.w	r1, [r3], #1
 800204e:	e7f9      	b.n	8002044 <memset+0x4>

08002050 <__errno>:
 8002050:	4b01      	ldr	r3, [pc, #4]	; (8002058 <__errno+0x8>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000058 	.word	0x20000058

0800205c <__libc_init_array>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	2600      	movs	r6, #0
 8002060:	4d0c      	ldr	r5, [pc, #48]	; (8002094 <__libc_init_array+0x38>)
 8002062:	4c0d      	ldr	r4, [pc, #52]	; (8002098 <__libc_init_array+0x3c>)
 8002064:	1b64      	subs	r4, r4, r5
 8002066:	10a4      	asrs	r4, r4, #2
 8002068:	42a6      	cmp	r6, r4
 800206a:	d109      	bne.n	8002080 <__libc_init_array+0x24>
 800206c:	f000 fc7a 	bl	8002964 <_init>
 8002070:	2600      	movs	r6, #0
 8002072:	4d0a      	ldr	r5, [pc, #40]	; (800209c <__libc_init_array+0x40>)
 8002074:	4c0a      	ldr	r4, [pc, #40]	; (80020a0 <__libc_init_array+0x44>)
 8002076:	1b64      	subs	r4, r4, r5
 8002078:	10a4      	asrs	r4, r4, #2
 800207a:	42a6      	cmp	r6, r4
 800207c:	d105      	bne.n	800208a <__libc_init_array+0x2e>
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	f855 3b04 	ldr.w	r3, [r5], #4
 8002084:	4798      	blx	r3
 8002086:	3601      	adds	r6, #1
 8002088:	e7ee      	b.n	8002068 <__libc_init_array+0xc>
 800208a:	f855 3b04 	ldr.w	r3, [r5], #4
 800208e:	4798      	blx	r3
 8002090:	3601      	adds	r6, #1
 8002092:	e7f2      	b.n	800207a <__libc_init_array+0x1e>
 8002094:	080029e0 	.word	0x080029e0
 8002098:	080029e0 	.word	0x080029e0
 800209c:	080029e0 	.word	0x080029e0
 80020a0:	080029e4 	.word	0x080029e4

080020a4 <__retarget_lock_acquire_recursive>:
 80020a4:	4770      	bx	lr

080020a6 <__retarget_lock_release_recursive>:
 80020a6:	4770      	bx	lr

080020a8 <_free_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	4605      	mov	r5, r0
 80020ac:	2900      	cmp	r1, #0
 80020ae:	d040      	beq.n	8002132 <_free_r+0x8a>
 80020b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020b4:	1f0c      	subs	r4, r1, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bfb8      	it	lt
 80020ba:	18e4      	addlt	r4, r4, r3
 80020bc:	f000 f8dc 	bl	8002278 <__malloc_lock>
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <_free_r+0x8c>)
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	b933      	cbnz	r3, 80020d4 <_free_r+0x2c>
 80020c6:	6063      	str	r3, [r4, #4]
 80020c8:	6014      	str	r4, [r2, #0]
 80020ca:	4628      	mov	r0, r5
 80020cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020d0:	f000 b8d8 	b.w	8002284 <__malloc_unlock>
 80020d4:	42a3      	cmp	r3, r4
 80020d6:	d908      	bls.n	80020ea <_free_r+0x42>
 80020d8:	6820      	ldr	r0, [r4, #0]
 80020da:	1821      	adds	r1, r4, r0
 80020dc:	428b      	cmp	r3, r1
 80020de:	bf01      	itttt	eq
 80020e0:	6819      	ldreq	r1, [r3, #0]
 80020e2:	685b      	ldreq	r3, [r3, #4]
 80020e4:	1809      	addeq	r1, r1, r0
 80020e6:	6021      	streq	r1, [r4, #0]
 80020e8:	e7ed      	b.n	80020c6 <_free_r+0x1e>
 80020ea:	461a      	mov	r2, r3
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	b10b      	cbz	r3, 80020f4 <_free_r+0x4c>
 80020f0:	42a3      	cmp	r3, r4
 80020f2:	d9fa      	bls.n	80020ea <_free_r+0x42>
 80020f4:	6811      	ldr	r1, [r2, #0]
 80020f6:	1850      	adds	r0, r2, r1
 80020f8:	42a0      	cmp	r0, r4
 80020fa:	d10b      	bne.n	8002114 <_free_r+0x6c>
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	4401      	add	r1, r0
 8002100:	1850      	adds	r0, r2, r1
 8002102:	4283      	cmp	r3, r0
 8002104:	6011      	str	r1, [r2, #0]
 8002106:	d1e0      	bne.n	80020ca <_free_r+0x22>
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4408      	add	r0, r1
 800210e:	6010      	str	r0, [r2, #0]
 8002110:	6053      	str	r3, [r2, #4]
 8002112:	e7da      	b.n	80020ca <_free_r+0x22>
 8002114:	d902      	bls.n	800211c <_free_r+0x74>
 8002116:	230c      	movs	r3, #12
 8002118:	602b      	str	r3, [r5, #0]
 800211a:	e7d6      	b.n	80020ca <_free_r+0x22>
 800211c:	6820      	ldr	r0, [r4, #0]
 800211e:	1821      	adds	r1, r4, r0
 8002120:	428b      	cmp	r3, r1
 8002122:	bf01      	itttt	eq
 8002124:	6819      	ldreq	r1, [r3, #0]
 8002126:	685b      	ldreq	r3, [r3, #4]
 8002128:	1809      	addeq	r1, r1, r0
 800212a:	6021      	streq	r1, [r4, #0]
 800212c:	6063      	str	r3, [r4, #4]
 800212e:	6054      	str	r4, [r2, #4]
 8002130:	e7cb      	b.n	80020ca <_free_r+0x22>
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	2000023c 	.word	0x2000023c

08002138 <sbrk_aligned>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4e0e      	ldr	r6, [pc, #56]	; (8002174 <sbrk_aligned+0x3c>)
 800213c:	460c      	mov	r4, r1
 800213e:	6831      	ldr	r1, [r6, #0]
 8002140:	4605      	mov	r5, r0
 8002142:	b911      	cbnz	r1, 800214a <sbrk_aligned+0x12>
 8002144:	f000 fbaa 	bl	800289c <_sbrk_r>
 8002148:	6030      	str	r0, [r6, #0]
 800214a:	4621      	mov	r1, r4
 800214c:	4628      	mov	r0, r5
 800214e:	f000 fba5 	bl	800289c <_sbrk_r>
 8002152:	1c43      	adds	r3, r0, #1
 8002154:	d00a      	beq.n	800216c <sbrk_aligned+0x34>
 8002156:	1cc4      	adds	r4, r0, #3
 8002158:	f024 0403 	bic.w	r4, r4, #3
 800215c:	42a0      	cmp	r0, r4
 800215e:	d007      	beq.n	8002170 <sbrk_aligned+0x38>
 8002160:	1a21      	subs	r1, r4, r0
 8002162:	4628      	mov	r0, r5
 8002164:	f000 fb9a 	bl	800289c <_sbrk_r>
 8002168:	3001      	adds	r0, #1
 800216a:	d101      	bne.n	8002170 <sbrk_aligned+0x38>
 800216c:	f04f 34ff 	mov.w	r4, #4294967295
 8002170:	4620      	mov	r0, r4
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	20000240 	.word	0x20000240

08002178 <_malloc_r>:
 8002178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800217c:	1ccd      	adds	r5, r1, #3
 800217e:	f025 0503 	bic.w	r5, r5, #3
 8002182:	3508      	adds	r5, #8
 8002184:	2d0c      	cmp	r5, #12
 8002186:	bf38      	it	cc
 8002188:	250c      	movcc	r5, #12
 800218a:	2d00      	cmp	r5, #0
 800218c:	4607      	mov	r7, r0
 800218e:	db01      	blt.n	8002194 <_malloc_r+0x1c>
 8002190:	42a9      	cmp	r1, r5
 8002192:	d905      	bls.n	80021a0 <_malloc_r+0x28>
 8002194:	230c      	movs	r3, #12
 8002196:	2600      	movs	r6, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4630      	mov	r0, r6
 800219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002274 <_malloc_r+0xfc>
 80021a4:	f000 f868 	bl	8002278 <__malloc_lock>
 80021a8:	f8d8 3000 	ldr.w	r3, [r8]
 80021ac:	461c      	mov	r4, r3
 80021ae:	bb5c      	cbnz	r4, 8002208 <_malloc_r+0x90>
 80021b0:	4629      	mov	r1, r5
 80021b2:	4638      	mov	r0, r7
 80021b4:	f7ff ffc0 	bl	8002138 <sbrk_aligned>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	4604      	mov	r4, r0
 80021bc:	d155      	bne.n	800226a <_malloc_r+0xf2>
 80021be:	f8d8 4000 	ldr.w	r4, [r8]
 80021c2:	4626      	mov	r6, r4
 80021c4:	2e00      	cmp	r6, #0
 80021c6:	d145      	bne.n	8002254 <_malloc_r+0xdc>
 80021c8:	2c00      	cmp	r4, #0
 80021ca:	d048      	beq.n	800225e <_malloc_r+0xe6>
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	4631      	mov	r1, r6
 80021d0:	4638      	mov	r0, r7
 80021d2:	eb04 0903 	add.w	r9, r4, r3
 80021d6:	f000 fb61 	bl	800289c <_sbrk_r>
 80021da:	4581      	cmp	r9, r0
 80021dc:	d13f      	bne.n	800225e <_malloc_r+0xe6>
 80021de:	6821      	ldr	r1, [r4, #0]
 80021e0:	4638      	mov	r0, r7
 80021e2:	1a6d      	subs	r5, r5, r1
 80021e4:	4629      	mov	r1, r5
 80021e6:	f7ff ffa7 	bl	8002138 <sbrk_aligned>
 80021ea:	3001      	adds	r0, #1
 80021ec:	d037      	beq.n	800225e <_malloc_r+0xe6>
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	442b      	add	r3, r5
 80021f2:	6023      	str	r3, [r4, #0]
 80021f4:	f8d8 3000 	ldr.w	r3, [r8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d038      	beq.n	800226e <_malloc_r+0xf6>
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	42a2      	cmp	r2, r4
 8002200:	d12b      	bne.n	800225a <_malloc_r+0xe2>
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	e00f      	b.n	8002228 <_malloc_r+0xb0>
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	1b52      	subs	r2, r2, r5
 800220c:	d41f      	bmi.n	800224e <_malloc_r+0xd6>
 800220e:	2a0b      	cmp	r2, #11
 8002210:	d917      	bls.n	8002242 <_malloc_r+0xca>
 8002212:	1961      	adds	r1, r4, r5
 8002214:	42a3      	cmp	r3, r4
 8002216:	6025      	str	r5, [r4, #0]
 8002218:	bf18      	it	ne
 800221a:	6059      	strne	r1, [r3, #4]
 800221c:	6863      	ldr	r3, [r4, #4]
 800221e:	bf08      	it	eq
 8002220:	f8c8 1000 	streq.w	r1, [r8]
 8002224:	5162      	str	r2, [r4, r5]
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	4638      	mov	r0, r7
 800222a:	f104 060b 	add.w	r6, r4, #11
 800222e:	f000 f829 	bl	8002284 <__malloc_unlock>
 8002232:	f026 0607 	bic.w	r6, r6, #7
 8002236:	1d23      	adds	r3, r4, #4
 8002238:	1af2      	subs	r2, r6, r3
 800223a:	d0ae      	beq.n	800219a <_malloc_r+0x22>
 800223c:	1b9b      	subs	r3, r3, r6
 800223e:	50a3      	str	r3, [r4, r2]
 8002240:	e7ab      	b.n	800219a <_malloc_r+0x22>
 8002242:	42a3      	cmp	r3, r4
 8002244:	6862      	ldr	r2, [r4, #4]
 8002246:	d1dd      	bne.n	8002204 <_malloc_r+0x8c>
 8002248:	f8c8 2000 	str.w	r2, [r8]
 800224c:	e7ec      	b.n	8002228 <_malloc_r+0xb0>
 800224e:	4623      	mov	r3, r4
 8002250:	6864      	ldr	r4, [r4, #4]
 8002252:	e7ac      	b.n	80021ae <_malloc_r+0x36>
 8002254:	4634      	mov	r4, r6
 8002256:	6876      	ldr	r6, [r6, #4]
 8002258:	e7b4      	b.n	80021c4 <_malloc_r+0x4c>
 800225a:	4613      	mov	r3, r2
 800225c:	e7cc      	b.n	80021f8 <_malloc_r+0x80>
 800225e:	230c      	movs	r3, #12
 8002260:	4638      	mov	r0, r7
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	f000 f80e 	bl	8002284 <__malloc_unlock>
 8002268:	e797      	b.n	800219a <_malloc_r+0x22>
 800226a:	6025      	str	r5, [r4, #0]
 800226c:	e7dc      	b.n	8002228 <_malloc_r+0xb0>
 800226e:	605b      	str	r3, [r3, #4]
 8002270:	deff      	udf	#255	; 0xff
 8002272:	bf00      	nop
 8002274:	2000023c 	.word	0x2000023c

08002278 <__malloc_lock>:
 8002278:	4801      	ldr	r0, [pc, #4]	; (8002280 <__malloc_lock+0x8>)
 800227a:	f7ff bf13 	b.w	80020a4 <__retarget_lock_acquire_recursive>
 800227e:	bf00      	nop
 8002280:	20000238 	.word	0x20000238

08002284 <__malloc_unlock>:
 8002284:	4801      	ldr	r0, [pc, #4]	; (800228c <__malloc_unlock+0x8>)
 8002286:	f7ff bf0e 	b.w	80020a6 <__retarget_lock_release_recursive>
 800228a:	bf00      	nop
 800228c:	20000238 	.word	0x20000238

08002290 <__ssputs_r>:
 8002290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002294:	461f      	mov	r7, r3
 8002296:	688e      	ldr	r6, [r1, #8]
 8002298:	4682      	mov	sl, r0
 800229a:	42be      	cmp	r6, r7
 800229c:	460c      	mov	r4, r1
 800229e:	4690      	mov	r8, r2
 80022a0:	680b      	ldr	r3, [r1, #0]
 80022a2:	d82c      	bhi.n	80022fe <__ssputs_r+0x6e>
 80022a4:	898a      	ldrh	r2, [r1, #12]
 80022a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022aa:	d026      	beq.n	80022fa <__ssputs_r+0x6a>
 80022ac:	6965      	ldr	r5, [r4, #20]
 80022ae:	6909      	ldr	r1, [r1, #16]
 80022b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022b4:	eba3 0901 	sub.w	r9, r3, r1
 80022b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022bc:	1c7b      	adds	r3, r7, #1
 80022be:	444b      	add	r3, r9
 80022c0:	106d      	asrs	r5, r5, #1
 80022c2:	429d      	cmp	r5, r3
 80022c4:	bf38      	it	cc
 80022c6:	461d      	movcc	r5, r3
 80022c8:	0553      	lsls	r3, r2, #21
 80022ca:	d527      	bpl.n	800231c <__ssputs_r+0x8c>
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7ff ff53 	bl	8002178 <_malloc_r>
 80022d2:	4606      	mov	r6, r0
 80022d4:	b360      	cbz	r0, 8002330 <__ssputs_r+0xa0>
 80022d6:	464a      	mov	r2, r9
 80022d8:	6921      	ldr	r1, [r4, #16]
 80022da:	f000 fafd 	bl	80028d8 <memcpy>
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	6126      	str	r6, [r4, #16]
 80022ec:	444e      	add	r6, r9
 80022ee:	6026      	str	r6, [r4, #0]
 80022f0:	463e      	mov	r6, r7
 80022f2:	6165      	str	r5, [r4, #20]
 80022f4:	eba5 0509 	sub.w	r5, r5, r9
 80022f8:	60a5      	str	r5, [r4, #8]
 80022fa:	42be      	cmp	r6, r7
 80022fc:	d900      	bls.n	8002300 <__ssputs_r+0x70>
 80022fe:	463e      	mov	r6, r7
 8002300:	4632      	mov	r2, r6
 8002302:	4641      	mov	r1, r8
 8002304:	6820      	ldr	r0, [r4, #0]
 8002306:	f000 faaf 	bl	8002868 <memmove>
 800230a:	2000      	movs	r0, #0
 800230c:	68a3      	ldr	r3, [r4, #8]
 800230e:	1b9b      	subs	r3, r3, r6
 8002310:	60a3      	str	r3, [r4, #8]
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	4433      	add	r3, r6
 8002316:	6023      	str	r3, [r4, #0]
 8002318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800231c:	462a      	mov	r2, r5
 800231e:	f000 fae9 	bl	80028f4 <_realloc_r>
 8002322:	4606      	mov	r6, r0
 8002324:	2800      	cmp	r0, #0
 8002326:	d1e0      	bne.n	80022ea <__ssputs_r+0x5a>
 8002328:	4650      	mov	r0, sl
 800232a:	6921      	ldr	r1, [r4, #16]
 800232c:	f7ff febc 	bl	80020a8 <_free_r>
 8002330:	230c      	movs	r3, #12
 8002332:	f8ca 3000 	str.w	r3, [sl]
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002340:	81a3      	strh	r3, [r4, #12]
 8002342:	e7e9      	b.n	8002318 <__ssputs_r+0x88>

08002344 <_svfiprintf_r>:
 8002344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002348:	4698      	mov	r8, r3
 800234a:	898b      	ldrh	r3, [r1, #12]
 800234c:	4607      	mov	r7, r0
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	460d      	mov	r5, r1
 8002352:	4614      	mov	r4, r2
 8002354:	b09d      	sub	sp, #116	; 0x74
 8002356:	d50e      	bpl.n	8002376 <_svfiprintf_r+0x32>
 8002358:	690b      	ldr	r3, [r1, #16]
 800235a:	b963      	cbnz	r3, 8002376 <_svfiprintf_r+0x32>
 800235c:	2140      	movs	r1, #64	; 0x40
 800235e:	f7ff ff0b 	bl	8002178 <_malloc_r>
 8002362:	6028      	str	r0, [r5, #0]
 8002364:	6128      	str	r0, [r5, #16]
 8002366:	b920      	cbnz	r0, 8002372 <_svfiprintf_r+0x2e>
 8002368:	230c      	movs	r3, #12
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	e0d0      	b.n	8002514 <_svfiprintf_r+0x1d0>
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	616b      	str	r3, [r5, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	9309      	str	r3, [sp, #36]	; 0x24
 800237a:	2320      	movs	r3, #32
 800237c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002380:	2330      	movs	r3, #48	; 0x30
 8002382:	f04f 0901 	mov.w	r9, #1
 8002386:	f8cd 800c 	str.w	r8, [sp, #12]
 800238a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800252c <_svfiprintf_r+0x1e8>
 800238e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002392:	4623      	mov	r3, r4
 8002394:	469a      	mov	sl, r3
 8002396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800239a:	b10a      	cbz	r2, 80023a0 <_svfiprintf_r+0x5c>
 800239c:	2a25      	cmp	r2, #37	; 0x25
 800239e:	d1f9      	bne.n	8002394 <_svfiprintf_r+0x50>
 80023a0:	ebba 0b04 	subs.w	fp, sl, r4
 80023a4:	d00b      	beq.n	80023be <_svfiprintf_r+0x7a>
 80023a6:	465b      	mov	r3, fp
 80023a8:	4622      	mov	r2, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	4638      	mov	r0, r7
 80023ae:	f7ff ff6f 	bl	8002290 <__ssputs_r>
 80023b2:	3001      	adds	r0, #1
 80023b4:	f000 80a9 	beq.w	800250a <_svfiprintf_r+0x1c6>
 80023b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ba:	445a      	add	r2, fp
 80023bc:	9209      	str	r2, [sp, #36]	; 0x24
 80023be:	f89a 3000 	ldrb.w	r3, [sl]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80a1 	beq.w	800250a <_svfiprintf_r+0x1c6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295
 80023ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023d2:	f10a 0a01 	add.w	sl, sl, #1
 80023d6:	9304      	str	r3, [sp, #16]
 80023d8:	9307      	str	r3, [sp, #28]
 80023da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023de:	931a      	str	r3, [sp, #104]	; 0x68
 80023e0:	4654      	mov	r4, sl
 80023e2:	2205      	movs	r2, #5
 80023e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023e8:	4850      	ldr	r0, [pc, #320]	; (800252c <_svfiprintf_r+0x1e8>)
 80023ea:	f000 fa67 	bl	80028bc <memchr>
 80023ee:	9a04      	ldr	r2, [sp, #16]
 80023f0:	b9d8      	cbnz	r0, 800242a <_svfiprintf_r+0xe6>
 80023f2:	06d0      	lsls	r0, r2, #27
 80023f4:	bf44      	itt	mi
 80023f6:	2320      	movmi	r3, #32
 80023f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023fc:	0711      	lsls	r1, r2, #28
 80023fe:	bf44      	itt	mi
 8002400:	232b      	movmi	r3, #43	; 0x2b
 8002402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002406:	f89a 3000 	ldrb.w	r3, [sl]
 800240a:	2b2a      	cmp	r3, #42	; 0x2a
 800240c:	d015      	beq.n	800243a <_svfiprintf_r+0xf6>
 800240e:	4654      	mov	r4, sl
 8002410:	2000      	movs	r0, #0
 8002412:	f04f 0c0a 	mov.w	ip, #10
 8002416:	9a07      	ldr	r2, [sp, #28]
 8002418:	4621      	mov	r1, r4
 800241a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800241e:	3b30      	subs	r3, #48	; 0x30
 8002420:	2b09      	cmp	r3, #9
 8002422:	d94d      	bls.n	80024c0 <_svfiprintf_r+0x17c>
 8002424:	b1b0      	cbz	r0, 8002454 <_svfiprintf_r+0x110>
 8002426:	9207      	str	r2, [sp, #28]
 8002428:	e014      	b.n	8002454 <_svfiprintf_r+0x110>
 800242a:	eba0 0308 	sub.w	r3, r0, r8
 800242e:	fa09 f303 	lsl.w	r3, r9, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	46a2      	mov	sl, r4
 8002436:	9304      	str	r3, [sp, #16]
 8002438:	e7d2      	b.n	80023e0 <_svfiprintf_r+0x9c>
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	1d19      	adds	r1, r3, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	9103      	str	r1, [sp, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	bfbb      	ittet	lt
 8002446:	425b      	neglt	r3, r3
 8002448:	f042 0202 	orrlt.w	r2, r2, #2
 800244c:	9307      	strge	r3, [sp, #28]
 800244e:	9307      	strlt	r3, [sp, #28]
 8002450:	bfb8      	it	lt
 8002452:	9204      	strlt	r2, [sp, #16]
 8002454:	7823      	ldrb	r3, [r4, #0]
 8002456:	2b2e      	cmp	r3, #46	; 0x2e
 8002458:	d10c      	bne.n	8002474 <_svfiprintf_r+0x130>
 800245a:	7863      	ldrb	r3, [r4, #1]
 800245c:	2b2a      	cmp	r3, #42	; 0x2a
 800245e:	d134      	bne.n	80024ca <_svfiprintf_r+0x186>
 8002460:	9b03      	ldr	r3, [sp, #12]
 8002462:	3402      	adds	r4, #2
 8002464:	1d1a      	adds	r2, r3, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	9203      	str	r2, [sp, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	bfb8      	it	lt
 800246e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002472:	9305      	str	r3, [sp, #20]
 8002474:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002530 <_svfiprintf_r+0x1ec>
 8002478:	2203      	movs	r2, #3
 800247a:	4650      	mov	r0, sl
 800247c:	7821      	ldrb	r1, [r4, #0]
 800247e:	f000 fa1d 	bl	80028bc <memchr>
 8002482:	b138      	cbz	r0, 8002494 <_svfiprintf_r+0x150>
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	9b04      	ldr	r3, [sp, #16]
 8002488:	eba0 000a 	sub.w	r0, r0, sl
 800248c:	4082      	lsls	r2, r0
 800248e:	4313      	orrs	r3, r2
 8002490:	3401      	adds	r4, #1
 8002492:	9304      	str	r3, [sp, #16]
 8002494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002498:	2206      	movs	r2, #6
 800249a:	4826      	ldr	r0, [pc, #152]	; (8002534 <_svfiprintf_r+0x1f0>)
 800249c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024a0:	f000 fa0c 	bl	80028bc <memchr>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d038      	beq.n	800251a <_svfiprintf_r+0x1d6>
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <_svfiprintf_r+0x1f4>)
 80024aa:	bb1b      	cbnz	r3, 80024f4 <_svfiprintf_r+0x1b0>
 80024ac:	9b03      	ldr	r3, [sp, #12]
 80024ae:	3307      	adds	r3, #7
 80024b0:	f023 0307 	bic.w	r3, r3, #7
 80024b4:	3308      	adds	r3, #8
 80024b6:	9303      	str	r3, [sp, #12]
 80024b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ba:	4433      	add	r3, r6
 80024bc:	9309      	str	r3, [sp, #36]	; 0x24
 80024be:	e768      	b.n	8002392 <_svfiprintf_r+0x4e>
 80024c0:	460c      	mov	r4, r1
 80024c2:	2001      	movs	r0, #1
 80024c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80024c8:	e7a6      	b.n	8002418 <_svfiprintf_r+0xd4>
 80024ca:	2300      	movs	r3, #0
 80024cc:	f04f 0c0a 	mov.w	ip, #10
 80024d0:	4619      	mov	r1, r3
 80024d2:	3401      	adds	r4, #1
 80024d4:	9305      	str	r3, [sp, #20]
 80024d6:	4620      	mov	r0, r4
 80024d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024dc:	3a30      	subs	r2, #48	; 0x30
 80024de:	2a09      	cmp	r2, #9
 80024e0:	d903      	bls.n	80024ea <_svfiprintf_r+0x1a6>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0c6      	beq.n	8002474 <_svfiprintf_r+0x130>
 80024e6:	9105      	str	r1, [sp, #20]
 80024e8:	e7c4      	b.n	8002474 <_svfiprintf_r+0x130>
 80024ea:	4604      	mov	r4, r0
 80024ec:	2301      	movs	r3, #1
 80024ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80024f2:	e7f0      	b.n	80024d6 <_svfiprintf_r+0x192>
 80024f4:	ab03      	add	r3, sp, #12
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	462a      	mov	r2, r5
 80024fa:	4638      	mov	r0, r7
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <_svfiprintf_r+0x1f8>)
 80024fe:	a904      	add	r1, sp, #16
 8002500:	f3af 8000 	nop.w
 8002504:	1c42      	adds	r2, r0, #1
 8002506:	4606      	mov	r6, r0
 8002508:	d1d6      	bne.n	80024b8 <_svfiprintf_r+0x174>
 800250a:	89ab      	ldrh	r3, [r5, #12]
 800250c:	065b      	lsls	r3, r3, #25
 800250e:	f53f af2d 	bmi.w	800236c <_svfiprintf_r+0x28>
 8002512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002514:	b01d      	add	sp, #116	; 0x74
 8002516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251a:	ab03      	add	r3, sp, #12
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	462a      	mov	r2, r5
 8002520:	4638      	mov	r0, r7
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <_svfiprintf_r+0x1f8>)
 8002524:	a904      	add	r1, sp, #16
 8002526:	f000 f87d 	bl	8002624 <_printf_i>
 800252a:	e7eb      	b.n	8002504 <_svfiprintf_r+0x1c0>
 800252c:	080029aa 	.word	0x080029aa
 8002530:	080029b0 	.word	0x080029b0
 8002534:	080029b4 	.word	0x080029b4
 8002538:	00000000 	.word	0x00000000
 800253c:	08002291 	.word	0x08002291

08002540 <_printf_common>:
 8002540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	4616      	mov	r6, r2
 8002546:	4699      	mov	r9, r3
 8002548:	688a      	ldr	r2, [r1, #8]
 800254a:	690b      	ldr	r3, [r1, #16]
 800254c:	4607      	mov	r7, r0
 800254e:	4293      	cmp	r3, r2
 8002550:	bfb8      	it	lt
 8002552:	4613      	movlt	r3, r2
 8002554:	6033      	str	r3, [r6, #0]
 8002556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800255a:	460c      	mov	r4, r1
 800255c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002560:	b10a      	cbz	r2, 8002566 <_printf_common+0x26>
 8002562:	3301      	adds	r3, #1
 8002564:	6033      	str	r3, [r6, #0]
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	0699      	lsls	r1, r3, #26
 800256a:	bf42      	ittt	mi
 800256c:	6833      	ldrmi	r3, [r6, #0]
 800256e:	3302      	addmi	r3, #2
 8002570:	6033      	strmi	r3, [r6, #0]
 8002572:	6825      	ldr	r5, [r4, #0]
 8002574:	f015 0506 	ands.w	r5, r5, #6
 8002578:	d106      	bne.n	8002588 <_printf_common+0x48>
 800257a:	f104 0a19 	add.w	sl, r4, #25
 800257e:	68e3      	ldr	r3, [r4, #12]
 8002580:	6832      	ldr	r2, [r6, #0]
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	42ab      	cmp	r3, r5
 8002586:	dc2b      	bgt.n	80025e0 <_printf_common+0xa0>
 8002588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800258c:	1e13      	subs	r3, r2, #0
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	bf18      	it	ne
 8002592:	2301      	movne	r3, #1
 8002594:	0692      	lsls	r2, r2, #26
 8002596:	d430      	bmi.n	80025fa <_printf_common+0xba>
 8002598:	4649      	mov	r1, r9
 800259a:	4638      	mov	r0, r7
 800259c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025a0:	47c0      	blx	r8
 80025a2:	3001      	adds	r0, #1
 80025a4:	d023      	beq.n	80025ee <_printf_common+0xae>
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	6922      	ldr	r2, [r4, #16]
 80025aa:	f003 0306 	and.w	r3, r3, #6
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf14      	ite	ne
 80025b2:	2500      	movne	r5, #0
 80025b4:	6833      	ldreq	r3, [r6, #0]
 80025b6:	f04f 0600 	mov.w	r6, #0
 80025ba:	bf08      	it	eq
 80025bc:	68e5      	ldreq	r5, [r4, #12]
 80025be:	f104 041a 	add.w	r4, r4, #26
 80025c2:	bf08      	it	eq
 80025c4:	1aed      	subeq	r5, r5, r3
 80025c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80025ca:	bf08      	it	eq
 80025cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bfc4      	itt	gt
 80025d4:	1a9b      	subgt	r3, r3, r2
 80025d6:	18ed      	addgt	r5, r5, r3
 80025d8:	42b5      	cmp	r5, r6
 80025da:	d11a      	bne.n	8002612 <_printf_common+0xd2>
 80025dc:	2000      	movs	r0, #0
 80025de:	e008      	b.n	80025f2 <_printf_common+0xb2>
 80025e0:	2301      	movs	r3, #1
 80025e2:	4652      	mov	r2, sl
 80025e4:	4649      	mov	r1, r9
 80025e6:	4638      	mov	r0, r7
 80025e8:	47c0      	blx	r8
 80025ea:	3001      	adds	r0, #1
 80025ec:	d103      	bne.n	80025f6 <_printf_common+0xb6>
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f6:	3501      	adds	r5, #1
 80025f8:	e7c1      	b.n	800257e <_printf_common+0x3e>
 80025fa:	2030      	movs	r0, #48	; 0x30
 80025fc:	18e1      	adds	r1, r4, r3
 80025fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002608:	4422      	add	r2, r4
 800260a:	3302      	adds	r3, #2
 800260c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002610:	e7c2      	b.n	8002598 <_printf_common+0x58>
 8002612:	2301      	movs	r3, #1
 8002614:	4622      	mov	r2, r4
 8002616:	4649      	mov	r1, r9
 8002618:	4638      	mov	r0, r7
 800261a:	47c0      	blx	r8
 800261c:	3001      	adds	r0, #1
 800261e:	d0e6      	beq.n	80025ee <_printf_common+0xae>
 8002620:	3601      	adds	r6, #1
 8002622:	e7d9      	b.n	80025d8 <_printf_common+0x98>

08002624 <_printf_i>:
 8002624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002628:	7e0f      	ldrb	r7, [r1, #24]
 800262a:	4691      	mov	r9, r2
 800262c:	2f78      	cmp	r7, #120	; 0x78
 800262e:	4680      	mov	r8, r0
 8002630:	460c      	mov	r4, r1
 8002632:	469a      	mov	sl, r3
 8002634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800263a:	d807      	bhi.n	800264c <_printf_i+0x28>
 800263c:	2f62      	cmp	r7, #98	; 0x62
 800263e:	d80a      	bhi.n	8002656 <_printf_i+0x32>
 8002640:	2f00      	cmp	r7, #0
 8002642:	f000 80d5 	beq.w	80027f0 <_printf_i+0x1cc>
 8002646:	2f58      	cmp	r7, #88	; 0x58
 8002648:	f000 80c1 	beq.w	80027ce <_printf_i+0x1aa>
 800264c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002654:	e03a      	b.n	80026cc <_printf_i+0xa8>
 8002656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800265a:	2b15      	cmp	r3, #21
 800265c:	d8f6      	bhi.n	800264c <_printf_i+0x28>
 800265e:	a101      	add	r1, pc, #4	; (adr r1, 8002664 <_printf_i+0x40>)
 8002660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002664:	080026bd 	.word	0x080026bd
 8002668:	080026d1 	.word	0x080026d1
 800266c:	0800264d 	.word	0x0800264d
 8002670:	0800264d 	.word	0x0800264d
 8002674:	0800264d 	.word	0x0800264d
 8002678:	0800264d 	.word	0x0800264d
 800267c:	080026d1 	.word	0x080026d1
 8002680:	0800264d 	.word	0x0800264d
 8002684:	0800264d 	.word	0x0800264d
 8002688:	0800264d 	.word	0x0800264d
 800268c:	0800264d 	.word	0x0800264d
 8002690:	080027d7 	.word	0x080027d7
 8002694:	080026fd 	.word	0x080026fd
 8002698:	08002791 	.word	0x08002791
 800269c:	0800264d 	.word	0x0800264d
 80026a0:	0800264d 	.word	0x0800264d
 80026a4:	080027f9 	.word	0x080027f9
 80026a8:	0800264d 	.word	0x0800264d
 80026ac:	080026fd 	.word	0x080026fd
 80026b0:	0800264d 	.word	0x0800264d
 80026b4:	0800264d 	.word	0x0800264d
 80026b8:	08002799 	.word	0x08002799
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	1d1a      	adds	r2, r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	602a      	str	r2, [r5, #0]
 80026c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0a0      	b.n	8002812 <_printf_i+0x1ee>
 80026d0:	6820      	ldr	r0, [r4, #0]
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	0607      	lsls	r7, r0, #24
 80026d6:	f103 0104 	add.w	r1, r3, #4
 80026da:	6029      	str	r1, [r5, #0]
 80026dc:	d501      	bpl.n	80026e2 <_printf_i+0xbe>
 80026de:	681e      	ldr	r6, [r3, #0]
 80026e0:	e003      	b.n	80026ea <_printf_i+0xc6>
 80026e2:	0646      	lsls	r6, r0, #25
 80026e4:	d5fb      	bpl.n	80026de <_printf_i+0xba>
 80026e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80026ea:	2e00      	cmp	r6, #0
 80026ec:	da03      	bge.n	80026f6 <_printf_i+0xd2>
 80026ee:	232d      	movs	r3, #45	; 0x2d
 80026f0:	4276      	negs	r6, r6
 80026f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026f6:	230a      	movs	r3, #10
 80026f8:	4859      	ldr	r0, [pc, #356]	; (8002860 <_printf_i+0x23c>)
 80026fa:	e012      	b.n	8002722 <_printf_i+0xfe>
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	6820      	ldr	r0, [r4, #0]
 8002700:	1d19      	adds	r1, r3, #4
 8002702:	6029      	str	r1, [r5, #0]
 8002704:	0605      	lsls	r5, r0, #24
 8002706:	d501      	bpl.n	800270c <_printf_i+0xe8>
 8002708:	681e      	ldr	r6, [r3, #0]
 800270a:	e002      	b.n	8002712 <_printf_i+0xee>
 800270c:	0641      	lsls	r1, r0, #25
 800270e:	d5fb      	bpl.n	8002708 <_printf_i+0xe4>
 8002710:	881e      	ldrh	r6, [r3, #0]
 8002712:	2f6f      	cmp	r7, #111	; 0x6f
 8002714:	bf0c      	ite	eq
 8002716:	2308      	moveq	r3, #8
 8002718:	230a      	movne	r3, #10
 800271a:	4851      	ldr	r0, [pc, #324]	; (8002860 <_printf_i+0x23c>)
 800271c:	2100      	movs	r1, #0
 800271e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002722:	6865      	ldr	r5, [r4, #4]
 8002724:	2d00      	cmp	r5, #0
 8002726:	bfa8      	it	ge
 8002728:	6821      	ldrge	r1, [r4, #0]
 800272a:	60a5      	str	r5, [r4, #8]
 800272c:	bfa4      	itt	ge
 800272e:	f021 0104 	bicge.w	r1, r1, #4
 8002732:	6021      	strge	r1, [r4, #0]
 8002734:	b90e      	cbnz	r6, 800273a <_printf_i+0x116>
 8002736:	2d00      	cmp	r5, #0
 8002738:	d04b      	beq.n	80027d2 <_printf_i+0x1ae>
 800273a:	4615      	mov	r5, r2
 800273c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002740:	fb03 6711 	mls	r7, r3, r1, r6
 8002744:	5dc7      	ldrb	r7, [r0, r7]
 8002746:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800274a:	4637      	mov	r7, r6
 800274c:	42bb      	cmp	r3, r7
 800274e:	460e      	mov	r6, r1
 8002750:	d9f4      	bls.n	800273c <_printf_i+0x118>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d10b      	bne.n	800276e <_printf_i+0x14a>
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	07de      	lsls	r6, r3, #31
 800275a:	d508      	bpl.n	800276e <_printf_i+0x14a>
 800275c:	6923      	ldr	r3, [r4, #16]
 800275e:	6861      	ldr	r1, [r4, #4]
 8002760:	4299      	cmp	r1, r3
 8002762:	bfde      	ittt	le
 8002764:	2330      	movle	r3, #48	; 0x30
 8002766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800276a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800276e:	1b52      	subs	r2, r2, r5
 8002770:	6122      	str	r2, [r4, #16]
 8002772:	464b      	mov	r3, r9
 8002774:	4621      	mov	r1, r4
 8002776:	4640      	mov	r0, r8
 8002778:	f8cd a000 	str.w	sl, [sp]
 800277c:	aa03      	add	r2, sp, #12
 800277e:	f7ff fedf 	bl	8002540 <_printf_common>
 8002782:	3001      	adds	r0, #1
 8002784:	d14a      	bne.n	800281c <_printf_i+0x1f8>
 8002786:	f04f 30ff 	mov.w	r0, #4294967295
 800278a:	b004      	add	sp, #16
 800278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	f043 0320 	orr.w	r3, r3, #32
 8002796:	6023      	str	r3, [r4, #0]
 8002798:	2778      	movs	r7, #120	; 0x78
 800279a:	4832      	ldr	r0, [pc, #200]	; (8002864 <_printf_i+0x240>)
 800279c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	6829      	ldr	r1, [r5, #0]
 80027a4:	061f      	lsls	r7, r3, #24
 80027a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80027aa:	d402      	bmi.n	80027b2 <_printf_i+0x18e>
 80027ac:	065f      	lsls	r7, r3, #25
 80027ae:	bf48      	it	mi
 80027b0:	b2b6      	uxthmi	r6, r6
 80027b2:	07df      	lsls	r7, r3, #31
 80027b4:	bf48      	it	mi
 80027b6:	f043 0320 	orrmi.w	r3, r3, #32
 80027ba:	6029      	str	r1, [r5, #0]
 80027bc:	bf48      	it	mi
 80027be:	6023      	strmi	r3, [r4, #0]
 80027c0:	b91e      	cbnz	r6, 80027ca <_printf_i+0x1a6>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	f023 0320 	bic.w	r3, r3, #32
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	2310      	movs	r3, #16
 80027cc:	e7a6      	b.n	800271c <_printf_i+0xf8>
 80027ce:	4824      	ldr	r0, [pc, #144]	; (8002860 <_printf_i+0x23c>)
 80027d0:	e7e4      	b.n	800279c <_printf_i+0x178>
 80027d2:	4615      	mov	r5, r2
 80027d4:	e7bd      	b.n	8002752 <_printf_i+0x12e>
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	6826      	ldr	r6, [r4, #0]
 80027da:	1d18      	adds	r0, r3, #4
 80027dc:	6961      	ldr	r1, [r4, #20]
 80027de:	6028      	str	r0, [r5, #0]
 80027e0:	0635      	lsls	r5, r6, #24
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	d501      	bpl.n	80027ea <_printf_i+0x1c6>
 80027e6:	6019      	str	r1, [r3, #0]
 80027e8:	e002      	b.n	80027f0 <_printf_i+0x1cc>
 80027ea:	0670      	lsls	r0, r6, #25
 80027ec:	d5fb      	bpl.n	80027e6 <_printf_i+0x1c2>
 80027ee:	8019      	strh	r1, [r3, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	4615      	mov	r5, r2
 80027f4:	6123      	str	r3, [r4, #16]
 80027f6:	e7bc      	b.n	8002772 <_printf_i+0x14e>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	1d1a      	adds	r2, r3, #4
 80027fe:	602a      	str	r2, [r5, #0]
 8002800:	681d      	ldr	r5, [r3, #0]
 8002802:	6862      	ldr	r2, [r4, #4]
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f859 	bl	80028bc <memchr>
 800280a:	b108      	cbz	r0, 8002810 <_printf_i+0x1ec>
 800280c:	1b40      	subs	r0, r0, r5
 800280e:	6060      	str	r0, [r4, #4]
 8002810:	6863      	ldr	r3, [r4, #4]
 8002812:	6123      	str	r3, [r4, #16]
 8002814:	2300      	movs	r3, #0
 8002816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800281a:	e7aa      	b.n	8002772 <_printf_i+0x14e>
 800281c:	462a      	mov	r2, r5
 800281e:	4649      	mov	r1, r9
 8002820:	4640      	mov	r0, r8
 8002822:	6923      	ldr	r3, [r4, #16]
 8002824:	47d0      	blx	sl
 8002826:	3001      	adds	r0, #1
 8002828:	d0ad      	beq.n	8002786 <_printf_i+0x162>
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	079b      	lsls	r3, r3, #30
 800282e:	d413      	bmi.n	8002858 <_printf_i+0x234>
 8002830:	68e0      	ldr	r0, [r4, #12]
 8002832:	9b03      	ldr	r3, [sp, #12]
 8002834:	4298      	cmp	r0, r3
 8002836:	bfb8      	it	lt
 8002838:	4618      	movlt	r0, r3
 800283a:	e7a6      	b.n	800278a <_printf_i+0x166>
 800283c:	2301      	movs	r3, #1
 800283e:	4632      	mov	r2, r6
 8002840:	4649      	mov	r1, r9
 8002842:	4640      	mov	r0, r8
 8002844:	47d0      	blx	sl
 8002846:	3001      	adds	r0, #1
 8002848:	d09d      	beq.n	8002786 <_printf_i+0x162>
 800284a:	3501      	adds	r5, #1
 800284c:	68e3      	ldr	r3, [r4, #12]
 800284e:	9903      	ldr	r1, [sp, #12]
 8002850:	1a5b      	subs	r3, r3, r1
 8002852:	42ab      	cmp	r3, r5
 8002854:	dcf2      	bgt.n	800283c <_printf_i+0x218>
 8002856:	e7eb      	b.n	8002830 <_printf_i+0x20c>
 8002858:	2500      	movs	r5, #0
 800285a:	f104 0619 	add.w	r6, r4, #25
 800285e:	e7f5      	b.n	800284c <_printf_i+0x228>
 8002860:	080029bb 	.word	0x080029bb
 8002864:	080029cc 	.word	0x080029cc

08002868 <memmove>:
 8002868:	4288      	cmp	r0, r1
 800286a:	b510      	push	{r4, lr}
 800286c:	eb01 0402 	add.w	r4, r1, r2
 8002870:	d902      	bls.n	8002878 <memmove+0x10>
 8002872:	4284      	cmp	r4, r0
 8002874:	4623      	mov	r3, r4
 8002876:	d807      	bhi.n	8002888 <memmove+0x20>
 8002878:	1e43      	subs	r3, r0, #1
 800287a:	42a1      	cmp	r1, r4
 800287c:	d008      	beq.n	8002890 <memmove+0x28>
 800287e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002886:	e7f8      	b.n	800287a <memmove+0x12>
 8002888:	4601      	mov	r1, r0
 800288a:	4402      	add	r2, r0
 800288c:	428a      	cmp	r2, r1
 800288e:	d100      	bne.n	8002892 <memmove+0x2a>
 8002890:	bd10      	pop	{r4, pc}
 8002892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800289a:	e7f7      	b.n	800288c <memmove+0x24>

0800289c <_sbrk_r>:
 800289c:	b538      	push	{r3, r4, r5, lr}
 800289e:	2300      	movs	r3, #0
 80028a0:	4d05      	ldr	r5, [pc, #20]	; (80028b8 <_sbrk_r+0x1c>)
 80028a2:	4604      	mov	r4, r0
 80028a4:	4608      	mov	r0, r1
 80028a6:	602b      	str	r3, [r5, #0]
 80028a8:	f7fd fe86 	bl	80005b8 <_sbrk>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d102      	bne.n	80028b6 <_sbrk_r+0x1a>
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	b103      	cbz	r3, 80028b6 <_sbrk_r+0x1a>
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
 80028b8:	20000234 	.word	0x20000234

080028bc <memchr>:
 80028bc:	4603      	mov	r3, r0
 80028be:	b510      	push	{r4, lr}
 80028c0:	b2c9      	uxtb	r1, r1
 80028c2:	4402      	add	r2, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	d101      	bne.n	80028ce <memchr+0x12>
 80028ca:	2000      	movs	r0, #0
 80028cc:	e003      	b.n	80028d6 <memchr+0x1a>
 80028ce:	7804      	ldrb	r4, [r0, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	428c      	cmp	r4, r1
 80028d4:	d1f6      	bne.n	80028c4 <memchr+0x8>
 80028d6:	bd10      	pop	{r4, pc}

080028d8 <memcpy>:
 80028d8:	440a      	add	r2, r1
 80028da:	4291      	cmp	r1, r2
 80028dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80028e0:	d100      	bne.n	80028e4 <memcpy+0xc>
 80028e2:	4770      	bx	lr
 80028e4:	b510      	push	{r4, lr}
 80028e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028ea:	4291      	cmp	r1, r2
 80028ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028f0:	d1f9      	bne.n	80028e6 <memcpy+0xe>
 80028f2:	bd10      	pop	{r4, pc}

080028f4 <_realloc_r>:
 80028f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f8:	4680      	mov	r8, r0
 80028fa:	4614      	mov	r4, r2
 80028fc:	460e      	mov	r6, r1
 80028fe:	b921      	cbnz	r1, 800290a <_realloc_r+0x16>
 8002900:	4611      	mov	r1, r2
 8002902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002906:	f7ff bc37 	b.w	8002178 <_malloc_r>
 800290a:	b92a      	cbnz	r2, 8002918 <_realloc_r+0x24>
 800290c:	f7ff fbcc 	bl	80020a8 <_free_r>
 8002910:	4625      	mov	r5, r4
 8002912:	4628      	mov	r0, r5
 8002914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002918:	f000 f81b 	bl	8002952 <_malloc_usable_size_r>
 800291c:	4284      	cmp	r4, r0
 800291e:	4607      	mov	r7, r0
 8002920:	d802      	bhi.n	8002928 <_realloc_r+0x34>
 8002922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002926:	d812      	bhi.n	800294e <_realloc_r+0x5a>
 8002928:	4621      	mov	r1, r4
 800292a:	4640      	mov	r0, r8
 800292c:	f7ff fc24 	bl	8002178 <_malloc_r>
 8002930:	4605      	mov	r5, r0
 8002932:	2800      	cmp	r0, #0
 8002934:	d0ed      	beq.n	8002912 <_realloc_r+0x1e>
 8002936:	42bc      	cmp	r4, r7
 8002938:	4622      	mov	r2, r4
 800293a:	4631      	mov	r1, r6
 800293c:	bf28      	it	cs
 800293e:	463a      	movcs	r2, r7
 8002940:	f7ff ffca 	bl	80028d8 <memcpy>
 8002944:	4631      	mov	r1, r6
 8002946:	4640      	mov	r0, r8
 8002948:	f7ff fbae 	bl	80020a8 <_free_r>
 800294c:	e7e1      	b.n	8002912 <_realloc_r+0x1e>
 800294e:	4635      	mov	r5, r6
 8002950:	e7df      	b.n	8002912 <_realloc_r+0x1e>

08002952 <_malloc_usable_size_r>:
 8002952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002956:	1f18      	subs	r0, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	bfbc      	itt	lt
 800295c:	580b      	ldrlt	r3, [r1, r0]
 800295e:	18c0      	addlt	r0, r0, r3
 8002960:	4770      	bx	lr
	...

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
