
doan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003138  08003138  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003138  08003138  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003138  08003138  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  0800314c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800314c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc3c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aee  00000000  00000000  0002bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094f  00000000  00000000  0002e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c04  00000000  00000000  0002eccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1b3  00000000  00000000  000458d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086704  00000000  00000000  00052a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000319c  00000000  00000000  000d918c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000dc328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e4 	.word	0x080030e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030e4 	.word	0x080030e4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fac5 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f823 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f929 	bl	80003b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f8fd 	bl	800035c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000162:	f000 f859 	bl	8000218 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data[] = "vo khac nam\n";
 8000166:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <main+0x44>)
 8000168:	463c      	mov	r4, r7
 800016a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016c:	c407      	stmia	r4!, {r0, r1, r2}
 800016e:	7023      	strb	r3, [r4, #0]
	  //strcpy(data, (uint8_t*)adc);
	  //HAL_USART_Transmit(&husart1,(uint8_t*)data,sizeof(data),10);
	  //HAL_Delay(2000);
	  //HAL_Delay(3000);
	  //HAL_USART_Transmit(&husart1,data,sizeof(data),10);
	  HAL_UART_Transmit(&huart1, data, sizeof(data), 100000);
 8000170:	4639      	mov	r1, r7
 8000172:	4b08      	ldr	r3, [pc, #32]	; (8000194 <main+0x48>)
 8000174:	220d      	movs	r2, #13
 8000176:	4808      	ldr	r0, [pc, #32]	; (8000198 <main+0x4c>)
 8000178:	f002 f9b5 	bl	80024e6 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800017c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000180:	f000 fb10 	bl	80007a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <main+0x50>)
 800018a:	f000 fe8b 	bl	8000ea4 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart1, data, sizeof(data), 100000);
 800018e:	e7ef      	b.n	8000170 <main+0x24>
 8000190:	080030fc 	.word	0x080030fc
 8000194:	000186a0 	.word	0x000186a0
 8000198:	20000070 	.word	0x20000070
 800019c:	40011000 	.word	0x40011000

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 ff6c 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fe7e 	bl	8000ed8 <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e2:	f000 f931 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 f8ec 	bl	80013dc <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020a:	f000 f91d 	bl	8000448 <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	; 0x58
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800021e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800022c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]
 8000246:	615a      	str	r2, [r3, #20]
 8000248:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2220      	movs	r2, #32
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f002 ff1b 	bl	800308c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000256:	4b3f      	ldr	r3, [pc, #252]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000258:	4a3f      	ldr	r2, [pc, #252]	; (8000358 <MX_TIM1_Init+0x140>)
 800025a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800025c:	4b3d      	ldr	r3, [pc, #244]	; (8000354 <MX_TIM1_Init+0x13c>)
 800025e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000262:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000264:	4b3b      	ldr	r3, [pc, #236]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800026a:	4b3a      	ldr	r3, [pc, #232]	; (8000354 <MX_TIM1_Init+0x13c>)
 800026c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000270:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000272:	4b38      	ldr	r3, [pc, #224]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000278:	4b36      	ldr	r3, [pc, #216]	; (8000354 <MX_TIM1_Init+0x13c>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027e:	4b35      	ldr	r3, [pc, #212]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000284:	4833      	ldr	r0, [pc, #204]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000286:	f001 fa37 	bl	80016f8 <HAL_TIM_Base_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000290:	f000 f8da 	bl	8000448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000298:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800029a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800029e:	4619      	mov	r1, r3
 80002a0:	482c      	ldr	r0, [pc, #176]	; (8000354 <MX_TIM1_Init+0x13c>)
 80002a2:	f001 fc9b 	bl	8001bdc <HAL_TIM_ConfigClockSource>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80002ac:	f000 f8cc 	bl	8000448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002b0:	4828      	ldr	r0, [pc, #160]	; (8000354 <MX_TIM1_Init+0x13c>)
 80002b2:	f001 fa70 	bl	8001796 <HAL_TIM_PWM_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80002bc:	f000 f8c4 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002c0:	2300      	movs	r3, #0
 80002c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002cc:	4619      	mov	r1, r3
 80002ce:	4821      	ldr	r0, [pc, #132]	; (8000354 <MX_TIM1_Init+0x13c>)
 80002d0:	f001 fff8 	bl	80022c4 <HAL_TIMEx_MasterConfigSynchronization>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80002da:	f000 f8b5 	bl	8000448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002de:	2360      	movs	r3, #96	; 0x60
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002e6:	2300      	movs	r3, #0
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002ea:	2300      	movs	r3, #0
 80002ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80002f2:	2300      	movs	r3, #0
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002fe:	2204      	movs	r2, #4
 8000300:	4619      	mov	r1, r3
 8000302:	4814      	ldr	r0, [pc, #80]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000304:	f001 fba8 	bl	8001a58 <HAL_TIM_PWM_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800030e:	f000 f89b 	bl	8000448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000336:	f002 f823 	bl	8002380 <HAL_TIMEx_ConfigBreakDeadTime>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000340:	f000 f882 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000344:	4803      	ldr	r0, [pc, #12]	; (8000354 <MX_TIM1_Init+0x13c>)
 8000346:	f000 f8cd 	bl	80004e4 <HAL_TIM_MspPostInit>

}
 800034a:	bf00      	nop
 800034c:	3758      	adds	r7, #88	; 0x58
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000028 	.word	0x20000028
 8000358:	40012c00 	.word	0x40012c00

0800035c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_USART1_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000394:	f002 f857 	bl	8002446 <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 f853 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000070 	.word	0x20000070
 80003ac:	40013800 	.word	0x40013800

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <MX_GPIO_Init+0x90>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a1d      	ldr	r2, [pc, #116]	; (8000440 <MX_GPIO_Init+0x90>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0x90>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0310 	and.w	r3, r3, #16
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x90>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a17      	ldr	r2, [pc, #92]	; (8000440 <MX_GPIO_Init+0x90>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a11      	ldr	r2, [pc, #68]	; (8000440 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000412:	480c      	ldr	r0, [pc, #48]	; (8000444 <MX_GPIO_Init+0x94>)
 8000414:	f000 fd2e 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2302      	movs	r3, #2
 8000428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_GPIO_Init+0x94>)
 8000432:	f000 fb9b 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40011000 	.word	0x40011000

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <HAL_MspInit+0x40>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <HAL_MspInit+0x40>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <HAL_MspInit+0x40>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <HAL_MspInit+0x40>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a07      	ldr	r2, [pc, #28]	; (8000494 <HAL_MspInit+0x40>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_MspInit+0x40>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <HAL_TIM_Base_MspInit+0x44>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d113      	bne.n	80004d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2100      	movs	r1, #0
 80004c6:	2019      	movs	r0, #25
 80004c8:	f000 fa67 	bl	800099a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004cc:	2019      	movs	r0, #25
 80004ce:	f000 fa80 	bl	80009d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004d2:	bf00      	nop
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40012c00 	.word	0x40012c00
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <HAL_TIM_MspPostInit+0x5c>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d118      	bne.n	8000536 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_TIM_MspPostInit+0x60>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_TIM_MspPostInit+0x60>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_TIM_MspPostInit+0x60>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800051c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	2302      	movs	r3, #2
 8000528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_TIM_MspPostInit+0x64>)
 8000532:	f000 fb1b 	bl	8000b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40012c00 	.word	0x40012c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a26      	ldr	r2, [pc, #152]	; (8000600 <HAL_UART_MspInit+0xb4>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d145      	bne.n	80005f8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <HAL_UART_MspInit+0xb8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a24      	ldr	r2, [pc, #144]	; (8000604 <HAL_UART_MspInit+0xb8>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <HAL_UART_MspInit+0xb8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_UART_MspInit+0xb8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <HAL_UART_MspInit+0xb8>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_UART_MspInit+0xb8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800059c:	2340      	movs	r3, #64	; 0x40
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4816      	ldr	r0, [pc, #88]	; (8000608 <HAL_UART_MspInit+0xbc>)
 80005b0:	f000 fadc 	bl	8000b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4810      	ldr	r0, [pc, #64]	; (8000608 <HAL_UART_MspInit+0xbc>)
 80005c8:	f000 fad0 	bl	8000b6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_UART_MspInit+0xc0>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_UART_MspInit+0xc0>)
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	2025      	movs	r0, #37	; 0x25
 80005ee:	f000 f9d4 	bl	800099a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005f2:	2025      	movs	r0, #37	; 0x25
 80005f4:	f000 f9ed 	bl	80009d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	; 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40013800 	.word	0x40013800
 8000604:	40021000 	.word	0x40021000
 8000608:	40010c00 	.word	0x40010c00
 800060c:	40010000 	.word	0x40010000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000656:	f000 f889 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <TIM1_UP_IRQHandler+0x10>)
 8000666:	f001 f8ee 	bl	8001846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028

08000674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <USART1_IRQHandler+0x10>)
 800067a:	f001 ffb7 	bl	80025ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000070 	.word	0x20000070

08000688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000694:	f7ff fff8 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800069a:	490c      	ldr	r1, [pc, #48]	; (80006cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a09      	ldr	r2, [pc, #36]	; (80006d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006b0:	4c09      	ldr	r4, [pc, #36]	; (80006d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f002 fced 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fd43 	bl	800014c <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d0:	08003140 	.word	0x08003140
  ldr r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d8:	200000bc 	.word	0x200000bc

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f947 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	200f      	movs	r0, #15
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff feaa 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f95f 	bl	80009ee <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f927 	bl	800099a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000008 	.word	0x20000008
 800078c:	200000b8 	.word	0x200000b8

08000790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	200000b8 	.word	0x200000b8

080007a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ac:	f7ff fff0 	bl	8000790 <HAL_GetTick>
 80007b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007bc:	d005      	beq.n	80007ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_Delay+0x44>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ca:	bf00      	nop
 80007cc:	f7ff ffe0 	bl	8000790 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d8f7      	bhi.n	80007cc <HAL_Delay+0x28>
  {
  }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000008 	.word	0x20000008

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0b      	blt.n	800087a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <__NVIC_EnableIRQ+0x34>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100

08000888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	; (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	; (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
         );
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	; 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000950:	d301      	bcc.n	8000956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e00f      	b.n	8000976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <SysTick_Config+0x40>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	210f      	movs	r1, #15
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff ff90 	bl	8000888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SysTick_Config+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SysTick_Config+0x40>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff2d 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ac:	f7ff ff42 	bl	8000834 <__NVIC_GetPriorityGrouping>
 80009b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	6978      	ldr	r0, [r7, #20]
 80009b8:	f7ff ff90 	bl	80008dc <NVIC_EncodePriority>
 80009bc:	4602      	mov	r2, r0
 80009be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff5f 	bl	8000888 <__NVIC_SetPriority>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff35 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffa2 	bl	8000940 <SysTick_Config>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d008      	beq.n	8000a30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2204      	movs	r2, #4
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e020      	b.n	8000a72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 020e 	bic.w	r2, r2, #14
 8000a3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f022 0201 	bic.w	r2, r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	2101      	movs	r1, #1
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d005      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2204      	movs	r2, #4
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e051      	b.n	8000b44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 020e 	bic.w	r2, r2, #14
 8000aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0201 	bic.w	r2, r2, #1
 8000abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <HAL_DMA_Abort_IT+0xd4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d029      	beq.n	8000b1e <HAL_DMA_Abort_IT+0xa2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <HAL_DMA_Abort_IT+0xd8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d022      	beq.n	8000b1a <HAL_DMA_Abort_IT+0x9e>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <HAL_DMA_Abort_IT+0xdc>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d01a      	beq.n	8000b14 <HAL_DMA_Abort_IT+0x98>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_DMA_Abort_IT+0xe0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d012      	beq.n	8000b0e <HAL_DMA_Abort_IT+0x92>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_DMA_Abort_IT+0xe4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d00a      	beq.n	8000b08 <HAL_DMA_Abort_IT+0x8c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_DMA_Abort_IT+0xe8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d102      	bne.n	8000b02 <HAL_DMA_Abort_IT+0x86>
 8000afc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b00:	e00e      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b06:	e00b      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	e008      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	e005      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b18:	e002      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	e000      	b.n	8000b20 <HAL_DMA_Abort_IT+0xa4>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_DMA_Abort_IT+0xec>)
 8000b22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	4798      	blx	r3
    } 
  }
  return status;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40020008 	.word	0x40020008
 8000b54:	4002001c 	.word	0x4002001c
 8000b58:	40020030 	.word	0x40020030
 8000b5c:	40020044 	.word	0x40020044
 8000b60:	40020058 	.word	0x40020058
 8000b64:	4002006c 	.word	0x4002006c
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e169      	b.n	8000e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b80:	2201      	movs	r2, #1
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8158 	bne.w	8000e4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a9a      	ldr	r2, [pc, #616]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d05e      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d875      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bae:	4a98      	ldr	r2, [pc, #608]	; (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d058      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d86f      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bba:	4a96      	ldr	r2, [pc, #600]	; (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d052      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bc0:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d869      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bc6:	4a94      	ldr	r2, [pc, #592]	; (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d04c      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bcc:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d863      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bd2:	4a92      	ldr	r2, [pc, #584]	; (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d046      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a90      	ldr	r2, [pc, #576]	; (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d85d      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d82a      	bhi.n	8000c38 <HAL_GPIO_Init+0xcc>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d859      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <HAL_GPIO_Init+0x80>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c41 	.word	0x08000c41
 8000bf4:	08000c53 	.word	0x08000c53
 8000bf8:	08000c95 	.word	0x08000c95
 8000bfc:	08000c9b 	.word	0x08000c9b
 8000c00:	08000c9b 	.word	0x08000c9b
 8000c04:	08000c9b 	.word	0x08000c9b
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000c9b 	.word	0x08000c9b
 8000c10:	08000c9b 	.word	0x08000c9b
 8000c14:	08000c9b 	.word	0x08000c9b
 8000c18:	08000c9b 	.word	0x08000c9b
 8000c1c:	08000c9b 	.word	0x08000c9b
 8000c20:	08000c9b 	.word	0x08000c9b
 8000c24:	08000c9b 	.word	0x08000c9b
 8000c28:	08000c9b 	.word	0x08000c9b
 8000c2c:	08000c9b 	.word	0x08000c9b
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	4a79      	ldr	r2, [pc, #484]	; (8000e20 <HAL_GPIO_Init+0x2b4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3e:	e02c      	b.n	8000c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e029      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e024      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e01f      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	330c      	adds	r3, #12
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e01a      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e013      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	611a      	str	r2, [r3, #16]
          break;
 8000c86:	e009      	b.n	8000c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	615a      	str	r2, [r3, #20]
          break;
 8000c92:	e003      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          break;
 8000c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2bff      	cmp	r3, #255	; 0xff
 8000ca0:	d801      	bhi.n	8000ca6 <HAL_GPIO_Init+0x13a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_Init+0x13e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2bff      	cmp	r3, #255	; 0xff
 8000cb0:	d802      	bhi.n	8000cb8 <HAL_GPIO_Init+0x14c>
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x152>
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3b08      	subs	r3, #8
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	401a      	ands	r2, r3
 8000cd0:	6a39      	ldr	r1, [r7, #32]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80b1 	beq.w	8000e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cec:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a4c      	ldr	r2, [pc, #304]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d04:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <HAL_GPIO_Init+0x2c0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a3f      	ldr	r2, [pc, #252]	; (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1e8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1e0>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6a:	492f      	ldr	r1, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	492c      	ldr	r1, [pc, #176]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4928      	ldr	r1, [pc, #160]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	4922      	ldr	r1, [pc, #136]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60cb      	str	r3, [r1, #12]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	491e      	ldr	r1, [pc, #120]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	4918      	ldr	r1, [pc, #96]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4914      	ldr	r1, [pc, #80]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d021      	beq.n	8000e40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	490e      	ldr	r1, [pc, #56]	; (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e021      	b.n	8000e4e <HAL_GPIO_Init+0x2e2>
 8000e0a:	bf00      	nop
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10310000 	.word	0x10310000
 8000e14:	10220000 	.word	0x10220000
 8000e18:	10210000 	.word	0x10210000
 8000e1c:	10120000 	.word	0x10120000
 8000e20:	10110000 	.word	0x10110000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40011400 	.word	0x40011400
 8000e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <HAL_GPIO_Init+0x304>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	3301      	adds	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f47f ae8e 	bne.w	8000b80 <HAL_GPIO_Init+0x14>
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	372c      	adds	r7, #44	; 0x2c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	041a      	lsls	r2, r3, #16
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43d9      	mvns	r1, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e272      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8087 	beq.w	8001006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef8:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d00c      	beq.n	8000f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f04:	4b8f      	ldr	r3, [pc, #572]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d112      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5e>
 8000f10:	4b8c      	ldr	r3, [pc, #560]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d10b      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1e:	4b89      	ldr	r3, [pc, #548]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d06c      	beq.n	8001004 <HAL_RCC_OscConfig+0x12c>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d168      	bne.n	8001004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e24c      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x76>
 8000f40:	4b80      	ldr	r3, [pc, #512]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a7f      	ldr	r2, [pc, #508]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e02e      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x98>
 8000f56:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a7a      	ldr	r2, [pc, #488]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b78      	ldr	r3, [pc, #480]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a77      	ldr	r2, [pc, #476]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e01d      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0xbc>
 8000f7a:	4b72      	ldr	r3, [pc, #456]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a71      	ldr	r2, [pc, #452]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a6e      	ldr	r2, [pc, #440]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a6a      	ldr	r2, [pc, #424]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b68      	ldr	r3, [pc, #416]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a67      	ldr	r2, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d013      	beq.n	8000fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fbec 	bl	8000790 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fbe8 	bl	8000790 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e200      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0xe4>
 8000fda:	e014      	b.n	8001006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fbd8 	bl	8000790 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fbd4 	bl	8000790 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e1ec      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x10c>
 8001002:	e000      	b.n	8001006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d063      	beq.n	80010da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b08      	cmp	r3, #8
 8001028:	d11c      	bne.n	8001064 <HAL_RCC_OscConfig+0x18c>
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d116      	bne.n	8001064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	4b43      	ldr	r3, [pc, #268]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x176>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d001      	beq.n	800104e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e1c0      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4939      	ldr	r1, [pc, #228]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	e03a      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d020      	beq.n	80010ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <HAL_RCC_OscConfig+0x270>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fb8d 	bl	8000790 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107a:	f7ff fb89 	bl	8000790 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1a1      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4927      	ldr	r1, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e015      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_RCC_OscConfig+0x270>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fb6c 	bl	8000790 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010bc:	f7ff fb68 	bl	8000790 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e180      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d03a      	beq.n	800115c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d019      	beq.n	8001122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_RCC_OscConfig+0x274>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fb4c 	bl	8000790 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010fc:	f7ff fb48 	bl	8000790 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e160      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 face 	bl	80016bc <RCC_Delay>
 8001120:	e01c      	b.n	800115c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_RCC_OscConfig+0x274>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001128:	f7ff fb32 	bl	8000790 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112e:	e00f      	b.n	8001150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fb2e 	bl	8000790 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d908      	bls.n	8001150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e146      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	42420000 	.word	0x42420000
 800114c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4b92      	ldr	r3, [pc, #584]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e9      	bne.n	8001130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80a6 	beq.w	80012b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116e:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10d      	bne.n	8001196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b85      	ldr	r3, [pc, #532]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001192:	2301      	movs	r3, #1
 8001194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001196:	4b82      	ldr	r3, [pc, #520]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d118      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a2:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7e      	ldr	r2, [pc, #504]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ae:	f7ff faef 	bl	8000790 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b6:	f7ff faeb 	bl	8000790 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	; 0x64
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e103      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	4b75      	ldr	r3, [pc, #468]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x312>
 80011dc:	4b6f      	ldr	r3, [pc, #444]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a6e      	ldr	r2, [pc, #440]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	e02d      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x334>
 80011f2:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a69      	ldr	r2, [pc, #420]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	6213      	str	r3, [r2, #32]
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a66      	ldr	r2, [pc, #408]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f023 0304 	bic.w	r3, r3, #4
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	e01c      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x356>
 8001214:	4b61      	ldr	r3, [pc, #388]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a60      	ldr	r2, [pc, #384]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	4b5e      	ldr	r3, [pc, #376]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a5d      	ldr	r2, [pc, #372]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	e00b      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a5a      	ldr	r2, [pc, #360]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d015      	beq.n	800127a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fa9f 	bl	8000790 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fa9b 	bl	8000790 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0b1      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ee      	beq.n	8001256 <HAL_RCC_OscConfig+0x37e>
 8001278:	e014      	b.n	80012a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fa89 	bl	8000790 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fa85 	bl	8000790 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e09b      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ee      	bne.n	8001282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a3b      	ldr	r2, [pc, #236]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d061      	beq.n	8001390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d146      	bne.n	8001362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fa59 	bl	8000790 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fa55 	bl	8000790 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e06d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d108      	bne.n	800131c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4921      	ldr	r1, [pc, #132]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a19      	ldr	r1, [r3, #32]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	430b      	orrs	r3, r1
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fa29 	bl	8000790 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fa25 	bl	8000790 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e03d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x46a>
 8001360:	e035      	b.n	80013ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fa12 	bl	8000790 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fa0e 	bl	8000790 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e026      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x498>
 800138e:	e01e      	b.n	80013ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e019      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
 800139c:	40021000 	.word	0x40021000
 80013a0:	40007000 	.word	0x40007000
 80013a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x500>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0d0      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d910      	bls.n	8001420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0207 	bic.w	r2, r3, #7
 8001406:	4965      	ldr	r1, [pc, #404]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800145a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d040      	beq.n	80014fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e073      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e06b      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f023 0203 	bic.w	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4936      	ldr	r1, [pc, #216]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f960 	bl	8000790 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff f95c 	bl	8000790 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e053      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1eb      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d210      	bcs.n	800152c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4922      	ldr	r1, [pc, #136]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f821 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1d0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f8be 	bl	800070c <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	0800310c 	.word	0x0800310c
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x30>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x36>
 80015de:	e027      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	e027      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	0c5b      	lsrs	r3, r3, #17
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 8001612:	fb03 f202 	mul.w	r2, r3, r2
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e004      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	613b      	str	r3, [r7, #16]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	693b      	ldr	r3, [r7, #16]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	08003124 	.word	0x08003124
 8001650:	08003134 	.word	0x08003134
 8001654:	003d0900 	.word	0x003d0900

08001658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_RCC_GetHCLKFreq+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000000 	.word	0x20000000

0800166c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001670:	f7ff fff2 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 8001674:	4602      	mov	r2, r0
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	4903      	ldr	r1, [pc, #12]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001682:	5ccb      	ldrb	r3, [r1, r3]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000
 8001690:	0800311c 	.word	0x0800311c

08001694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001698:	f7ff ffde 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 800169c:	4602      	mov	r2, r0
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0adb      	lsrs	r3, r3, #11
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	4903      	ldr	r1, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	0800311c 	.word	0x0800311c

080016bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <RCC_Delay+0x34>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <RCC_Delay+0x38>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0a5b      	lsrs	r3, r3, #9
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016d8:	bf00      	nop
  }
  while (Delay --);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f9      	bne.n	80016d8 <RCC_Delay+0x1c>
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000000 	.word	0x20000000
 80016f4:	10624dd3 	.word	0x10624dd3

080016f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e041      	b.n	800178e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7fe feba 	bl	8000498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f000 fb44 	bl	8001dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e041      	b.n	800182c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f839 	bl	8001834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3304      	adds	r3, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4610      	mov	r0, r2
 80017d6:	f000 faf5 	bl	8001dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b02      	cmp	r3, #2
 800185a:	d122      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d11b      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0202 	mvn.w	r2, #2
 8001872:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fa80 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 800188e:	e005      	b.n	800189c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fa73 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fa82 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d122      	bne.n	80018f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d11b      	bne.n	80018f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f06f 0204 	mvn.w	r2, #4
 80018c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fa56 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 80018e2:	e005      	b.n	80018f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fa49 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fa58 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b08      	cmp	r3, #8
 8001902:	d122      	bne.n	800194a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11b      	bne.n	800194a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f06f 0208 	mvn.w	r2, #8
 800191a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2204      	movs	r2, #4
 8001920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fa2c 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 8001936:	e005      	b.n	8001944 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fa1f 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fa2e 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b10      	cmp	r3, #16
 8001956:	d122      	bne.n	800199e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d11b      	bne.n	800199e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f06f 0210 	mvn.w	r2, #16
 800196e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2208      	movs	r2, #8
 8001974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fa02 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 800198a:	e005      	b.n	8001998 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f9f5 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fa04 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10e      	bne.n	80019ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f06f 0201 	mvn.w	r2, #1
 80019c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f9d0 	bl	8001d6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	2b80      	cmp	r3, #128	; 0x80
 80019d6:	d10e      	bne.n	80019f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b80      	cmp	r3, #128	; 0x80
 80019e4:	d107      	bne.n	80019f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fd1f 	bl	8002434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a00:	2b40      	cmp	r3, #64	; 0x40
 8001a02:	d10e      	bne.n	8001a22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d107      	bne.n	8001a22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f9c8 	bl	8001db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d10e      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d107      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f06f 0220 	mvn.w	r2, #32
 8001a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fcea 	bl	8002422 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e0ae      	b.n	8001bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	f200 809f 	bhi.w	8001bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a86:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001ac1 	.word	0x08001ac1
 8001a90:	08001bc5 	.word	0x08001bc5
 8001a94:	08001bc5 	.word	0x08001bc5
 8001a98:	08001bc5 	.word	0x08001bc5
 8001a9c:	08001b01 	.word	0x08001b01
 8001aa0:	08001bc5 	.word	0x08001bc5
 8001aa4:	08001bc5 	.word	0x08001bc5
 8001aa8:	08001bc5 	.word	0x08001bc5
 8001aac:	08001b43 	.word	0x08001b43
 8001ab0:	08001bc5 	.word	0x08001bc5
 8001ab4:	08001bc5 	.word	0x08001bc5
 8001ab8:	08001bc5 	.word	0x08001bc5
 8001abc:	08001b83 	.word	0x08001b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f9de 	bl	8001e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0208 	orr.w	r2, r2, #8
 8001ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0204 	bic.w	r2, r2, #4
 8001aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6999      	ldr	r1, [r3, #24]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	619a      	str	r2, [r3, #24]
      break;
 8001afe:	e064      	b.n	8001bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fa24 	bl	8001f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6999      	ldr	r1, [r3, #24]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	021a      	lsls	r2, r3, #8
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	619a      	str	r2, [r3, #24]
      break;
 8001b40:	e043      	b.n	8001bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fa6d 	bl	8002028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0208 	orr.w	r2, r2, #8
 8001b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0204 	bic.w	r2, r2, #4
 8001b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69d9      	ldr	r1, [r3, #28]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	61da      	str	r2, [r3, #28]
      break;
 8001b80:	e023      	b.n	8001bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fab7 	bl	80020fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69d9      	ldr	r1, [r3, #28]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	021a      	lsls	r2, r3, #8
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	61da      	str	r2, [r3, #28]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e0b4      	b.n	8001d62 <HAL_TIM_ConfigClockSource+0x186>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c30:	d03e      	beq.n	8001cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8001c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c36:	f200 8087 	bhi.w	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3e:	f000 8086 	beq.w	8001d4e <HAL_TIM_ConfigClockSource+0x172>
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c46:	d87f      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c48:	2b70      	cmp	r3, #112	; 0x70
 8001c4a:	d01a      	beq.n	8001c82 <HAL_TIM_ConfigClockSource+0xa6>
 8001c4c:	2b70      	cmp	r3, #112	; 0x70
 8001c4e:	d87b      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c50:	2b60      	cmp	r3, #96	; 0x60
 8001c52:	d050      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8001c54:	2b60      	cmp	r3, #96	; 0x60
 8001c56:	d877      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c58:	2b50      	cmp	r3, #80	; 0x50
 8001c5a:	d03c      	beq.n	8001cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8001c5c:	2b50      	cmp	r3, #80	; 0x50
 8001c5e:	d873      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d058      	beq.n	8001d16 <HAL_TIM_ConfigClockSource+0x13a>
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d86f      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c68:	2b30      	cmp	r3, #48	; 0x30
 8001c6a:	d064      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x15a>
 8001c6c:	2b30      	cmp	r3, #48	; 0x30
 8001c6e:	d86b      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d060      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x15a>
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d867      	bhi.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d05c      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x15a>
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d05a      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x15a>
 8001c80:	e062      	b.n	8001d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c92:	f000 faf8 	bl	8002286 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	609a      	str	r2, [r3, #8]
      break;
 8001cae:	e04f      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cc0:	f000 fae1 	bl	8002286 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cd2:	609a      	str	r2, [r3, #8]
      break;
 8001cd4:	e03c      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f000 fa58 	bl	8002198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2150      	movs	r1, #80	; 0x50
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 faaf 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 8001cf4:	e02c      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d02:	461a      	mov	r2, r3
 8001d04:	f000 fa76 	bl	80021f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2160      	movs	r1, #96	; 0x60
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fa9f 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 8001d14:	e01c      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d22:	461a      	mov	r2, r3
 8001d24:	f000 fa38 	bl	8002198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2140      	movs	r1, #64	; 0x40
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fa8f 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 8001d34:	e00c      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f000 fa86 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 8001d46:	e003      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d4c:	e000      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <TIM_Base_SetConfig+0xb8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00b      	beq.n	8001df4 <TIM_Base_SetConfig+0x30>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de2:	d007      	beq.n	8001df4 <TIM_Base_SetConfig+0x30>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <TIM_Base_SetConfig+0xbc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0x30>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <TIM_Base_SetConfig+0xc0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <TIM_Base_SetConfig+0xb8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00b      	beq.n	8001e26 <TIM_Base_SetConfig+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e14:	d007      	beq.n	8001e26 <TIM_Base_SetConfig+0x62>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <TIM_Base_SetConfig+0xbc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d003      	beq.n	8001e26 <TIM_Base_SetConfig+0x62>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <TIM_Base_SetConfig+0xc0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d108      	bne.n	8001e38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <TIM_Base_SetConfig+0xb8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d103      	bne.n	8001e6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	615a      	str	r2, [r3, #20]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800

08001e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f023 0201 	bic.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f023 0302 	bic.w	r3, r3, #2
 8001ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <TIM_OC1_SetConfig+0xc8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10c      	bne.n	8001efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0308 	bic.w	r3, r3, #8
 8001eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <TIM_OC1_SetConfig+0xc8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	621a      	str	r2, [r3, #32]
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40012c00 	.word	0x40012c00

08001f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f023 0210 	bic.w	r2, r3, #16
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f023 0320 	bic.w	r3, r3, #32
 8001f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <TIM_OC2_SetConfig+0xd0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10d      	bne.n	8001fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <TIM_OC2_SetConfig+0xd0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d113      	bne.n	8002000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	621a      	str	r2, [r3, #32]
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012c00 	.word	0x40012c00

08002028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <TIM_OC3_SetConfig+0xd0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10d      	bne.n	80020a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800208c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <TIM_OC3_SetConfig+0xd0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d113      	bne.n	80020d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	621a      	str	r2, [r3, #32]
}
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40012c00 	.word	0x40012c00

080020fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <TIM_OC4_SetConfig+0x98>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d109      	bne.n	8002170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	621a      	str	r2, [r3, #32]
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40012c00 	.word	0x40012c00

08002198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f023 0201 	bic.w	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 030a 	bic.w	r3, r3, #10
 80021d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	621a      	str	r2, [r3, #32]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f023 0210 	bic.w	r2, r3, #16
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800221e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	031b      	lsls	r3, r3, #12
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002230:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	621a      	str	r2, [r3, #32]
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	f043 0307 	orr.w	r3, r3, #7
 8002274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002286:	b480      	push	{r7}
 8002288:	b087      	sub	sp, #28
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e046      	b.n	800236a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d009      	beq.n	800233e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a10      	ldr	r2, [pc, #64]	; (800237c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10c      	bne.n	8002358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4313      	orrs	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800

08002380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002398:	2302      	movs	r3, #2
 800239a:	e03d      	b.n	8002418 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e042      	b.n	80024de <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d106      	bne.n	8002472 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7fe f86d 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2224      	movs	r2, #36	; 0x24
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002488:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fd70 	bl	8002f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800249e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08a      	sub	sp, #40	; 0x28
 80024ea:	af02      	add	r7, sp, #8
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	d16d      	bne.n	80025e2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Transmit+0x2c>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e066      	b.n	80025e4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002524:	f7fe f934 	bl	8000790 <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d108      	bne.n	8002552 <HAL_UART_Transmit+0x6c>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	e003      	b.n	800255a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800255a:	e02a      	b.n	80025b2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2200      	movs	r2, #0
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 faf8 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e036      	b.n	80025e4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800258a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3302      	adds	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e007      	b.n	80025a4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1cf      	bne.n	800255c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fac8 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e006      	b.n	80025e4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0ba      	sub	sp, #232	; 0xe8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800261e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800262a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_UART_IRQHandler+0x66>
 800263e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fbd1 	bl	8002df2 <UART_Receive_IT>
      return;
 8002650:	e25b      	b.n	8002b0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80de 	beq.w	8002818 <HAL_UART_IRQHandler+0x22c>
 800265c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80d1 	beq.w	8002818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_UART_IRQHandler+0xae>
 8002682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_UART_IRQHandler+0xd2>
 80026a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_UART_IRQHandler+0xf6>
 80026ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_UART_IRQHandler+0x126>
 80026ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f043 0208 	orr.w	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 81f2 	beq.w	8002b00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800271c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_UART_IRQHandler+0x14e>
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fb5c 	bl	8002df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_UART_IRQHandler+0x17a>
 800275e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04f      	beq.n	8002806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa66 	bl	8002c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d041      	beq.n	80027fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027b6:	e841 2300 	strex	r3, r2, [r1]
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1d9      	bne.n	800277a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d013      	beq.n	80027f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	4a7e      	ldr	r2, [pc, #504]	; (80029cc <HAL_UART_IRQHandler+0x3e0>)
 80027d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe f94e 	bl	8000a7c <HAL_DMA_Abort_IT>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027f0:	4610      	mov	r0, r2
 80027f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f4:	e00e      	b.n	8002814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f99c 	bl	8002b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	e00a      	b.n	8002814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f998 	bl	8002b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	e006      	b.n	8002814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f994 	bl	8002b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002812:	e175      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	bf00      	nop
    return;
 8002816:	e173      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 814f 	bne.w	8002ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8148 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8141 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80b6 	beq.w	80029d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8145 	beq.w	8002b04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800287e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002882:	429a      	cmp	r2, r3
 8002884:	f080 813e 	bcs.w	8002b04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800288e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b20      	cmp	r3, #32
 8002898:	f000 8088 	beq.w	80029ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028aa:	e853 3f00 	ldrex	r3, [r3]
 80028ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028d8:	e841 2300 	strex	r3, r2, [r1]
 80028dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1d9      	bne.n	800289c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3314      	adds	r3, #20
 8002908:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800290c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002910:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800291e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e1      	bne.n	80028e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002948:	66fa      	str	r2, [r7, #108]	; 0x6c
 800294a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800294e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002950:	e841 2300 	strex	r3, r2, [r1]
 8002954:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e3      	bne.n	8002924 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800297a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297c:	f023 0310 	bic.w	r3, r3, #16
 8002980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800298e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002990:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e3      	bne.n	800296a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe f82d 	bl	8000a06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8bf 	bl	8002b46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029c8:	e09c      	b.n	8002b04 <HAL_UART_IRQHandler+0x518>
 80029ca:	bf00      	nop
 80029cc:	08002cfd 	.word	0x08002cfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 808e 	beq.w	8002b08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80029ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8089 	beq.w	8002b08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e3      	bne.n	80029f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3314      	adds	r3, #20
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a52:	633a      	str	r2, [r7, #48]	; 0x30
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e3      	bne.n	8002a2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0310 	bic.w	r3, r3, #16
 8002a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a98:	61fa      	str	r2, [r7, #28]
 8002a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e3      	bne.n	8002a74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f844 	bl	8002b46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002abe:	e023      	b.n	8002b08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x4f4>
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f923 	bl	8002d24 <UART_Transmit_IT>
    return;
 8002ade:	e014      	b.n	8002b0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <HAL_UART_IRQHandler+0x51e>
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f962 	bl	8002dc2 <UART_EndTransmit_IT>
    return;
 8002afe:	e004      	b.n	8002b0a <HAL_UART_IRQHandler+0x51e>
    return;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8002b08:	bf00      	nop
  }
}
 8002b0a:	37e8      	adds	r7, #232	; 0xe8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6c:	e050      	b.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d04c      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7c:	f7fd fe08 	bl	8000790 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d241      	bcs.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bac:	637a      	str	r2, [r7, #52]	; 0x34
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be0:	623a      	str	r2, [r7, #32]
 8002be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	69f9      	ldr	r1, [r7, #28]
 8002be6:	6a3a      	ldr	r2, [r7, #32]
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e00f      	b.n	8002c30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d09f      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3740      	adds	r7, #64	; 0x40
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b095      	sub	sp, #84	; 0x54
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c60:	643a      	str	r2, [r7, #64]	; 0x40
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e5      	bne.n	8002c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d119      	bne.n	8002ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f023 0310 	bic.w	r3, r3, #16
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cd0:	61ba      	str	r2, [r7, #24]
 8002cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6979      	ldr	r1, [r7, #20]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cf2:	bf00      	nop
 8002cf4:	3754      	adds	r7, #84	; 0x54
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff ff0c 	bl	8002b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b21      	cmp	r3, #33	; 0x21
 8002d36:	d13e      	bne.n	8002db6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d40:	d114      	bne.n	8002d6c <UART_Transmit_IT+0x48>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d110      	bne.n	8002d6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]
 8002d6a:	e008      	b.n	8002d7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	1c59      	adds	r1, r3, #1
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6211      	str	r1, [r2, #32]
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fe94 	bl	8002b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b08c      	sub	sp, #48	; 0x30
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b22      	cmp	r3, #34	; 0x22
 8002e04:	f040 80ae 	bne.w	8002f64 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e10:	d117      	bne.n	8002e42 <UART_Receive_IT+0x50>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	1c9a      	adds	r2, r3, #2
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e40:	e026      	b.n	8002e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d007      	beq.n	8002e66 <UART_Receive_IT+0x74>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <UART_Receive_IT+0x82>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e008      	b.n	8002e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d15d      	bne.n	8002f60 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0220 	bic.w	r2, r2, #32
 8002eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d135      	bne.n	8002f56 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	613b      	str	r3, [r7, #16]
   return(result);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f023 0310 	bic.w	r3, r3, #16
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	623a      	str	r2, [r7, #32]
 8002f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	69f9      	ldr	r1, [r7, #28]
 8002f16:	6a3a      	ldr	r2, [r7, #32]
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e5      	bne.n	8002ef0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d10a      	bne.n	8002f48 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fdf9 	bl	8002b46 <HAL_UARTEx_RxEventCallback>
 8002f54:	e002      	b.n	8002f5c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fde3 	bl	8002b22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e002      	b.n	8002f66 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3730      	adds	r7, #48	; 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <UART_SetConfig+0x114>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d103      	bne.n	8002fe0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f7fe fb5c 	bl	8001694 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	e002      	b.n	8002fe6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7fe fb44 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 8002fe4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <UART_SetConfig+0x118>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	0119      	lsls	r1, r3, #4
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <UART_SetConfig+0x118>)
 800301e:	fba3 0302 	umull	r0, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2064      	movs	r0, #100	; 0x64
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x118>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800303c:	4419      	add	r1, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fbb2 f2f3 	udiv	r2, r2, r3
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <UART_SetConfig+0x118>)
 8003056:	fba3 0302 	umull	r0, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2064      	movs	r0, #100	; 0x64
 800305e:	fb00 f303 	mul.w	r3, r0, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	3332      	adds	r3, #50	; 0x32
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <UART_SetConfig+0x118>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	440a      	add	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40013800 	.word	0x40013800
 8003088:	51eb851f 	.word	0x51eb851f

0800308c <memset>:
 800308c:	4603      	mov	r3, r0
 800308e:	4402      	add	r2, r0
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	f803 1b01 	strb.w	r1, [r3], #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	2600      	movs	r6, #0
 80030a0:	4d0c      	ldr	r5, [pc, #48]	; (80030d4 <__libc_init_array+0x38>)
 80030a2:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	f000 f81a 	bl	80030e4 <_init>
 80030b0:	2600      	movs	r6, #0
 80030b2:	4d0a      	ldr	r5, [pc, #40]	; (80030dc <__libc_init_array+0x40>)
 80030b4:	4c0a      	ldr	r4, [pc, #40]	; (80030e0 <__libc_init_array+0x44>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	08003138 	.word	0x08003138
 80030d8:	08003138 	.word	0x08003138
 80030dc:	08003138 	.word	0x08003138
 80030e0:	0800313c 	.word	0x0800313c

080030e4 <_init>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	bf00      	nop
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr

080030f0 <_fini>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr
