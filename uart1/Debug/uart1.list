
uart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b1c  08003b1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b1c  08003b1c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b1c  08003b1c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  08003b80  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003b80  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b10  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a5f  00000000  00000000  00028bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000603  00000000  00000000  0002ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c87  00000000  00000000  0002b41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2c8  00000000  00000000  000420a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000853f0  00000000  00000000  0004c36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023d0  00000000  00000000  000d175c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d3b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aa0 	.word	0x08003aa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003aa0 	.word	0x08003aa0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fae9 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f83f 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f923 	bl	80003b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f903 	bl	8000378 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8d7 	bl	8000324 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000176:	f000 f887 	bl	8000288 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t data[] = "VO KHA";
  //char a[] = "MESS1\0NAm";
  uint32_t count = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, 2);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2202      	movs	r2, #2
 8000182:	4619      	mov	r1, r3
 8000184:	4814      	ldr	r0, [pc, #80]	; (80001d8 <main+0x7c>)
 8000186:	f000 fc35 	bl	80009f4 <HAL_ADC_Start_DMA>
	  HAL_Delay(10);
 800018a:	200a      	movs	r0, #10
 800018c:	f000 fb36 	bl	80007fc <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 8000190:	4811      	ldr	r0, [pc, #68]	; (80001d8 <main+0x7c>)
 8000192:	f000 fd0d 	bl	8000bb0 <HAL_ADC_Stop_DMA>
	  snprintf(buff,sizeof(buff),"%lu", data[0]);
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	f107 0008 	add.w	r0, r7, #8
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <main+0x80>)
 800019e:	2114      	movs	r1, #20
 80001a0:	f002 ffb8 	bl	8003114 <sniprintf>
	  //strcat(buff,a);
	  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), 10);
 80001a4:	f107 0308 	add.w	r3, r7, #8
 80001a8:	4618      	mov	r0, r3
 80001aa:	f7ff ffcf 	bl	800014c <strlen>
 80001ae:	4603      	mov	r3, r0
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	f107 0108 	add.w	r1, r7, #8
 80001b6:	230a      	movs	r3, #10
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <main+0x84>)
 80001ba:	f002 f9d7 	bl	800256c <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1,data, sizeof(data), 10);
	  HAL_Delay(1000);
 80001be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c2:	f000 fb1b 	bl	80007fc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <main+0x88>)
 80001cc:	f001 fc9e 	bl	8001b0c <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
		  }

	  }
		*/
	  count++;
 80001d0:	69fb      	ldr	r3, [r7, #28]
 80001d2:	3301      	adds	r3, #1
 80001d4:	61fb      	str	r3, [r7, #28]
  {
 80001d6:	e7d2      	b.n	800017e <main+0x22>
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003ab8 	.word	0x08003ab8
 80001e0:	200000ec 	.word	0x200000ec
 80001e4:	40011000 	.word	0x40011000

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b094      	sub	sp, #80	; 0x50
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 ffc0 	bl	800317c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2310      	movs	r3, #16
 8000222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000224:	2300      	movs	r3, #0
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fc87 	bl	8001b40 <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000238:	f000 f8fc 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fef4 	bl	8002044 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000262:	f000 f8e7 	bl	8000434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000266:	2302      	movs	r3, #2
 8000268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f002 f875 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800027c:	f000 f8da 	bl	8000434 <Error_Handler>
  }
}
 8000280:	bf00      	nop
 8000282:	3750      	adds	r7, #80	; 0x50
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000298:	4b20      	ldr	r3, [pc, #128]	; (800031c <MX_ADC1_Init+0x94>)
 800029a:	4a21      	ldr	r2, [pc, #132]	; (8000320 <MX_ADC1_Init+0x98>)
 800029c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800029e:	4b1f      	ldr	r3, [pc, #124]	; (800031c <MX_ADC1_Init+0x94>)
 80002a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <MX_ADC1_Init+0x94>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <MX_ADC1_Init+0x94>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <MX_ADC1_Init+0x94>)
 80002b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ba:	4b18      	ldr	r3, [pc, #96]	; (800031c <MX_ADC1_Init+0x94>)
 80002bc:	2200      	movs	r2, #0
 80002be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <MX_ADC1_Init+0x94>)
 80002c2:	2202      	movs	r2, #2
 80002c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c6:	4815      	ldr	r0, [pc, #84]	; (800031c <MX_ADC1_Init+0x94>)
 80002c8:	f000 fabc 	bl	8000844 <HAL_ADC_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002d2:	f000 f8af 	bl	8000434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002da:	2301      	movs	r3, #1
 80002dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	; (800031c <MX_ADC1_Init+0x94>)
 80002e8:	f000 fcca 	bl	8000c80 <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002f2:	f000 f89f 	bl	8000434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002f6:	2301      	movs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <MX_ADC1_Init+0x94>)
 8000304:	f000 fcbc 	bl	8000c80 <HAL_ADC_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800030e:	f000 f891 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000078 	.word	0x20000078
 8000320:	40012400 	.word	0x40012400

08000324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <MX_USART1_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800035c:	f002 f8b6 	bl	80024cc <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f865 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000ec 	.word	0x200000ec
 8000374:	40013800 	.word	0x40013800

08000378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_DMA_Init+0x38>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <MX_DMA_Init+0x38>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_DMA_Init+0x38>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	200b      	movs	r0, #11
 800039c:	f000 ff41 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003a0:	200b      	movs	r0, #11
 80003a2:	f000 ff5a 	bl	800125a <HAL_NVIC_EnableIRQ>

}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x78>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x78>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_GPIO_Init+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <MX_GPIO_Init+0x78>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_GPIO_Init+0x78>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_GPIO_Init+0x7c>)
 8000400:	f001 fb6c 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0x7c>)
 800041e:	f001 f9d9 	bl	80017d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40011000 	.word	0x40011000

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <HAL_MspInit+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <HAL_MspInit+0x40>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_MspInit+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <HAL_MspInit+0x40>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <HAL_MspInit+0x40>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_MspInit+0x40>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a28      	ldr	r2, [pc, #160]	; (8000540 <HAL_ADC_MspInit+0xbc>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d149      	bne.n	8000538 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004a4:	4b27      	ldr	r3, [pc, #156]	; (8000544 <HAL_ADC_MspInit+0xc0>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a26      	ldr	r2, [pc, #152]	; (8000544 <HAL_ADC_MspInit+0xc0>)
 80004aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <HAL_ADC_MspInit+0xc0>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b21      	ldr	r3, [pc, #132]	; (8000544 <HAL_ADC_MspInit+0xc0>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a20      	ldr	r2, [pc, #128]	; (8000544 <HAL_ADC_MspInit+0xc0>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <HAL_ADC_MspInit+0xc0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004d4:	2303      	movs	r3, #3
 80004d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d8:	2303      	movs	r3, #3
 80004da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	4819      	ldr	r0, [pc, #100]	; (8000548 <HAL_ADC_MspInit+0xc4>)
 80004e4:	f001 f976 	bl	80017d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_ADC_MspInit+0xc8>)
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_ADC_MspInit+0xcc>)
 80004ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_ADC_MspInit+0xc8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_ADC_MspInit+0xc8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_ADC_MspInit+0xc8>)
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_ADC_MspInit+0xc8>)
 8000502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000506:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <HAL_ADC_MspInit+0xc8>)
 800050a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800050e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_ADC_MspInit+0xc8>)
 8000512:	2220      	movs	r2, #32
 8000514:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <HAL_ADC_MspInit+0xc8>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_ADC_MspInit+0xc8>)
 800051e:	f000 feb7 	bl	8001290 <HAL_DMA_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000528:	f7ff ff84 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_ADC_MspInit+0xc8>)
 8000530:	621a      	str	r2, [r3, #32]
 8000532:	4a06      	ldr	r2, [pc, #24]	; (800054c <HAL_ADC_MspInit+0xc8>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40012400 	.word	0x40012400
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800
 800054c:	200000a8 	.word	0x200000a8
 8000550:	40020008 	.word	0x40020008

08000554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d139      	bne.n	80005e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	480f      	ldr	r0, [pc, #60]	; (80005f8 <HAL_UART_MspInit+0xa4>)
 80005ba:	f001 f90b 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <HAL_UART_MspInit+0xa4>)
 80005d4:	f001 f8fe 	bl	80017d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2101      	movs	r1, #1
 80005dc:	2025      	movs	r0, #37	; 0x25
 80005de:	f000 fe20 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005e2:	2025      	movs	r0, #37	; 0x25
 80005e4:	f000 fe39 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40013800 	.word	0x40013800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f8bf 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <DMA1_Channel1_IRQHandler+0x10>)
 8000652:	f000 ff8b 	bl	800156c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000a8 	.word	0x200000a8

08000660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <USART1_IRQHandler+0x10>)
 8000666:	f002 f805 	bl	8002674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000ec 	.word	0x200000ec

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f002 fd72 	bl	800318c <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20005000 	.word	0x20005000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	20000134 	.word	0x20000134
 80006dc:	20000288 	.word	0x20000288

080006e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff fff8 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006f2:	490c      	ldr	r1, [pc, #48]	; (8000724 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000708:	4c09      	ldr	r4, [pc, #36]	; (8000730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f002 fd3f 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fd1f 	bl	800015c <main>
  bx lr
 800071e:	4770      	bx	lr
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000728:	08003b24 	.word	0x08003b24
  ldr r2, =_sbss
 800072c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000730:	20000284 	.word	0x20000284

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_Init+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_Init+0x28>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 fd5f 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074e:	200f      	movs	r0, #15
 8000750:	f000 f808 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff fe74 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x54>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fd77 	bl	8001276 <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e00e      	b.n	80007b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d80a      	bhi.n	80007ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f000 fd3f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_InitTick+0x5c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000138 	.word	0x20000138

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000138 	.word	0x20000138

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff0 	bl	80007e8 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffe0 	bl	80007e8 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e0be      	b.n	80009e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	2b00      	cmp	r3, #0
 8000872:	d109      	bne.n	8000888 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fdfe 	bl	8000484 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 fb4b 	bl	8000f24 <ADC_ConversionStop_Disable>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 8099 	bne.w	80009d2 <HAL_ADC_Init+0x18e>
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8095 	bne.w	80009d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008b0:	f023 0302 	bic.w	r3, r3, #2
 80008b4:	f043 0202 	orr.w	r2, r3, #2
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008dc:	d003      	beq.n	80008e6 <HAL_ADC_Init+0xa2>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d102      	bne.n	80008ec <HAL_ADC_Init+0xa8>
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	e000      	b.n	80008ee <HAL_ADC_Init+0xaa>
 80008ec:	2300      	movs	r3, #0
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7d1b      	ldrb	r3, [r3, #20]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d119      	bne.n	8000930 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7b1b      	ldrb	r3, [r3, #12]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	3b01      	subs	r3, #1
 800090a:	035a      	lsls	r2, r3, #13
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	e00b      	b.n	8000930 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f043 0220 	orr.w	r2, r3, #32
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	430a      	orrs	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <HAL_ADC_Init+0x1a8>)
 800094c:	4013      	ands	r3, r2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	6812      	ldr	r2, [r2, #0]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	430b      	orrs	r3, r1
 8000956:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000960:	d003      	beq.n	800096a <HAL_ADC_Init+0x126>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d104      	bne.n	8000974 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	3b01      	subs	r3, #1
 8000970:	051b      	lsls	r3, r3, #20
 8000972:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	430a      	orrs	r2, r1
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_ADC_Init+0x1ac>)
 8000990:	4013      	ands	r3, r2
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	429a      	cmp	r2, r3
 8000996:	d10b      	bne.n	80009b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	f023 0303 	bic.w	r3, r3, #3
 80009a6:	f043 0201 	orr.w	r2, r3, #1
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ae:	e018      	b.n	80009e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f023 0312 	bic.w	r3, r3, #18
 80009b8:	f043 0210 	orr.w	r2, r3, #16
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f043 0201 	orr.w	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d0:	e007      	b.n	80009e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f043 0210 	orr.w	r2, r3, #16
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	ffe1f7fd 	.word	0xffe1f7fd
 80009f0:	ff1f0efe 	.word	0xff1f0efe

080009f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a64      	ldr	r2, [pc, #400]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d004      	beq.n	8000a18 <HAL_ADC_Start_DMA+0x24>
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a63      	ldr	r2, [pc, #396]	; (8000ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d106      	bne.n	8000a26 <HAL_ADC_Start_DMA+0x32>
 8000a18:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f040 80b3 	bne.w	8000b8c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d101      	bne.n	8000a34 <HAL_ADC_Start_DMA+0x40>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e0ae      	b.n	8000b92 <HAL_ADC_Start_DMA+0x19e>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 fa17 	bl	8000e70 <ADC_Enable>
 8000a42:	4603      	mov	r3, r0
 8000a44:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f040 809a 	bne.w	8000b82 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a4e      	ldr	r2, [pc, #312]	; (8000ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d105      	bne.n	8000a78 <HAL_ADC_Start_DMA+0x84>
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d115      	bne.n	8000aa4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d026      	beq.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa2:	e01d      	b.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a39      	ldr	r2, [pc, #228]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d004      	beq.n	8000ac4 <HAL_ADC_Start_DMA+0xd0>
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a38      	ldr	r2, [pc, #224]	; (8000ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d10d      	bne.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <HAL_ADC_Start_DMA+0x1a8>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ad8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	f023 0206 	bic.w	r2, r3, #6
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af8:	e002      	b.n	8000b00 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_ADC_Start_DMA+0x1b0>)
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <HAL_ADC_Start_DMA+0x1b4>)
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_ADC_Start_DMA+0x1b8>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f06f 0202 	mvn.w	r2, #2
 8000b28:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b38:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6a18      	ldr	r0, [r3, #32]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	334c      	adds	r3, #76	; 0x4c
 8000b44:	4619      	mov	r1, r3
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f000 fbfb 	bl	8001344 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b5c:	d108      	bne.n	8000b70 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b6c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b6e:	e00f      	b.n	8000b90 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b7e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b80:	e006      	b.n	8000b90 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000b8a:	e001      	b.n	8000b90 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	40012800 	.word	0x40012800
 8000ba4:	08000fa7 	.word	0x08000fa7
 8000ba8:	08001023 	.word	0x08001023
 8000bac:	0800103f 	.word	0x0800103f

08000bb0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d101      	bne.n	8000bca <HAL_ADC_Stop_DMA+0x1a>
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	e03a      	b.n	8000c40 <HAL_ADC_Stop_DMA+0x90>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f9a6 	bl	8000f24 <ADC_ConversionStop_Disable>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d129      	bne.n	8000c36 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bf0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d11a      	bne.n	8000c36 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fbfd 	bl	8001404 <HAL_DMA_Abort>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10a      	bne.n	8000c2a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1c:	f023 0301 	bic.w	r3, r3, #1
 8000c20:	f043 0201 	orr.w	r2, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
 8000c28:	e005      	b.n	8000c36 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d101      	bne.n	8000ca0 <HAL_ADC_ConfigChannel+0x20>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e0dc      	b.n	8000e5a <HAL_ADC_ConfigChannel+0x1da>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b06      	cmp	r3, #6
 8000cae:	d81c      	bhi.n	8000cea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3b05      	subs	r3, #5
 8000cc2:	221f      	movs	r2, #31
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4019      	ands	r1, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b05      	subs	r3, #5
 8000cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce8:	e03c      	b.n	8000d64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b0c      	cmp	r3, #12
 8000cf0:	d81c      	bhi.n	8000d2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	3b23      	subs	r3, #35	; 0x23
 8000d04:	221f      	movs	r2, #31
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4019      	ands	r1, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3b23      	subs	r3, #35	; 0x23
 8000d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
 8000d2a:	e01b      	b.n	8000d64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b41      	subs	r3, #65	; 0x41
 8000d3e:	221f      	movs	r2, #31
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4019      	ands	r1, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3b41      	subs	r3, #65	; 0x41
 8000d58:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	d91c      	bls.n	8000da6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68d9      	ldr	r1, [r3, #12]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b1e      	subs	r3, #30
 8000d7e:	2207      	movs	r2, #7
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4019      	ands	r1, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6898      	ldr	r0, [r3, #8]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	3b1e      	subs	r3, #30
 8000d98:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	e019      	b.n	8000dda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6919      	ldr	r1, [r3, #16]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	2207      	movs	r2, #7
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6898      	ldr	r0, [r3, #8]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	d003      	beq.n	8000dea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000de6:	2b11      	cmp	r3, #17
 8000de8:	d132      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_ADC_ConfigChannel+0x1e4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d125      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d126      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b10      	cmp	r3, #16
 8000e18:	d11a      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_ADC_ConfigChannel+0x1ec>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	0c9a      	lsrs	r2, r3, #18
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e30:	e002      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f9      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x1b2>
 8000e3e:	e007      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	f043 0220 	orr.w	r2, r3, #32
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40012400 	.word	0x40012400
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	431bde83 	.word	0x431bde83

08000e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d040      	beq.n	8000f10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0201 	orr.w	r2, r2, #1
 8000e9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <ADC_Enable+0xac>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <ADC_Enable+0xb0>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0c9b      	lsrs	r3, r3, #18
 8000eaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eac:	e002      	b.n	8000eb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eba:	f7ff fc95 	bl	80007e8 <HAL_GetTick>
 8000ebe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ec0:	e01f      	b.n	8000f02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ec2:	f7ff fc91 	bl	80007e8 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d918      	bls.n	8000f02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d011      	beq.n	8000f02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f043 0210 	orr.w	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e007      	b.n	8000f12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d1d8      	bne.n	8000ec2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	431bde83 	.word	0x431bde83

08000f24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d12e      	bne.n	8000f9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f4e:	f7ff fc4b 	bl	80007e8 <HAL_GetTick>
 8000f52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f54:	e01b      	b.n	8000f8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f56:	f7ff fc47 	bl	80007e8 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d914      	bls.n	8000f8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d10d      	bne.n	8000f8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	f043 0210 	orr.w	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	f043 0201 	orr.w	r2, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e007      	b.n	8000f9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d0dc      	beq.n	8000f56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d127      	bne.n	8001010 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fd6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fda:	d115      	bne.n	8001008 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d111      	bne.n	8001008 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff fe1d 	bl	8000c48 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800100e:	e004      	b.n	800101a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	4798      	blx	r3
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fe12 	bl	8000c5a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	f043 0204 	orr.w	r2, r3, #4
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fe01 	bl	8000c6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4906      	ldr	r1, [pc, #24]	; (800110c <__NVIC_EnableIRQ+0x34>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff90 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff2d 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff42 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff90 	bl	8001164 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5f 	bl	8001110 <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff35 	bl	80010d8 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e043      	b.n	800132e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_DMA_Init+0xa8>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <HAL_DMA_Init+0xac>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	009a      	lsls	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_DMA_Init+0xb0>)
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	bffdfff8 	.word	0xbffdfff8
 800133c:	cccccccd 	.word	0xcccccccd
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_DMA_Start_IT+0x20>
 8001360:	2302      	movs	r3, #2
 8001362:	e04b      	b.n	80013fc <HAL_DMA_Start_IT+0xb8>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d13a      	bne.n	80013ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f9eb 	bl	8001778 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 020e 	orr.w	r2, r2, #14
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	e00f      	b.n	80013dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0204 	bic.w	r2, r2, #4
 80013ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 020a 	orr.w	r2, r2, #10
 80013da:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e005      	b.n	80013fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013f6:	2302      	movs	r3, #2
 80013f8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d008      	beq.n	800142e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2204      	movs	r2, #4
 8001420:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e020      	b.n	8001470 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 020e 	bic.w	r2, r2, #14
 800143c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d005      	beq.n	80014a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2204      	movs	r2, #4
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e051      	b.n	8001544 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 020e 	bic.w	r2, r2, #14
 80014ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_DMA_Abort_IT+0xd4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d029      	beq.n	800151e <HAL_DMA_Abort_IT+0xa2>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <HAL_DMA_Abort_IT+0xd8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_Abort_IT+0x9e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_DMA_Abort_IT+0xdc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01a      	beq.n	8001514 <HAL_DMA_Abort_IT+0x98>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_DMA_Abort_IT+0xe0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d012      	beq.n	800150e <HAL_DMA_Abort_IT+0x92>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_DMA_Abort_IT+0xe4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00a      	beq.n	8001508 <HAL_DMA_Abort_IT+0x8c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_DMA_Abort_IT+0xe8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d102      	bne.n	8001502 <HAL_DMA_Abort_IT+0x86>
 80014fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001500:	e00e      	b.n	8001520 <HAL_DMA_Abort_IT+0xa4>
 8001502:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001506:	e00b      	b.n	8001520 <HAL_DMA_Abort_IT+0xa4>
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	e008      	b.n	8001520 <HAL_DMA_Abort_IT+0xa4>
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	e005      	b.n	8001520 <HAL_DMA_Abort_IT+0xa4>
 8001514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001518:	e002      	b.n	8001520 <HAL_DMA_Abort_IT+0xa4>
 800151a:	2310      	movs	r3, #16
 800151c:	e000      	b.n	8001520 <HAL_DMA_Abort_IT+0xa4>
 800151e:	2301      	movs	r3, #1
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_DMA_Abort_IT+0xec>)
 8001522:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
    } 
  }
  return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020008 	.word	0x40020008
 8001554:	4002001c 	.word	0x4002001c
 8001558:	40020030 	.word	0x40020030
 800155c:	40020044 	.word	0x40020044
 8001560:	40020058 	.word	0x40020058
 8001564:	4002006c 	.word	0x4002006c
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	2204      	movs	r2, #4
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d04f      	beq.n	8001634 <HAL_DMA_IRQHandler+0xc8>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d04a      	beq.n	8001634 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_DMA_IRQHandler+0x1f0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d029      	beq.n	800161a <HAL_DMA_IRQHandler+0xae>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_DMA_IRQHandler+0x1f4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <HAL_DMA_IRQHandler+0xaa>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_DMA_IRQHandler+0x1f8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01a      	beq.n	8001610 <HAL_DMA_IRQHandler+0xa4>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_DMA_IRQHandler+0x1fc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d012      	beq.n	800160a <HAL_DMA_IRQHandler+0x9e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a60      	ldr	r2, [pc, #384]	; (800176c <HAL_DMA_IRQHandler+0x200>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00a      	beq.n	8001604 <HAL_DMA_IRQHandler+0x98>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5f      	ldr	r2, [pc, #380]	; (8001770 <HAL_DMA_IRQHandler+0x204>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d102      	bne.n	80015fe <HAL_DMA_IRQHandler+0x92>
 80015f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fc:	e00e      	b.n	800161c <HAL_DMA_IRQHandler+0xb0>
 80015fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001602:	e00b      	b.n	800161c <HAL_DMA_IRQHandler+0xb0>
 8001604:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001608:	e008      	b.n	800161c <HAL_DMA_IRQHandler+0xb0>
 800160a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800160e:	e005      	b.n	800161c <HAL_DMA_IRQHandler+0xb0>
 8001610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001614:	e002      	b.n	800161c <HAL_DMA_IRQHandler+0xb0>
 8001616:	2340      	movs	r3, #64	; 0x40
 8001618:	e000      	b.n	800161c <HAL_DMA_IRQHandler+0xb0>
 800161a:	2304      	movs	r3, #4
 800161c:	4a55      	ldr	r2, [pc, #340]	; (8001774 <HAL_DMA_IRQHandler+0x208>)
 800161e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8094 	beq.w	8001752 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001632:	e08e      	b.n	8001752 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	2202      	movs	r2, #2
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d056      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x186>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d051      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10b      	bne.n	8001674 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020a 	bic.w	r2, r2, #10
 800166a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a38      	ldr	r2, [pc, #224]	; (800175c <HAL_DMA_IRQHandler+0x1f0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d029      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x166>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a37      	ldr	r2, [pc, #220]	; (8001760 <HAL_DMA_IRQHandler+0x1f4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <HAL_DMA_IRQHandler+0x162>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a35      	ldr	r2, [pc, #212]	; (8001764 <HAL_DMA_IRQHandler+0x1f8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01a      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x15c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a34      	ldr	r2, [pc, #208]	; (8001768 <HAL_DMA_IRQHandler+0x1fc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d012      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x156>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_DMA_IRQHandler+0x200>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00a      	beq.n	80016bc <HAL_DMA_IRQHandler+0x150>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <HAL_DMA_IRQHandler+0x204>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d102      	bne.n	80016b6 <HAL_DMA_IRQHandler+0x14a>
 80016b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b4:	e00e      	b.n	80016d4 <HAL_DMA_IRQHandler+0x168>
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	e00b      	b.n	80016d4 <HAL_DMA_IRQHandler+0x168>
 80016bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c0:	e008      	b.n	80016d4 <HAL_DMA_IRQHandler+0x168>
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	e005      	b.n	80016d4 <HAL_DMA_IRQHandler+0x168>
 80016c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016cc:	e002      	b.n	80016d4 <HAL_DMA_IRQHandler+0x168>
 80016ce:	2320      	movs	r3, #32
 80016d0:	e000      	b.n	80016d4 <HAL_DMA_IRQHandler+0x168>
 80016d2:	2302      	movs	r3, #2
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <HAL_DMA_IRQHandler+0x208>)
 80016d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d034      	beq.n	8001752 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016f0:	e02f      	b.n	8001752 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2208      	movs	r2, #8
 80016f8:	409a      	lsls	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d028      	beq.n	8001754 <HAL_DMA_IRQHandler+0x1e8>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d023      	beq.n	8001754 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 020e 	bic.w	r2, r2, #14
 800171a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
    }
  }
  return;
 8001752:	bf00      	nop
 8001754:	bf00      	nop
}
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40020008 	.word	0x40020008
 8001760:	4002001c 	.word	0x4002001c
 8001764:	40020030 	.word	0x40020030
 8001768:	40020044 	.word	0x40020044
 800176c:	40020058 	.word	0x40020058
 8001770:	4002006c 	.word	0x4002006c
 8001774:	40020000 	.word	0x40020000

08001778 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d108      	bne.n	80017b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017b6:	e007      	b.n	80017c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	60da      	str	r2, [r3, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e6:	e169      	b.n	8001abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e8:	2201      	movs	r2, #1
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8158 	bne.w	8001ab6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a9a      	ldr	r2, [pc, #616]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d05e      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001810:	4a98      	ldr	r2, [pc, #608]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d875      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001816:	4a98      	ldr	r2, [pc, #608]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d058      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 800181c:	4a96      	ldr	r2, [pc, #600]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d86f      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001822:	4a96      	ldr	r2, [pc, #600]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d052      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001828:	4a94      	ldr	r2, [pc, #592]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d869      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800182e:	4a94      	ldr	r2, [pc, #592]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d04c      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001834:	4a92      	ldr	r2, [pc, #584]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d863      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800183a:	4a92      	ldr	r2, [pc, #584]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d046      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001840:	4a90      	ldr	r2, [pc, #576]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d85d      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001846:	2b12      	cmp	r3, #18
 8001848:	d82a      	bhi.n	80018a0 <HAL_GPIO_Init+0xcc>
 800184a:	2b12      	cmp	r3, #18
 800184c:	d859      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <HAL_GPIO_Init+0x80>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018a9 	.word	0x080018a9
 800185c:	080018bb 	.word	0x080018bb
 8001860:	080018fd 	.word	0x080018fd
 8001864:	08001903 	.word	0x08001903
 8001868:	08001903 	.word	0x08001903
 800186c:	08001903 	.word	0x08001903
 8001870:	08001903 	.word	0x08001903
 8001874:	08001903 	.word	0x08001903
 8001878:	08001903 	.word	0x08001903
 800187c:	08001903 	.word	0x08001903
 8001880:	08001903 	.word	0x08001903
 8001884:	08001903 	.word	0x08001903
 8001888:	08001903 	.word	0x08001903
 800188c:	08001903 	.word	0x08001903
 8001890:	08001903 	.word	0x08001903
 8001894:	08001903 	.word	0x08001903
 8001898:	080018b1 	.word	0x080018b1
 800189c:	080018c5 	.word	0x080018c5
 80018a0:	4a79      	ldr	r2, [pc, #484]	; (8001a88 <HAL_GPIO_Init+0x2b4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018a6:	e02c      	b.n	8001902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e029      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	3304      	adds	r3, #4
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e024      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	3308      	adds	r3, #8
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e01f      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	330c      	adds	r3, #12
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e01a      	b.n	8001904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018d6:	2304      	movs	r3, #4
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e013      	b.n	8001904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e4:	2308      	movs	r3, #8
 80018e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	611a      	str	r2, [r3, #16]
          break;
 80018ee:	e009      	b.n	8001904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f0:	2308      	movs	r3, #8
 80018f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	615a      	str	r2, [r3, #20]
          break;
 80018fa:	e003      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x130>
          break;
 8001902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d801      	bhi.n	800190e <HAL_GPIO_Init+0x13a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	e001      	b.n	8001912 <HAL_GPIO_Init+0x13e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d802      	bhi.n	8001920 <HAL_GPIO_Init+0x14c>
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x152>
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3b08      	subs	r3, #8
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	210f      	movs	r1, #15
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	401a      	ands	r2, r3
 8001938:	6a39      	ldr	r1, [r7, #32]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80b1 	beq.w	8001ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800196c:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_GPIO_Init+0x2c0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_GPIO_Init+0x2c4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3e      	ldr	r2, [pc, #248]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1e0>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e006      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e004      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e002      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019c0:	2300      	movs	r3, #0
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	f002 0203 	and.w	r2, r2, #3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	4093      	lsls	r3, r2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019d2:	492f      	ldr	r1, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4928      	ldr	r1, [pc, #160]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	4922      	ldr	r1, [pc, #136]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	491e      	ldr	r1, [pc, #120]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4914      	ldr	r1, [pc, #80]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d021      	beq.n	8001aa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e021      	b.n	8001ab6 <HAL_GPIO_Init+0x2e2>
 8001a72:	bf00      	nop
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10220000 	.word	0x10220000
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10120000 	.word	0x10120000
 8001a88:	10110000 	.word	0x10110000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f ae8e 	bne.w	80017e8 <HAL_GPIO_Init+0x14>
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	372c      	adds	r7, #44	; 0x2c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43d9      	mvns	r1, r3
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	611a      	str	r2, [r3, #16]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e272      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x12c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d168      	bne.n	8001c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e24c      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a71      	ldr	r2, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fde4 	bl	80007e8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7fe fde0 	bl	80007e8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e200      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe4>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe fdd0 	bl	80007e8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7fe fdcc 	bl	80007e8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1ec      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1c0      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4939      	ldr	r1, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe fd85 	bl	80007e8 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe fd81 	bl	80007e8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1a1      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fd64 	bl	80007e8 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7fe fd60 	bl	80007e8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e180      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe fd44 	bl	80007e8 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe fd40 	bl	80007e8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e160      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 face 	bl	8002324 <RCC_Delay>
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7fe fd2a 	bl	80007e8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe fd26 	bl	80007e8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e146      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	42420000 	.word	0x42420000
 8001db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b92      	ldr	r3, [pc, #584]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e9      	bne.n	8001d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a6 	beq.w	8001f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a87      	ldr	r2, [pc, #540]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b82      	ldr	r3, [pc, #520]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7e      	ldr	r2, [pc, #504]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7fe fce7 	bl	80007e8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fce3 	bl	80007e8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e103      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a6e      	ldr	r2, [pc, #440]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e02d      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e5a:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a66      	ldr	r2, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e01c      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x356>
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a60      	ldr	r2, [pc, #384]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a5a      	ldr	r2, [pc, #360]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a57      	ldr	r2, [pc, #348]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fc97 	bl	80007e8 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fc93 	bl	80007e8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0b1      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <HAL_RCC_OscConfig+0x37e>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fc81 	bl	80007e8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fc7d 	bl	80007e8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e09b      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	4b40      	ldr	r3, [pc, #256]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8087 	beq.w	8002036 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d061      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d146      	bne.n	8001fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fc51 	bl	80007e8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fc4d 	bl	80007e8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e06d      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4921      	ldr	r1, [pc, #132]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a19      	ldr	r1, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	430b      	orrs	r3, r1
 8001f96:	491b      	ldr	r1, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fc21 	bl	80007e8 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fc1d 	bl	80007e8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x46a>
 8001fc8:	e035      	b.n	8002036 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fc0a 	bl	80007e8 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fc06 	bl	80007e8 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e026      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x498>
 8001ff6:	e01e      	b.n	8002036 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e019      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x500>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	429a      	cmp	r2, r3
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d0      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4965      	ldr	r1, [pc, #404]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d040      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e073      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fb58 	bl	80007e8 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fb54 	bl	80007e8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e053      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d210      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fab6 	bl	8000764 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	08003abc 	.word	0x08003abc
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x36>
 8002246:	e027      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	e027      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0c5b      	lsrs	r3, r3, #17
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800227a:	fb03 f202 	mul.w	r2, r3, r2
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e004      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	08003ad4 	.word	0x08003ad4
 80022b8:	08003ae4 	.word	0x08003ae4
 80022bc:	003d0900 	.word	0x003d0900

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d8:	f7ff fff2 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08003acc 	.word	0x08003acc

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002300:	f7ff ffde 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	08003acc 	.word	0x08003acc

08002324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <RCC_Delay+0x34>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <RCC_Delay+0x38>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002340:	bf00      	nop
  }
  while (Delay --);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	60fa      	str	r2, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <RCC_Delay+0x1c>
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000000 	.word	0x20000000
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d07d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	61d3      	str	r3, [r2, #28]
 8002398:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d118      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a42      	ldr	r2, [pc, #264]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c0:	f7fe fa12 	bl	80007e8 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	e008      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe fa0e 	bl	80007e8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e06d      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02e      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d027      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800241a:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe f9dd 	bl	80007e8 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe f9d9 	bl	80007e8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e036      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4917      	ldr	r1, [pc, #92]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	4313      	orrs	r3, r2
 8002464:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	490b      	ldr	r1, [pc, #44]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42420440 	.word	0x42420440

080024cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e042      	b.n	8002564 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f82e 	bl	8000554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	; 0x24
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800250e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fd71 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	d16d      	bne.n	8002668 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_UART_Transmit+0x2c>
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e066      	b.n	800266a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2221      	movs	r2, #33	; 0x21
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025aa:	f7fe f91d 	bl	80007e8 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c4:	d108      	bne.n	80025d8 <HAL_UART_Transmit+0x6c>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e003      	b.n	80025e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025e0:	e02a      	b.n	8002638 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 faf9 	bl	8002be4 <UART_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e036      	b.n	800266a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002610:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3302      	adds	r3, #2
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e007      	b.n	800262a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3301      	adds	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1cf      	bne.n	80025e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	; 0x40
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fac9 	bl	8002be4 <UART_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e006      	b.n	800266a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ba      	sub	sp, #232	; 0xe8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_UART_IRQHandler+0x66>
 80026c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fbd1 	bl	8002e7a <UART_Receive_IT>
      return;
 80026d8:	e25b      	b.n	8002b92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80de 	beq.w	80028a0 <HAL_UART_IRQHandler+0x22c>
 80026e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80d1 	beq.w	80028a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_UART_IRQHandler+0xae>
 800270a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_UART_IRQHandler+0xd2>
 800272e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_UART_IRQHandler+0xf6>
 8002752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f043 0204 	orr.w	r2, r3, #4
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d011      	beq.n	800279a <HAL_UART_IRQHandler+0x126>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f043 0208 	orr.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 81f2 	beq.w	8002b88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_UART_IRQHandler+0x14e>
 80027b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fb5c 	bl	8002e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_UART_IRQHandler+0x17a>
 80027e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d04f      	beq.n	800288e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa66 	bl	8002cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d041      	beq.n	8002886 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3314      	adds	r3, #20
 8002808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800281c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800282e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800283a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1d9      	bne.n	8002802 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d013      	beq.n	800287e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	4a7e      	ldr	r2, [pc, #504]	; (8002a54 <HAL_UART_IRQHandler+0x3e0>)
 800285c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fe0a 	bl	800147c <HAL_DMA_Abort_IT>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002878:	4610      	mov	r0, r2
 800287a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287c:	e00e      	b.n	800289c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f99c 	bl	8002bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	e00a      	b.n	800289c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f998 	bl	8002bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	e006      	b.n	800289c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f994 	bl	8002bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800289a:	e175      	b.n	8002b88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	bf00      	nop
    return;
 800289e:	e173      	b.n	8002b88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 814f 	bne.w	8002b48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8148 	beq.w	8002b48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8141 	beq.w	8002b48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80b6 	beq.w	8002a58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8145 	beq.w	8002b8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800290a:	429a      	cmp	r2, r3
 800290c:	f080 813e 	bcs.w	8002b8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002916:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b20      	cmp	r3, #32
 8002920:	f000 8088 	beq.w	8002a34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002932:	e853 3f00 	ldrex	r3, [r3]
 8002936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800293a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800293e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002950:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800295c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002960:	e841 2300 	strex	r3, r2, [r1]
 8002964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1d9      	bne.n	8002924 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002994:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002998:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800299c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e1      	bne.n	8002970 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3314      	adds	r3, #20
 80029b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e3      	bne.n	80029ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	330c      	adds	r3, #12
 80029f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a04:	f023 0310 	bic.w	r3, r3, #16
 8002a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a16:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e3      	bne.n	80029f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fce8 	bl	8001404 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8bf 	bl	8002bce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a50:	e09c      	b.n	8002b8c <HAL_UART_IRQHandler+0x518>
 8002a52:	bf00      	nop
 8002a54:	08002d85 	.word	0x08002d85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 808e 	beq.w	8002b90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8089 	beq.w	8002b90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002aa2:	647a      	str	r2, [r7, #68]	; 0x44
 8002aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e3      	bne.n	8002a7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ada:	633a      	str	r2, [r7, #48]	; 0x30
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e3      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0310 	bic.w	r3, r3, #16
 8002b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b20:	61fa      	str	r2, [r7, #28]
 8002b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e3      	bne.n	8002afc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f844 	bl	8002bce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b46:	e023      	b.n	8002b90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_UART_IRQHandler+0x4f4>
 8002b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f923 	bl	8002dac <UART_Transmit_IT>
    return;
 8002b66:	e014      	b.n	8002b92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <HAL_UART_IRQHandler+0x51e>
 8002b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f962 	bl	8002e4a <UART_EndTransmit_IT>
    return;
 8002b86:	e004      	b.n	8002b92 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b88:	bf00      	nop
 8002b8a:	e002      	b.n	8002b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b90:	bf00      	nop
  }
}
 8002b92:	37e8      	adds	r7, #232	; 0xe8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b090      	sub	sp, #64	; 0x40
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf4:	e050      	b.n	8002c98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d04c      	beq.n	8002c98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c04:	f7fd fdf0 	bl	80007e8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d241      	bcs.n	8002c98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c34:	637a      	str	r2, [r7, #52]	; 0x34
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	613b      	str	r3, [r7, #16]
   return(result);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c68:	623a      	str	r2, [r7, #32]
 8002c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	69f9      	ldr	r1, [r7, #28]
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e5      	bne.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e00f      	b.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d09f      	beq.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3740      	adds	r7, #64	; 0x40
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b095      	sub	sp, #84	; 0x54
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce8:	643a      	str	r2, [r7, #64]	; 0x40
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e5      	bne.n	8002cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3314      	adds	r3, #20
 8002d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d119      	bne.n	8002d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d58:	61ba      	str	r2, [r7, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	613b      	str	r3, [r7, #16]
   return(result);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d7a:	bf00      	nop
 8002d7c:	3754      	adds	r7, #84	; 0x54
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ff0c 	bl	8002bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b21      	cmp	r3, #33	; 0x21
 8002dbe:	d13e      	bne.n	8002e3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d114      	bne.n	8002df4 <UART_Transmit_IT+0x48>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d110      	bne.n	8002df4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	621a      	str	r2, [r3, #32]
 8002df2:	e008      	b.n	8002e06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	1c59      	adds	r1, r3, #1
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6211      	str	r1, [r2, #32]
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4619      	mov	r1, r3
 8002e14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fe94 	bl	8002b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b08c      	sub	sp, #48	; 0x30
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b22      	cmp	r3, #34	; 0x22
 8002e8c:	f040 80ae 	bne.w	8002fec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	d117      	bne.n	8002eca <UART_Receive_IT+0x50>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d113      	bne.n	8002eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec8:	e026      	b.n	8002f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d007      	beq.n	8002eee <UART_Receive_IT+0x74>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <UART_Receive_IT+0x82>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e008      	b.n	8002f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d15d      	bne.n	8002fe8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0220 	bic.w	r2, r2, #32
 8002f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d135      	bne.n	8002fde <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	e853 3f00 	ldrex	r3, [r3]
 8002f86:	613b      	str	r3, [r7, #16]
   return(result);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f023 0310 	bic.w	r3, r3, #16
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	623a      	str	r2, [r7, #32]
 8002f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	69f9      	ldr	r1, [r7, #28]
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e5      	bne.n	8002f78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d10a      	bne.n	8002fd0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fdf9 	bl	8002bce <HAL_UARTEx_RxEventCallback>
 8002fdc:	e002      	b.n	8002fe4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fde3 	bl	8002baa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e002      	b.n	8002fee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3730      	adds	r7, #48	; 0x30
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003032:	f023 030c 	bic.w	r3, r3, #12
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	430b      	orrs	r3, r1
 800303e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <UART_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d103      	bne.n	8003068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003060:	f7ff f94c 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	e002      	b.n	800306e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7ff f934 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009a      	lsls	r2, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <UART_SetConfig+0x118>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	0119      	lsls	r1, r3, #4
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <UART_SetConfig+0x118>)
 80030a6:	fba3 0302 	umull	r0, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c4:	4419      	add	r1, r3
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009a      	lsls	r2, r3, #2
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <UART_SetConfig+0x118>)
 80030de:	fba3 0302 	umull	r0, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2064      	movs	r0, #100	; 0x64
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	3332      	adds	r3, #50	; 0x32
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <UART_SetConfig+0x118>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	440a      	add	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40013800 	.word	0x40013800
 8003110:	51eb851f 	.word	0x51eb851f

08003114 <sniprintf>:
 8003114:	b40c      	push	{r2, r3}
 8003116:	b530      	push	{r4, r5, lr}
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <sniprintf+0x64>)
 800311a:	1e0c      	subs	r4, r1, #0
 800311c:	681d      	ldr	r5, [r3, #0]
 800311e:	b09d      	sub	sp, #116	; 0x74
 8003120:	da08      	bge.n	8003134 <sniprintf+0x20>
 8003122:	238b      	movs	r3, #139	; 0x8b
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	602b      	str	r3, [r5, #0]
 800312a:	b01d      	add	sp, #116	; 0x74
 800312c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003130:	b002      	add	sp, #8
 8003132:	4770      	bx	lr
 8003134:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003138:	f8ad 3014 	strh.w	r3, [sp, #20]
 800313c:	bf0c      	ite	eq
 800313e:	4623      	moveq	r3, r4
 8003140:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003144:	9304      	str	r3, [sp, #16]
 8003146:	9307      	str	r3, [sp, #28]
 8003148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800314c:	9002      	str	r0, [sp, #8]
 800314e:	9006      	str	r0, [sp, #24]
 8003150:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003154:	4628      	mov	r0, r5
 8003156:	ab21      	add	r3, sp, #132	; 0x84
 8003158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800315a:	a902      	add	r1, sp, #8
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	f000 f98f 	bl	8003480 <_svfiprintf_r>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	bfbc      	itt	lt
 8003166:	238b      	movlt	r3, #139	; 0x8b
 8003168:	602b      	strlt	r3, [r5, #0]
 800316a:	2c00      	cmp	r4, #0
 800316c:	d0dd      	beq.n	800312a <sniprintf+0x16>
 800316e:	2200      	movs	r2, #0
 8003170:	9b02      	ldr	r3, [sp, #8]
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e7d9      	b.n	800312a <sniprintf+0x16>
 8003176:	bf00      	nop
 8003178:	20000058 	.word	0x20000058

0800317c <memset>:
 800317c:	4603      	mov	r3, r0
 800317e:	4402      	add	r2, r0
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <memset+0xa>
 8003184:	4770      	bx	lr
 8003186:	f803 1b01 	strb.w	r1, [r3], #1
 800318a:	e7f9      	b.n	8003180 <memset+0x4>

0800318c <__errno>:
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <__errno+0x8>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000058 	.word	0x20000058

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	2600      	movs	r6, #0
 800319c:	4d0c      	ldr	r5, [pc, #48]	; (80031d0 <__libc_init_array+0x38>)
 800319e:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 80031a0:	1b64      	subs	r4, r4, r5
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	42a6      	cmp	r6, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	f000 fc7a 	bl	8003aa0 <_init>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4d0a      	ldr	r5, [pc, #40]	; (80031d8 <__libc_init_array+0x40>)
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <__libc_init_array+0x44>)
 80031b2:	1b64      	subs	r4, r4, r5
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	42a6      	cmp	r6, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c0:	4798      	blx	r3
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	4798      	blx	r3
 80031cc:	3601      	adds	r6, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08003b1c 	.word	0x08003b1c
 80031d4:	08003b1c 	.word	0x08003b1c
 80031d8:	08003b1c 	.word	0x08003b1c
 80031dc:	08003b20 	.word	0x08003b20

080031e0 <__retarget_lock_acquire_recursive>:
 80031e0:	4770      	bx	lr

080031e2 <__retarget_lock_release_recursive>:
 80031e2:	4770      	bx	lr

080031e4 <_free_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4605      	mov	r5, r0
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d040      	beq.n	800326e <_free_r+0x8a>
 80031ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f0:	1f0c      	subs	r4, r1, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bfb8      	it	lt
 80031f6:	18e4      	addlt	r4, r4, r3
 80031f8:	f000 f8dc 	bl	80033b4 <__malloc_lock>
 80031fc:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <_free_r+0x8c>)
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	b933      	cbnz	r3, 8003210 <_free_r+0x2c>
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	6014      	str	r4, [r2, #0]
 8003206:	4628      	mov	r0, r5
 8003208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800320c:	f000 b8d8 	b.w	80033c0 <__malloc_unlock>
 8003210:	42a3      	cmp	r3, r4
 8003212:	d908      	bls.n	8003226 <_free_r+0x42>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	1821      	adds	r1, r4, r0
 8003218:	428b      	cmp	r3, r1
 800321a:	bf01      	itttt	eq
 800321c:	6819      	ldreq	r1, [r3, #0]
 800321e:	685b      	ldreq	r3, [r3, #4]
 8003220:	1809      	addeq	r1, r1, r0
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	e7ed      	b.n	8003202 <_free_r+0x1e>
 8003226:	461a      	mov	r2, r3
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	b10b      	cbz	r3, 8003230 <_free_r+0x4c>
 800322c:	42a3      	cmp	r3, r4
 800322e:	d9fa      	bls.n	8003226 <_free_r+0x42>
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	1850      	adds	r0, r2, r1
 8003234:	42a0      	cmp	r0, r4
 8003236:	d10b      	bne.n	8003250 <_free_r+0x6c>
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	4401      	add	r1, r0
 800323c:	1850      	adds	r0, r2, r1
 800323e:	4283      	cmp	r3, r0
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	d1e0      	bne.n	8003206 <_free_r+0x22>
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4408      	add	r0, r1
 800324a:	6010      	str	r0, [r2, #0]
 800324c:	6053      	str	r3, [r2, #4]
 800324e:	e7da      	b.n	8003206 <_free_r+0x22>
 8003250:	d902      	bls.n	8003258 <_free_r+0x74>
 8003252:	230c      	movs	r3, #12
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	e7d6      	b.n	8003206 <_free_r+0x22>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	6063      	str	r3, [r4, #4]
 800326a:	6054      	str	r4, [r2, #4]
 800326c:	e7cb      	b.n	8003206 <_free_r+0x22>
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	2000027c 	.word	0x2000027c

08003274 <sbrk_aligned>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	4e0e      	ldr	r6, [pc, #56]	; (80032b0 <sbrk_aligned+0x3c>)
 8003278:	460c      	mov	r4, r1
 800327a:	6831      	ldr	r1, [r6, #0]
 800327c:	4605      	mov	r5, r0
 800327e:	b911      	cbnz	r1, 8003286 <sbrk_aligned+0x12>
 8003280:	f000 fbaa 	bl	80039d8 <_sbrk_r>
 8003284:	6030      	str	r0, [r6, #0]
 8003286:	4621      	mov	r1, r4
 8003288:	4628      	mov	r0, r5
 800328a:	f000 fba5 	bl	80039d8 <_sbrk_r>
 800328e:	1c43      	adds	r3, r0, #1
 8003290:	d00a      	beq.n	80032a8 <sbrk_aligned+0x34>
 8003292:	1cc4      	adds	r4, r0, #3
 8003294:	f024 0403 	bic.w	r4, r4, #3
 8003298:	42a0      	cmp	r0, r4
 800329a:	d007      	beq.n	80032ac <sbrk_aligned+0x38>
 800329c:	1a21      	subs	r1, r4, r0
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 fb9a 	bl	80039d8 <_sbrk_r>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d101      	bne.n	80032ac <sbrk_aligned+0x38>
 80032a8:	f04f 34ff 	mov.w	r4, #4294967295
 80032ac:	4620      	mov	r0, r4
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	20000280 	.word	0x20000280

080032b4 <_malloc_r>:
 80032b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b8:	1ccd      	adds	r5, r1, #3
 80032ba:	f025 0503 	bic.w	r5, r5, #3
 80032be:	3508      	adds	r5, #8
 80032c0:	2d0c      	cmp	r5, #12
 80032c2:	bf38      	it	cc
 80032c4:	250c      	movcc	r5, #12
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	4607      	mov	r7, r0
 80032ca:	db01      	blt.n	80032d0 <_malloc_r+0x1c>
 80032cc:	42a9      	cmp	r1, r5
 80032ce:	d905      	bls.n	80032dc <_malloc_r+0x28>
 80032d0:	230c      	movs	r3, #12
 80032d2:	2600      	movs	r6, #0
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4630      	mov	r0, r6
 80032d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80033b0 <_malloc_r+0xfc>
 80032e0:	f000 f868 	bl	80033b4 <__malloc_lock>
 80032e4:	f8d8 3000 	ldr.w	r3, [r8]
 80032e8:	461c      	mov	r4, r3
 80032ea:	bb5c      	cbnz	r4, 8003344 <_malloc_r+0x90>
 80032ec:	4629      	mov	r1, r5
 80032ee:	4638      	mov	r0, r7
 80032f0:	f7ff ffc0 	bl	8003274 <sbrk_aligned>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	4604      	mov	r4, r0
 80032f8:	d155      	bne.n	80033a6 <_malloc_r+0xf2>
 80032fa:	f8d8 4000 	ldr.w	r4, [r8]
 80032fe:	4626      	mov	r6, r4
 8003300:	2e00      	cmp	r6, #0
 8003302:	d145      	bne.n	8003390 <_malloc_r+0xdc>
 8003304:	2c00      	cmp	r4, #0
 8003306:	d048      	beq.n	800339a <_malloc_r+0xe6>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	4631      	mov	r1, r6
 800330c:	4638      	mov	r0, r7
 800330e:	eb04 0903 	add.w	r9, r4, r3
 8003312:	f000 fb61 	bl	80039d8 <_sbrk_r>
 8003316:	4581      	cmp	r9, r0
 8003318:	d13f      	bne.n	800339a <_malloc_r+0xe6>
 800331a:	6821      	ldr	r1, [r4, #0]
 800331c:	4638      	mov	r0, r7
 800331e:	1a6d      	subs	r5, r5, r1
 8003320:	4629      	mov	r1, r5
 8003322:	f7ff ffa7 	bl	8003274 <sbrk_aligned>
 8003326:	3001      	adds	r0, #1
 8003328:	d037      	beq.n	800339a <_malloc_r+0xe6>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	442b      	add	r3, r5
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	f8d8 3000 	ldr.w	r3, [r8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d038      	beq.n	80033aa <_malloc_r+0xf6>
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	42a2      	cmp	r2, r4
 800333c:	d12b      	bne.n	8003396 <_malloc_r+0xe2>
 800333e:	2200      	movs	r2, #0
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e00f      	b.n	8003364 <_malloc_r+0xb0>
 8003344:	6822      	ldr	r2, [r4, #0]
 8003346:	1b52      	subs	r2, r2, r5
 8003348:	d41f      	bmi.n	800338a <_malloc_r+0xd6>
 800334a:	2a0b      	cmp	r2, #11
 800334c:	d917      	bls.n	800337e <_malloc_r+0xca>
 800334e:	1961      	adds	r1, r4, r5
 8003350:	42a3      	cmp	r3, r4
 8003352:	6025      	str	r5, [r4, #0]
 8003354:	bf18      	it	ne
 8003356:	6059      	strne	r1, [r3, #4]
 8003358:	6863      	ldr	r3, [r4, #4]
 800335a:	bf08      	it	eq
 800335c:	f8c8 1000 	streq.w	r1, [r8]
 8003360:	5162      	str	r2, [r4, r5]
 8003362:	604b      	str	r3, [r1, #4]
 8003364:	4638      	mov	r0, r7
 8003366:	f104 060b 	add.w	r6, r4, #11
 800336a:	f000 f829 	bl	80033c0 <__malloc_unlock>
 800336e:	f026 0607 	bic.w	r6, r6, #7
 8003372:	1d23      	adds	r3, r4, #4
 8003374:	1af2      	subs	r2, r6, r3
 8003376:	d0ae      	beq.n	80032d6 <_malloc_r+0x22>
 8003378:	1b9b      	subs	r3, r3, r6
 800337a:	50a3      	str	r3, [r4, r2]
 800337c:	e7ab      	b.n	80032d6 <_malloc_r+0x22>
 800337e:	42a3      	cmp	r3, r4
 8003380:	6862      	ldr	r2, [r4, #4]
 8003382:	d1dd      	bne.n	8003340 <_malloc_r+0x8c>
 8003384:	f8c8 2000 	str.w	r2, [r8]
 8003388:	e7ec      	b.n	8003364 <_malloc_r+0xb0>
 800338a:	4623      	mov	r3, r4
 800338c:	6864      	ldr	r4, [r4, #4]
 800338e:	e7ac      	b.n	80032ea <_malloc_r+0x36>
 8003390:	4634      	mov	r4, r6
 8003392:	6876      	ldr	r6, [r6, #4]
 8003394:	e7b4      	b.n	8003300 <_malloc_r+0x4c>
 8003396:	4613      	mov	r3, r2
 8003398:	e7cc      	b.n	8003334 <_malloc_r+0x80>
 800339a:	230c      	movs	r3, #12
 800339c:	4638      	mov	r0, r7
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	f000 f80e 	bl	80033c0 <__malloc_unlock>
 80033a4:	e797      	b.n	80032d6 <_malloc_r+0x22>
 80033a6:	6025      	str	r5, [r4, #0]
 80033a8:	e7dc      	b.n	8003364 <_malloc_r+0xb0>
 80033aa:	605b      	str	r3, [r3, #4]
 80033ac:	deff      	udf	#255	; 0xff
 80033ae:	bf00      	nop
 80033b0:	2000027c 	.word	0x2000027c

080033b4 <__malloc_lock>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__malloc_lock+0x8>)
 80033b6:	f7ff bf13 	b.w	80031e0 <__retarget_lock_acquire_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000278 	.word	0x20000278

080033c0 <__malloc_unlock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__malloc_unlock+0x8>)
 80033c2:	f7ff bf0e 	b.w	80031e2 <__retarget_lock_release_recursive>
 80033c6:	bf00      	nop
 80033c8:	20000278 	.word	0x20000278

080033cc <__ssputs_r>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	461f      	mov	r7, r3
 80033d2:	688e      	ldr	r6, [r1, #8]
 80033d4:	4682      	mov	sl, r0
 80033d6:	42be      	cmp	r6, r7
 80033d8:	460c      	mov	r4, r1
 80033da:	4690      	mov	r8, r2
 80033dc:	680b      	ldr	r3, [r1, #0]
 80033de:	d82c      	bhi.n	800343a <__ssputs_r+0x6e>
 80033e0:	898a      	ldrh	r2, [r1, #12]
 80033e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033e6:	d026      	beq.n	8003436 <__ssputs_r+0x6a>
 80033e8:	6965      	ldr	r5, [r4, #20]
 80033ea:	6909      	ldr	r1, [r1, #16]
 80033ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f0:	eba3 0901 	sub.w	r9, r3, r1
 80033f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033f8:	1c7b      	adds	r3, r7, #1
 80033fa:	444b      	add	r3, r9
 80033fc:	106d      	asrs	r5, r5, #1
 80033fe:	429d      	cmp	r5, r3
 8003400:	bf38      	it	cc
 8003402:	461d      	movcc	r5, r3
 8003404:	0553      	lsls	r3, r2, #21
 8003406:	d527      	bpl.n	8003458 <__ssputs_r+0x8c>
 8003408:	4629      	mov	r1, r5
 800340a:	f7ff ff53 	bl	80032b4 <_malloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	b360      	cbz	r0, 800346c <__ssputs_r+0xa0>
 8003412:	464a      	mov	r2, r9
 8003414:	6921      	ldr	r1, [r4, #16]
 8003416:	f000 fafd 	bl	8003a14 <memcpy>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	6126      	str	r6, [r4, #16]
 8003428:	444e      	add	r6, r9
 800342a:	6026      	str	r6, [r4, #0]
 800342c:	463e      	mov	r6, r7
 800342e:	6165      	str	r5, [r4, #20]
 8003430:	eba5 0509 	sub.w	r5, r5, r9
 8003434:	60a5      	str	r5, [r4, #8]
 8003436:	42be      	cmp	r6, r7
 8003438:	d900      	bls.n	800343c <__ssputs_r+0x70>
 800343a:	463e      	mov	r6, r7
 800343c:	4632      	mov	r2, r6
 800343e:	4641      	mov	r1, r8
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	f000 faaf 	bl	80039a4 <memmove>
 8003446:	2000      	movs	r0, #0
 8003448:	68a3      	ldr	r3, [r4, #8]
 800344a:	1b9b      	subs	r3, r3, r6
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	4433      	add	r3, r6
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003458:	462a      	mov	r2, r5
 800345a:	f000 fae9 	bl	8003a30 <_realloc_r>
 800345e:	4606      	mov	r6, r0
 8003460:	2800      	cmp	r0, #0
 8003462:	d1e0      	bne.n	8003426 <__ssputs_r+0x5a>
 8003464:	4650      	mov	r0, sl
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	f7ff febc 	bl	80031e4 <_free_r>
 800346c:	230c      	movs	r3, #12
 800346e:	f8ca 3000 	str.w	r3, [sl]
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	e7e9      	b.n	8003454 <__ssputs_r+0x88>

08003480 <_svfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	4698      	mov	r8, r3
 8003486:	898b      	ldrh	r3, [r1, #12]
 8003488:	4607      	mov	r7, r0
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	460d      	mov	r5, r1
 800348e:	4614      	mov	r4, r2
 8003490:	b09d      	sub	sp, #116	; 0x74
 8003492:	d50e      	bpl.n	80034b2 <_svfiprintf_r+0x32>
 8003494:	690b      	ldr	r3, [r1, #16]
 8003496:	b963      	cbnz	r3, 80034b2 <_svfiprintf_r+0x32>
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	f7ff ff0b 	bl	80032b4 <_malloc_r>
 800349e:	6028      	str	r0, [r5, #0]
 80034a0:	6128      	str	r0, [r5, #16]
 80034a2:	b920      	cbnz	r0, 80034ae <_svfiprintf_r+0x2e>
 80034a4:	230c      	movs	r3, #12
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	e0d0      	b.n	8003650 <_svfiprintf_r+0x1d0>
 80034ae:	2340      	movs	r3, #64	; 0x40
 80034b0:	616b      	str	r3, [r5, #20]
 80034b2:	2300      	movs	r3, #0
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
 80034b6:	2320      	movs	r3, #32
 80034b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034bc:	2330      	movs	r3, #48	; 0x30
 80034be:	f04f 0901 	mov.w	r9, #1
 80034c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80034c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003668 <_svfiprintf_r+0x1e8>
 80034ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ce:	4623      	mov	r3, r4
 80034d0:	469a      	mov	sl, r3
 80034d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034d6:	b10a      	cbz	r2, 80034dc <_svfiprintf_r+0x5c>
 80034d8:	2a25      	cmp	r2, #37	; 0x25
 80034da:	d1f9      	bne.n	80034d0 <_svfiprintf_r+0x50>
 80034dc:	ebba 0b04 	subs.w	fp, sl, r4
 80034e0:	d00b      	beq.n	80034fa <_svfiprintf_r+0x7a>
 80034e2:	465b      	mov	r3, fp
 80034e4:	4622      	mov	r2, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	4638      	mov	r0, r7
 80034ea:	f7ff ff6f 	bl	80033cc <__ssputs_r>
 80034ee:	3001      	adds	r0, #1
 80034f0:	f000 80a9 	beq.w	8003646 <_svfiprintf_r+0x1c6>
 80034f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034f6:	445a      	add	r2, fp
 80034f8:	9209      	str	r2, [sp, #36]	; 0x24
 80034fa:	f89a 3000 	ldrb.w	r3, [sl]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80a1 	beq.w	8003646 <_svfiprintf_r+0x1c6>
 8003504:	2300      	movs	r3, #0
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800350e:	f10a 0a01 	add.w	sl, sl, #1
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	9307      	str	r3, [sp, #28]
 8003516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800351a:	931a      	str	r3, [sp, #104]	; 0x68
 800351c:	4654      	mov	r4, sl
 800351e:	2205      	movs	r2, #5
 8003520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003524:	4850      	ldr	r0, [pc, #320]	; (8003668 <_svfiprintf_r+0x1e8>)
 8003526:	f000 fa67 	bl	80039f8 <memchr>
 800352a:	9a04      	ldr	r2, [sp, #16]
 800352c:	b9d8      	cbnz	r0, 8003566 <_svfiprintf_r+0xe6>
 800352e:	06d0      	lsls	r0, r2, #27
 8003530:	bf44      	itt	mi
 8003532:	2320      	movmi	r3, #32
 8003534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003538:	0711      	lsls	r1, r2, #28
 800353a:	bf44      	itt	mi
 800353c:	232b      	movmi	r3, #43	; 0x2b
 800353e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003542:	f89a 3000 	ldrb.w	r3, [sl]
 8003546:	2b2a      	cmp	r3, #42	; 0x2a
 8003548:	d015      	beq.n	8003576 <_svfiprintf_r+0xf6>
 800354a:	4654      	mov	r4, sl
 800354c:	2000      	movs	r0, #0
 800354e:	f04f 0c0a 	mov.w	ip, #10
 8003552:	9a07      	ldr	r2, [sp, #28]
 8003554:	4621      	mov	r1, r4
 8003556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800355a:	3b30      	subs	r3, #48	; 0x30
 800355c:	2b09      	cmp	r3, #9
 800355e:	d94d      	bls.n	80035fc <_svfiprintf_r+0x17c>
 8003560:	b1b0      	cbz	r0, 8003590 <_svfiprintf_r+0x110>
 8003562:	9207      	str	r2, [sp, #28]
 8003564:	e014      	b.n	8003590 <_svfiprintf_r+0x110>
 8003566:	eba0 0308 	sub.w	r3, r0, r8
 800356a:	fa09 f303 	lsl.w	r3, r9, r3
 800356e:	4313      	orrs	r3, r2
 8003570:	46a2      	mov	sl, r4
 8003572:	9304      	str	r3, [sp, #16]
 8003574:	e7d2      	b.n	800351c <_svfiprintf_r+0x9c>
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	1d19      	adds	r1, r3, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	9103      	str	r1, [sp, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	bfbb      	ittet	lt
 8003582:	425b      	neglt	r3, r3
 8003584:	f042 0202 	orrlt.w	r2, r2, #2
 8003588:	9307      	strge	r3, [sp, #28]
 800358a:	9307      	strlt	r3, [sp, #28]
 800358c:	bfb8      	it	lt
 800358e:	9204      	strlt	r2, [sp, #16]
 8003590:	7823      	ldrb	r3, [r4, #0]
 8003592:	2b2e      	cmp	r3, #46	; 0x2e
 8003594:	d10c      	bne.n	80035b0 <_svfiprintf_r+0x130>
 8003596:	7863      	ldrb	r3, [r4, #1]
 8003598:	2b2a      	cmp	r3, #42	; 0x2a
 800359a:	d134      	bne.n	8003606 <_svfiprintf_r+0x186>
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	3402      	adds	r4, #2
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	9203      	str	r2, [sp, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bfb8      	it	lt
 80035aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80035ae:	9305      	str	r3, [sp, #20]
 80035b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800366c <_svfiprintf_r+0x1ec>
 80035b4:	2203      	movs	r2, #3
 80035b6:	4650      	mov	r0, sl
 80035b8:	7821      	ldrb	r1, [r4, #0]
 80035ba:	f000 fa1d 	bl	80039f8 <memchr>
 80035be:	b138      	cbz	r0, 80035d0 <_svfiprintf_r+0x150>
 80035c0:	2240      	movs	r2, #64	; 0x40
 80035c2:	9b04      	ldr	r3, [sp, #16]
 80035c4:	eba0 000a 	sub.w	r0, r0, sl
 80035c8:	4082      	lsls	r2, r0
 80035ca:	4313      	orrs	r3, r2
 80035cc:	3401      	adds	r4, #1
 80035ce:	9304      	str	r3, [sp, #16]
 80035d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d4:	2206      	movs	r2, #6
 80035d6:	4826      	ldr	r0, [pc, #152]	; (8003670 <_svfiprintf_r+0x1f0>)
 80035d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035dc:	f000 fa0c 	bl	80039f8 <memchr>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d038      	beq.n	8003656 <_svfiprintf_r+0x1d6>
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <_svfiprintf_r+0x1f4>)
 80035e6:	bb1b      	cbnz	r3, 8003630 <_svfiprintf_r+0x1b0>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	3307      	adds	r3, #7
 80035ec:	f023 0307 	bic.w	r3, r3, #7
 80035f0:	3308      	adds	r3, #8
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f6:	4433      	add	r3, r6
 80035f8:	9309      	str	r3, [sp, #36]	; 0x24
 80035fa:	e768      	b.n	80034ce <_svfiprintf_r+0x4e>
 80035fc:	460c      	mov	r4, r1
 80035fe:	2001      	movs	r0, #1
 8003600:	fb0c 3202 	mla	r2, ip, r2, r3
 8003604:	e7a6      	b.n	8003554 <_svfiprintf_r+0xd4>
 8003606:	2300      	movs	r3, #0
 8003608:	f04f 0c0a 	mov.w	ip, #10
 800360c:	4619      	mov	r1, r3
 800360e:	3401      	adds	r4, #1
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	4620      	mov	r0, r4
 8003614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003618:	3a30      	subs	r2, #48	; 0x30
 800361a:	2a09      	cmp	r2, #9
 800361c:	d903      	bls.n	8003626 <_svfiprintf_r+0x1a6>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0c6      	beq.n	80035b0 <_svfiprintf_r+0x130>
 8003622:	9105      	str	r1, [sp, #20]
 8003624:	e7c4      	b.n	80035b0 <_svfiprintf_r+0x130>
 8003626:	4604      	mov	r4, r0
 8003628:	2301      	movs	r3, #1
 800362a:	fb0c 2101 	mla	r1, ip, r1, r2
 800362e:	e7f0      	b.n	8003612 <_svfiprintf_r+0x192>
 8003630:	ab03      	add	r3, sp, #12
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	462a      	mov	r2, r5
 8003636:	4638      	mov	r0, r7
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <_svfiprintf_r+0x1f8>)
 800363a:	a904      	add	r1, sp, #16
 800363c:	f3af 8000 	nop.w
 8003640:	1c42      	adds	r2, r0, #1
 8003642:	4606      	mov	r6, r0
 8003644:	d1d6      	bne.n	80035f4 <_svfiprintf_r+0x174>
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	065b      	lsls	r3, r3, #25
 800364a:	f53f af2d 	bmi.w	80034a8 <_svfiprintf_r+0x28>
 800364e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003650:	b01d      	add	sp, #116	; 0x74
 8003652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4638      	mov	r0, r7
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <_svfiprintf_r+0x1f8>)
 8003660:	a904      	add	r1, sp, #16
 8003662:	f000 f87d 	bl	8003760 <_printf_i>
 8003666:	e7eb      	b.n	8003640 <_svfiprintf_r+0x1c0>
 8003668:	08003ae6 	.word	0x08003ae6
 800366c:	08003aec 	.word	0x08003aec
 8003670:	08003af0 	.word	0x08003af0
 8003674:	00000000 	.word	0x00000000
 8003678:	080033cd 	.word	0x080033cd

0800367c <_printf_common>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	4616      	mov	r6, r2
 8003682:	4699      	mov	r9, r3
 8003684:	688a      	ldr	r2, [r1, #8]
 8003686:	690b      	ldr	r3, [r1, #16]
 8003688:	4607      	mov	r7, r0
 800368a:	4293      	cmp	r3, r2
 800368c:	bfb8      	it	lt
 800368e:	4613      	movlt	r3, r2
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003696:	460c      	mov	r4, r1
 8003698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800369c:	b10a      	cbz	r2, 80036a2 <_printf_common+0x26>
 800369e:	3301      	adds	r3, #1
 80036a0:	6033      	str	r3, [r6, #0]
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	0699      	lsls	r1, r3, #26
 80036a6:	bf42      	ittt	mi
 80036a8:	6833      	ldrmi	r3, [r6, #0]
 80036aa:	3302      	addmi	r3, #2
 80036ac:	6033      	strmi	r3, [r6, #0]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	f015 0506 	ands.w	r5, r5, #6
 80036b4:	d106      	bne.n	80036c4 <_printf_common+0x48>
 80036b6:	f104 0a19 	add.w	sl, r4, #25
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	6832      	ldr	r2, [r6, #0]
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dc2b      	bgt.n	800371c <_printf_common+0xa0>
 80036c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036c8:	1e13      	subs	r3, r2, #0
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	bf18      	it	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	0692      	lsls	r2, r2, #26
 80036d2:	d430      	bmi.n	8003736 <_printf_common+0xba>
 80036d4:	4649      	mov	r1, r9
 80036d6:	4638      	mov	r0, r7
 80036d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036dc:	47c0      	blx	r8
 80036de:	3001      	adds	r0, #1
 80036e0:	d023      	beq.n	800372a <_printf_common+0xae>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf14      	ite	ne
 80036ee:	2500      	movne	r5, #0
 80036f0:	6833      	ldreq	r3, [r6, #0]
 80036f2:	f04f 0600 	mov.w	r6, #0
 80036f6:	bf08      	it	eq
 80036f8:	68e5      	ldreq	r5, [r4, #12]
 80036fa:	f104 041a 	add.w	r4, r4, #26
 80036fe:	bf08      	it	eq
 8003700:	1aed      	subeq	r5, r5, r3
 8003702:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003706:	bf08      	it	eq
 8003708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800370c:	4293      	cmp	r3, r2
 800370e:	bfc4      	itt	gt
 8003710:	1a9b      	subgt	r3, r3, r2
 8003712:	18ed      	addgt	r5, r5, r3
 8003714:	42b5      	cmp	r5, r6
 8003716:	d11a      	bne.n	800374e <_printf_common+0xd2>
 8003718:	2000      	movs	r0, #0
 800371a:	e008      	b.n	800372e <_printf_common+0xb2>
 800371c:	2301      	movs	r3, #1
 800371e:	4652      	mov	r2, sl
 8003720:	4649      	mov	r1, r9
 8003722:	4638      	mov	r0, r7
 8003724:	47c0      	blx	r8
 8003726:	3001      	adds	r0, #1
 8003728:	d103      	bne.n	8003732 <_printf_common+0xb6>
 800372a:	f04f 30ff 	mov.w	r0, #4294967295
 800372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003732:	3501      	adds	r5, #1
 8003734:	e7c1      	b.n	80036ba <_printf_common+0x3e>
 8003736:	2030      	movs	r0, #48	; 0x30
 8003738:	18e1      	adds	r1, r4, r3
 800373a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003744:	4422      	add	r2, r4
 8003746:	3302      	adds	r3, #2
 8003748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800374c:	e7c2      	b.n	80036d4 <_printf_common+0x58>
 800374e:	2301      	movs	r3, #1
 8003750:	4622      	mov	r2, r4
 8003752:	4649      	mov	r1, r9
 8003754:	4638      	mov	r0, r7
 8003756:	47c0      	blx	r8
 8003758:	3001      	adds	r0, #1
 800375a:	d0e6      	beq.n	800372a <_printf_common+0xae>
 800375c:	3601      	adds	r6, #1
 800375e:	e7d9      	b.n	8003714 <_printf_common+0x98>

08003760 <_printf_i>:
 8003760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	7e0f      	ldrb	r7, [r1, #24]
 8003766:	4691      	mov	r9, r2
 8003768:	2f78      	cmp	r7, #120	; 0x78
 800376a:	4680      	mov	r8, r0
 800376c:	460c      	mov	r4, r1
 800376e:	469a      	mov	sl, r3
 8003770:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003776:	d807      	bhi.n	8003788 <_printf_i+0x28>
 8003778:	2f62      	cmp	r7, #98	; 0x62
 800377a:	d80a      	bhi.n	8003792 <_printf_i+0x32>
 800377c:	2f00      	cmp	r7, #0
 800377e:	f000 80d5 	beq.w	800392c <_printf_i+0x1cc>
 8003782:	2f58      	cmp	r7, #88	; 0x58
 8003784:	f000 80c1 	beq.w	800390a <_printf_i+0x1aa>
 8003788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800378c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003790:	e03a      	b.n	8003808 <_printf_i+0xa8>
 8003792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003796:	2b15      	cmp	r3, #21
 8003798:	d8f6      	bhi.n	8003788 <_printf_i+0x28>
 800379a:	a101      	add	r1, pc, #4	; (adr r1, 80037a0 <_printf_i+0x40>)
 800379c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	08003789 	.word	0x08003789
 80037ac:	08003789 	.word	0x08003789
 80037b0:	08003789 	.word	0x08003789
 80037b4:	08003789 	.word	0x08003789
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	08003789 	.word	0x08003789
 80037c0:	08003789 	.word	0x08003789
 80037c4:	08003789 	.word	0x08003789
 80037c8:	08003789 	.word	0x08003789
 80037cc:	08003913 	.word	0x08003913
 80037d0:	08003839 	.word	0x08003839
 80037d4:	080038cd 	.word	0x080038cd
 80037d8:	08003789 	.word	0x08003789
 80037dc:	08003789 	.word	0x08003789
 80037e0:	08003935 	.word	0x08003935
 80037e4:	08003789 	.word	0x08003789
 80037e8:	08003839 	.word	0x08003839
 80037ec:	08003789 	.word	0x08003789
 80037f0:	08003789 	.word	0x08003789
 80037f4:	080038d5 	.word	0x080038d5
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	602a      	str	r2, [r5, #0]
 8003800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003808:	2301      	movs	r3, #1
 800380a:	e0a0      	b.n	800394e <_printf_i+0x1ee>
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	0607      	lsls	r7, r0, #24
 8003812:	f103 0104 	add.w	r1, r3, #4
 8003816:	6029      	str	r1, [r5, #0]
 8003818:	d501      	bpl.n	800381e <_printf_i+0xbe>
 800381a:	681e      	ldr	r6, [r3, #0]
 800381c:	e003      	b.n	8003826 <_printf_i+0xc6>
 800381e:	0646      	lsls	r6, r0, #25
 8003820:	d5fb      	bpl.n	800381a <_printf_i+0xba>
 8003822:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003826:	2e00      	cmp	r6, #0
 8003828:	da03      	bge.n	8003832 <_printf_i+0xd2>
 800382a:	232d      	movs	r3, #45	; 0x2d
 800382c:	4276      	negs	r6, r6
 800382e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003832:	230a      	movs	r3, #10
 8003834:	4859      	ldr	r0, [pc, #356]	; (800399c <_printf_i+0x23c>)
 8003836:	e012      	b.n	800385e <_printf_i+0xfe>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	1d19      	adds	r1, r3, #4
 800383e:	6029      	str	r1, [r5, #0]
 8003840:	0605      	lsls	r5, r0, #24
 8003842:	d501      	bpl.n	8003848 <_printf_i+0xe8>
 8003844:	681e      	ldr	r6, [r3, #0]
 8003846:	e002      	b.n	800384e <_printf_i+0xee>
 8003848:	0641      	lsls	r1, r0, #25
 800384a:	d5fb      	bpl.n	8003844 <_printf_i+0xe4>
 800384c:	881e      	ldrh	r6, [r3, #0]
 800384e:	2f6f      	cmp	r7, #111	; 0x6f
 8003850:	bf0c      	ite	eq
 8003852:	2308      	moveq	r3, #8
 8003854:	230a      	movne	r3, #10
 8003856:	4851      	ldr	r0, [pc, #324]	; (800399c <_printf_i+0x23c>)
 8003858:	2100      	movs	r1, #0
 800385a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800385e:	6865      	ldr	r5, [r4, #4]
 8003860:	2d00      	cmp	r5, #0
 8003862:	bfa8      	it	ge
 8003864:	6821      	ldrge	r1, [r4, #0]
 8003866:	60a5      	str	r5, [r4, #8]
 8003868:	bfa4      	itt	ge
 800386a:	f021 0104 	bicge.w	r1, r1, #4
 800386e:	6021      	strge	r1, [r4, #0]
 8003870:	b90e      	cbnz	r6, 8003876 <_printf_i+0x116>
 8003872:	2d00      	cmp	r5, #0
 8003874:	d04b      	beq.n	800390e <_printf_i+0x1ae>
 8003876:	4615      	mov	r5, r2
 8003878:	fbb6 f1f3 	udiv	r1, r6, r3
 800387c:	fb03 6711 	mls	r7, r3, r1, r6
 8003880:	5dc7      	ldrb	r7, [r0, r7]
 8003882:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003886:	4637      	mov	r7, r6
 8003888:	42bb      	cmp	r3, r7
 800388a:	460e      	mov	r6, r1
 800388c:	d9f4      	bls.n	8003878 <_printf_i+0x118>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d10b      	bne.n	80038aa <_printf_i+0x14a>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	07de      	lsls	r6, r3, #31
 8003896:	d508      	bpl.n	80038aa <_printf_i+0x14a>
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	6861      	ldr	r1, [r4, #4]
 800389c:	4299      	cmp	r1, r3
 800389e:	bfde      	ittt	le
 80038a0:	2330      	movle	r3, #48	; 0x30
 80038a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038aa:	1b52      	subs	r2, r2, r5
 80038ac:	6122      	str	r2, [r4, #16]
 80038ae:	464b      	mov	r3, r9
 80038b0:	4621      	mov	r1, r4
 80038b2:	4640      	mov	r0, r8
 80038b4:	f8cd a000 	str.w	sl, [sp]
 80038b8:	aa03      	add	r2, sp, #12
 80038ba:	f7ff fedf 	bl	800367c <_printf_common>
 80038be:	3001      	adds	r0, #1
 80038c0:	d14a      	bne.n	8003958 <_printf_i+0x1f8>
 80038c2:	f04f 30ff 	mov.w	r0, #4294967295
 80038c6:	b004      	add	sp, #16
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f043 0320 	orr.w	r3, r3, #32
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	2778      	movs	r7, #120	; 0x78
 80038d6:	4832      	ldr	r0, [pc, #200]	; (80039a0 <_printf_i+0x240>)
 80038d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	6829      	ldr	r1, [r5, #0]
 80038e0:	061f      	lsls	r7, r3, #24
 80038e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80038e6:	d402      	bmi.n	80038ee <_printf_i+0x18e>
 80038e8:	065f      	lsls	r7, r3, #25
 80038ea:	bf48      	it	mi
 80038ec:	b2b6      	uxthmi	r6, r6
 80038ee:	07df      	lsls	r7, r3, #31
 80038f0:	bf48      	it	mi
 80038f2:	f043 0320 	orrmi.w	r3, r3, #32
 80038f6:	6029      	str	r1, [r5, #0]
 80038f8:	bf48      	it	mi
 80038fa:	6023      	strmi	r3, [r4, #0]
 80038fc:	b91e      	cbnz	r6, 8003906 <_printf_i+0x1a6>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f023 0320 	bic.w	r3, r3, #32
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	2310      	movs	r3, #16
 8003908:	e7a6      	b.n	8003858 <_printf_i+0xf8>
 800390a:	4824      	ldr	r0, [pc, #144]	; (800399c <_printf_i+0x23c>)
 800390c:	e7e4      	b.n	80038d8 <_printf_i+0x178>
 800390e:	4615      	mov	r5, r2
 8003910:	e7bd      	b.n	800388e <_printf_i+0x12e>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	6826      	ldr	r6, [r4, #0]
 8003916:	1d18      	adds	r0, r3, #4
 8003918:	6961      	ldr	r1, [r4, #20]
 800391a:	6028      	str	r0, [r5, #0]
 800391c:	0635      	lsls	r5, r6, #24
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	d501      	bpl.n	8003926 <_printf_i+0x1c6>
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	e002      	b.n	800392c <_printf_i+0x1cc>
 8003926:	0670      	lsls	r0, r6, #25
 8003928:	d5fb      	bpl.n	8003922 <_printf_i+0x1c2>
 800392a:	8019      	strh	r1, [r3, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	4615      	mov	r5, r2
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	e7bc      	b.n	80038ae <_printf_i+0x14e>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	2100      	movs	r1, #0
 8003938:	1d1a      	adds	r2, r3, #4
 800393a:	602a      	str	r2, [r5, #0]
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	6862      	ldr	r2, [r4, #4]
 8003940:	4628      	mov	r0, r5
 8003942:	f000 f859 	bl	80039f8 <memchr>
 8003946:	b108      	cbz	r0, 800394c <_printf_i+0x1ec>
 8003948:	1b40      	subs	r0, r0, r5
 800394a:	6060      	str	r0, [r4, #4]
 800394c:	6863      	ldr	r3, [r4, #4]
 800394e:	6123      	str	r3, [r4, #16]
 8003950:	2300      	movs	r3, #0
 8003952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003956:	e7aa      	b.n	80038ae <_printf_i+0x14e>
 8003958:	462a      	mov	r2, r5
 800395a:	4649      	mov	r1, r9
 800395c:	4640      	mov	r0, r8
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	47d0      	blx	sl
 8003962:	3001      	adds	r0, #1
 8003964:	d0ad      	beq.n	80038c2 <_printf_i+0x162>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	079b      	lsls	r3, r3, #30
 800396a:	d413      	bmi.n	8003994 <_printf_i+0x234>
 800396c:	68e0      	ldr	r0, [r4, #12]
 800396e:	9b03      	ldr	r3, [sp, #12]
 8003970:	4298      	cmp	r0, r3
 8003972:	bfb8      	it	lt
 8003974:	4618      	movlt	r0, r3
 8003976:	e7a6      	b.n	80038c6 <_printf_i+0x166>
 8003978:	2301      	movs	r3, #1
 800397a:	4632      	mov	r2, r6
 800397c:	4649      	mov	r1, r9
 800397e:	4640      	mov	r0, r8
 8003980:	47d0      	blx	sl
 8003982:	3001      	adds	r0, #1
 8003984:	d09d      	beq.n	80038c2 <_printf_i+0x162>
 8003986:	3501      	adds	r5, #1
 8003988:	68e3      	ldr	r3, [r4, #12]
 800398a:	9903      	ldr	r1, [sp, #12]
 800398c:	1a5b      	subs	r3, r3, r1
 800398e:	42ab      	cmp	r3, r5
 8003990:	dcf2      	bgt.n	8003978 <_printf_i+0x218>
 8003992:	e7eb      	b.n	800396c <_printf_i+0x20c>
 8003994:	2500      	movs	r5, #0
 8003996:	f104 0619 	add.w	r6, r4, #25
 800399a:	e7f5      	b.n	8003988 <_printf_i+0x228>
 800399c:	08003af7 	.word	0x08003af7
 80039a0:	08003b08 	.word	0x08003b08

080039a4 <memmove>:
 80039a4:	4288      	cmp	r0, r1
 80039a6:	b510      	push	{r4, lr}
 80039a8:	eb01 0402 	add.w	r4, r1, r2
 80039ac:	d902      	bls.n	80039b4 <memmove+0x10>
 80039ae:	4284      	cmp	r4, r0
 80039b0:	4623      	mov	r3, r4
 80039b2:	d807      	bhi.n	80039c4 <memmove+0x20>
 80039b4:	1e43      	subs	r3, r0, #1
 80039b6:	42a1      	cmp	r1, r4
 80039b8:	d008      	beq.n	80039cc <memmove+0x28>
 80039ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039c2:	e7f8      	b.n	80039b6 <memmove+0x12>
 80039c4:	4601      	mov	r1, r0
 80039c6:	4402      	add	r2, r0
 80039c8:	428a      	cmp	r2, r1
 80039ca:	d100      	bne.n	80039ce <memmove+0x2a>
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039d6:	e7f7      	b.n	80039c8 <memmove+0x24>

080039d8 <_sbrk_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	2300      	movs	r3, #0
 80039dc:	4d05      	ldr	r5, [pc, #20]	; (80039f4 <_sbrk_r+0x1c>)
 80039de:	4604      	mov	r4, r0
 80039e0:	4608      	mov	r0, r1
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	f7fc fe46 	bl	8000674 <_sbrk>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_sbrk_r+0x1a>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_sbrk_r+0x1a>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000274 	.word	0x20000274

080039f8 <memchr>:
 80039f8:	4603      	mov	r3, r0
 80039fa:	b510      	push	{r4, lr}
 80039fc:	b2c9      	uxtb	r1, r1
 80039fe:	4402      	add	r2, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	d101      	bne.n	8003a0a <memchr+0x12>
 8003a06:	2000      	movs	r0, #0
 8003a08:	e003      	b.n	8003a12 <memchr+0x1a>
 8003a0a:	7804      	ldrb	r4, [r0, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	428c      	cmp	r4, r1
 8003a10:	d1f6      	bne.n	8003a00 <memchr+0x8>
 8003a12:	bd10      	pop	{r4, pc}

08003a14 <memcpy>:
 8003a14:	440a      	add	r2, r1
 8003a16:	4291      	cmp	r1, r2
 8003a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a1c:	d100      	bne.n	8003a20 <memcpy+0xc>
 8003a1e:	4770      	bx	lr
 8003a20:	b510      	push	{r4, lr}
 8003a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a26:	4291      	cmp	r1, r2
 8003a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a2c:	d1f9      	bne.n	8003a22 <memcpy+0xe>
 8003a2e:	bd10      	pop	{r4, pc}

08003a30 <_realloc_r>:
 8003a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a34:	4680      	mov	r8, r0
 8003a36:	4614      	mov	r4, r2
 8003a38:	460e      	mov	r6, r1
 8003a3a:	b921      	cbnz	r1, 8003a46 <_realloc_r+0x16>
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a42:	f7ff bc37 	b.w	80032b4 <_malloc_r>
 8003a46:	b92a      	cbnz	r2, 8003a54 <_realloc_r+0x24>
 8003a48:	f7ff fbcc 	bl	80031e4 <_free_r>
 8003a4c:	4625      	mov	r5, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a54:	f000 f81b 	bl	8003a8e <_malloc_usable_size_r>
 8003a58:	4284      	cmp	r4, r0
 8003a5a:	4607      	mov	r7, r0
 8003a5c:	d802      	bhi.n	8003a64 <_realloc_r+0x34>
 8003a5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a62:	d812      	bhi.n	8003a8a <_realloc_r+0x5a>
 8003a64:	4621      	mov	r1, r4
 8003a66:	4640      	mov	r0, r8
 8003a68:	f7ff fc24 	bl	80032b4 <_malloc_r>
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d0ed      	beq.n	8003a4e <_realloc_r+0x1e>
 8003a72:	42bc      	cmp	r4, r7
 8003a74:	4622      	mov	r2, r4
 8003a76:	4631      	mov	r1, r6
 8003a78:	bf28      	it	cs
 8003a7a:	463a      	movcs	r2, r7
 8003a7c:	f7ff ffca 	bl	8003a14 <memcpy>
 8003a80:	4631      	mov	r1, r6
 8003a82:	4640      	mov	r0, r8
 8003a84:	f7ff fbae 	bl	80031e4 <_free_r>
 8003a88:	e7e1      	b.n	8003a4e <_realloc_r+0x1e>
 8003a8a:	4635      	mov	r5, r6
 8003a8c:	e7df      	b.n	8003a4e <_realloc_r+0x1e>

08003a8e <_malloc_usable_size_r>:
 8003a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a92:	1f18      	subs	r0, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bfbc      	itt	lt
 8003a98:	580b      	ldrlt	r3, [r1, r0]
 8003a9a:	18c0      	addlt	r0, r0, r3
 8003a9c:	4770      	bx	lr
	...

08003aa0 <_init>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr

08003aac <_fini>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr
