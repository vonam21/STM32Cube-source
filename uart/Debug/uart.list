
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ffc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000008  0800423c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  20000030  08004264  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000e4  08004264  000200e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010661  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023b2  00000000  00000000  00030704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001230  00000000  00000000  00032ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000dd9  00000000  00000000  00033ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002065c  00000000  00000000  00034ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f7af  00000000  00000000  0005511d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d1b07  00000000  00000000  000648cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004b94  00000000  00000000  001363d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  0013af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000030 	.word	0x20000030
 8000158:	00000000 	.word	0x00000000
 800015c:	08004120 	.word	0x08004120

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000034 	.word	0x20000034
 8000178:	08004120 	.word	0x08004120

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa56 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f818 	bl	80004e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004b8:	f000 f86e 	bl	8000598 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f8dc 	bl	8000678 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80004c0:	f000 f887 	bl	80005d2 <MX_MEMORYMAP_Init>
  MX_USART1_UART_Init();
 80004c4:	f000 f88c 	bl	80005e0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1,tx_buffer,27,10);
 80004c8:	230a      	movs	r3, #10
 80004ca:	221b      	movs	r2, #27
 80004cc:	4904      	ldr	r1, [pc, #16]	; (80004e0 <main+0x34>)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <main+0x38>)
 80004d0:	f002 fc84 	bl	8002ddc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80004d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d8:	f000 fac8 	bl	8000a6c <HAL_Delay>
	  HAL_UART_Transmit(&huart1,tx_buffer,27,10);
 80004dc:	e7f4      	b.n	80004c8 <main+0x1c>
 80004de:	bf00      	nop
 80004e0:	20000008 	.word	0x20000008
 80004e4:	2000004c 	.word	0x2000004c

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09a      	sub	sp, #104	; 0x68
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2248      	movs	r2, #72	; 0x48
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fde6 	bl	80040c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <SystemClock_Config+0xac>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000516:	4a1f      	ldr	r2, [pc, #124]	; (8000594 <SystemClock_Config+0xac>)
 8000518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <SystemClock_Config+0xac>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800052a:	2322      	movs	r3, #34	; 0x22
 800052c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2340      	movs	r3, #64	; 0x40
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800053c:	2300      	movs	r3, #0
 800053e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000540:	2360      	movs	r3, #96	; 0x60
 8000542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0320 	add.w	r3, r7, #32
 800054c:	4618      	mov	r0, r3
 800054e:	f001 f99b 	bl	8001888 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000558:	f000 f8b6 	bl	80006c8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800055c:	236f      	movs	r3, #111	; 0x6f
 800055e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fcf7 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000588:	f000 f89e 	bl	80006c8 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3768      	adds	r7, #104	; 0x68
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	58000400 	.word	0x58000400

08000598 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2250      	movs	r2, #80	; 0x50
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 fd8f 	bl	80040c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80005b4:	2310      	movs	r3, #16
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f917 	bl	80027ee <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80005c6:	f000 f87f 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <MX_USART1_UART_Init+0x90>)
 80005e6:	4a23      	ldr	r2, [pc, #140]	; (8000674 <MX_USART1_UART_Init+0x94>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_USART1_UART_Init+0x90>)
 80005ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_USART1_UART_Init+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_USART1_UART_Init+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_USART1_UART_Init+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_USART1_UART_Init+0x90>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_USART1_UART_Init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_USART1_UART_Init+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_USART1_UART_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_USART1_UART_Init+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_USART1_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <MX_USART1_UART_Init+0x90>)
 800062a:	f002 fb87 	bl	8002d3c <HAL_UART_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000634:	f000 f848 	bl	80006c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000638:	2100      	movs	r1, #0
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_USART1_UART_Init+0x90>)
 800063c:	f003 fc79 	bl	8003f32 <HAL_UARTEx_SetTxFifoThreshold>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000646:	f000 f83f 	bl	80006c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <MX_USART1_UART_Init+0x90>)
 800064e:	f003 fcae 	bl	8003fae <HAL_UARTEx_SetRxFifoThreshold>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000658:	f000 f836 	bl	80006c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_USART1_UART_Init+0x90>)
 800065e:	f003 fc2f 	bl	8003ec0 <HAL_UARTEx_DisableFifoMode>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000668:	f000 f82e 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000004c 	.word	0x2000004c
 8000674:	40013800 	.word	0x40013800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fef3 	bl	8000478 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff fef0 	bl	8000478 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2103      	movs	r1, #3
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_GPIO_Init+0x4c>)
 800069e:	f000 fd47 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_GPIO_Init+0x4c>)
 80006b8:	f000 fbca 	bl	8000e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>

080006d2 <LL_AHB2_GRP1_EnableClock>:
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4013      	ands	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800071c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000720:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000728:	68fb      	ldr	r3, [r7, #12]
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	; 0x70
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2250      	movs	r2, #80	; 0x50
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fcaf 	bl	80040c8 <memset>
  if(huart->Instance==USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <HAL_UART_MspInit+0x98>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d12e      	bne.n	80007d2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000774:	2301      	movs	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4618      	mov	r0, r3
 8000782:	f002 f834 	bl	80027ee <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800078c:	f7ff ff9c 	bl	80006c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000790:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000794:	f7ff ffb6 	bl	8000704 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff ff9a 	bl	80006d2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800079e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007b0:	2307      	movs	r3, #7
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007b8:	4619      	mov	r1, r3
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f000 fb47 	bl	8000e50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2024      	movs	r0, #36	; 0x24
 80007c8:	f000 fa4f 	bl	8000c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007cc:	2024      	movs	r0, #36	; 0x24
 80007ce:	f000 fa66 	bl	8000c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d2:	bf00      	nop
 80007d4:	3770      	adds	r7, #112	; 0x70
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40013800 	.word	0x40013800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f8f2 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <USART1_IRQHandler+0x10>)
 800083a:	f002 fb5d 	bl	8002ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000004c 	.word	0x2000004c

08000848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <SystemInit+0x98>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <SystemInit+0x98>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800085c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000874:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <SystemInit+0x9c>)
 8000882:	4013      	ands	r3, r2
 8000884:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	f023 0305 	bic.w	r3, r3, #5
 8000896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80008ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b2:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <SystemInit+0xa0>)
 80008b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80008b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <SystemInit+0xa0>)
 80008bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00
 80008e4:	faf6fefb 	.word	0xfaf6fefb
 80008e8:	22041000 	.word	0x22041000

080008ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80008ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f0:	3304      	adds	r3, #4

080008f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80008f6:	d3f9      	bcc.n	80008ec <CopyDataInit>
  bx lr
 80008f8:	4770      	bx	lr

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80008fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80008fc:	3004      	adds	r0, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80008fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>
  bx lr
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff ff9e 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <LoopForever+0x6>)
 800090e:	490c      	ldr	r1, [pc, #48]	; (8000940 <LoopForever+0xa>)
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <LoopForever+0xe>)
 8000912:	2300      	movs	r3, #0
 8000914:	f7ff ffed 	bl	80008f2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <LoopForever+0x12>)
 800091a:	490c      	ldr	r1, [pc, #48]	; (800094c <LoopForever+0x16>)
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <LoopForever+0x1a>)
 800091e:	2300      	movs	r3, #0
 8000920:	f7ff ffe7 	bl	80008f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopForever+0x1e>)
 8000926:	490c      	ldr	r1, [pc, #48]	; (8000958 <LoopForever+0x22>)
 8000928:	2300      	movs	r3, #0
 800092a:	f7ff ffe8 	bl	80008fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092e:	f003 fbd3 	bl	80040d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000932:	f7ff fdbb 	bl	80004ac <main>

08000936 <LoopForever>:

LoopForever:
  b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800093c:	20000008 	.word	0x20000008
 8000940:	20000030 	.word	0x20000030
 8000944:	0800423c 	.word	0x0800423c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000948:	20030000 	.word	0x20030000
 800094c:	20030000 	.word	0x20030000
 8000950:	08004264 	.word	0x08004264
  INIT_BSS _sbss, _ebss
 8000954:	20000030 	.word	0x20000030
 8000958:	200000e4 	.word	0x200000e4

0800095c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_Init+0x3c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <HAL_Init+0x3c>)
 8000970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000974:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f96c 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097c:	200f      	movs	r0, #15
 800097e:	f000 f80f 	bl	80009a0 <HAL_InitTick>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	e001      	b.n	8000992 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098e:	f7ff fed2 	bl	8000736 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000992:	79fb      	ldrb	r3, [r7, #7]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	58004000 	.word	0x58004000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_InitTick+0x6c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d024      	beq.n	80009fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b4:	f001 fc8a 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80009b8:	4602      	mov	r2, r0
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_InitTick+0x6c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f974 	bl	8000cba <HAL_SYSTICK_Config>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10f      	bne.n	80009f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d809      	bhi.n	80009f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	2200      	movs	r2, #0
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	f04f 30ff 	mov.w	r0, #4294967295
 80009e6:	f000 f940 	bl	8000c6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <HAL_InitTick+0x70>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e007      	b.n	8000a02 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e004      	b.n	8000a02 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e001      	b.n	8000a02 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000002c 	.word	0x2000002c
 8000a10:	20000028 	.word	0x20000028

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	200000e0 	.word	0x200000e0

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000e0 	.word	0x200000e0

08000a54 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTickPrio+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000028 	.word	0x20000028

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffe2 	bl	8000a3c <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffd2 	bl	8000a3c <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	; (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff29 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff40 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff33 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa4 	bl	8000c10 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e04f      	b.n	8000d84 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d008      	beq.n	8000d02 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e040      	b.n	8000d84 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 020e 	bic.w	r2, r2, #14
 8000d10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0201 	bic.w	r2, r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f003 021c 	and.w	r2, r3, #28
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00c      	beq.n	8000d72 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d005      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e047      	b.n	8000e44 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 020e 	bic.w	r2, r2, #14
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0201 	bic.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	f003 021c 	and.w	r2, r3, #28
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	2101      	movs	r1, #1
 8000df2:	fa01 f202 	lsl.w	r2, r1, r2
 8000df6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00c      	beq.n	8000e24 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	4798      	blx	r3
    }
  }
  return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e14c      	b.n	80010fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 813e 	beq.w	80010f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d017      	beq.n	8000f2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8098 	beq.w	80010f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc4:	4a54      	ldr	r2, [pc, #336]	; (8001118 <HAL_GPIO_Init+0x2c8>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fee:	d019      	beq.n	8001024 <HAL_GPIO_Init+0x1d4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4a      	ldr	r2, [pc, #296]	; (800111c <HAL_GPIO_Init+0x2cc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1d0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a49      	ldr	r2, [pc, #292]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1cc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a48      	ldr	r2, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x2d4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1c8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a47      	ldr	r2, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2d8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1c4>
 8001010:	2304      	movs	r3, #4
 8001012:	e008      	b.n	8001026 <HAL_GPIO_Init+0x1d6>
 8001014:	2307      	movs	r3, #7
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x1d6>
 8001018:	2303      	movs	r3, #3
 800101a:	e004      	b.n	8001026 <HAL_GPIO_Init+0x1d6>
 800101c:	2302      	movs	r3, #2
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x1d6>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <HAL_GPIO_Init+0x1d6>
 8001024:	2300      	movs	r3, #0
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	4093      	lsls	r3, r2
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001036:	4938      	ldr	r1, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x2c8>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <HAL_GPIO_Init+0x2dc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001068:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_GPIO_Init+0x2dc>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_GPIO_Init+0x2dc>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_GPIO_Init+0x2dc>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_GPIO_Init+0x2dc>)
 800109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010be:	4a1b      	ldr	r2, [pc, #108]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ec:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f aeab 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	58000800 	.word	0x58000800

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	58000400 	.word	0x58000400

08001180 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_PWREx_GetVoltageRange+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	58000400 	.word	0x58000400

0800119c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011ae:	d101      	bne.n	80011b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800120e:	d101      	bne.n	8001214 <LL_RCC_HSE_IsReady+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_RCC_HSE_IsReady+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126e:	d101      	bne.n	8001274 <LL_RCC_HSI_IsReady+0x18>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <LL_RCC_HSI_IsReady+0x1a>
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d101      	bne.n	8001306 <LL_RCC_HSI48_IsReady+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_RCC_HSI48_IsReady+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800135a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d101      	bne.n	80013b2 <LL_RCC_LSE_IsReady+0x18>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_RCC_LSE_IsReady+0x1a>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b02      	cmp	r3, #2
 8001414:	d101      	bne.n	800141a <LL_RCC_LSI1_IsReady+0x18>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <LL_RCC_LSI1_IsReady+0x1a>
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b08      	cmp	r3, #8
 800147c:	d101      	bne.n	8001482 <LL_RCC_LSI2_IsReady+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_RCC_LSI2_IsReady+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b02      	cmp	r3, #2
 8001508:	d101      	bne.n	800150e <LL_RCC_MSI_IsReady+0x16>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_RCC_MSI_IsReady+0x18>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001552:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2bb0      	cmp	r3, #176	; 0xb0
 8001558:	d901      	bls.n	800155e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800155a:	23b0      	movs	r3, #176	; 0xb0
 800155c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800155e:	687b      	ldr	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 0203 	bic.w	r2, r3, #3
 80015a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800160e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001636:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800163a:	f023 020f 	bic.w	r2, r3, #15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001646:	4313      	orrs	r3, r2
 8001648:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800166a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173c:	6013      	str	r3, [r2, #0]
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800175a:	d101      	bne.n	8001760 <LL_RCC_PLL_IsReady+0x18>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <LL_RCC_PLL_IsReady+0x1a>
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80017ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0303 	and.w	r3, r3, #3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d101      	bne.n	80017e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001806:	d101      	bne.n	800180c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d101      	bne.n	8001832 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001850:	d101      	bne.n	8001856 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001874:	d101      	bne.n	800187a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b08d      	sub	sp, #52	; 0x34
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e363      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 808d 	beq.w	80019c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a8:	f7ff fe89 	bl	80015be <LL_RCC_GetSysClkSource>
 80018ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ae:	f7ff ff82 	bl	80017b6 <LL_RCC_PLL_GetMainSource>
 80018b2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3e>
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d147      	bne.n	8001950 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d144      	bne.n	8001950 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e347      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80018d6:	f7ff fe34 	bl	8001542 <LL_RCC_MSI_GetRange>
 80018da:	4603      	mov	r3, r0
 80018dc:	429c      	cmp	r4, r3
 80018de:	d914      	bls.n	800190a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fd31 	bl	800234c <RCC_SetFlashLatencyFromMSIRange>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e336      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fe0e 	bl	800151a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe32 	bl	800156c <LL_RCC_MSI_SetCalibTrimming>
 8001908:	e013      	b.n	8001932 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fe03 	bl	800151a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fe27 	bl	800156c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd12 	bl	800234c <RCC_SetFlashLatencyFromMSIRange>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e317      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001932:	f000 fccb 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8001936:	4603      	mov	r3, r0
 8001938:	4aa4      	ldr	r2, [pc, #656]	; (8001bcc <HAL_RCC_OscConfig+0x344>)
 800193a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800193c:	4ba4      	ldr	r3, [pc, #656]	; (8001bd0 <HAL_RCC_OscConfig+0x348>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f82d 	bl	80009a0 <HAL_InitTick>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d039      	beq.n	80019c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e308      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01e      	beq.n	8001996 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001958:	f7ff fdb0 	bl	80014bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800195c:	f7ff f86e 	bl	8000a3c <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001964:	f7ff f86a 	bl	8000a3c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e2f5      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001976:	f7ff fdbf 	bl	80014f8 <LL_RCC_MSI_IsReady>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f1      	beq.n	8001964 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fdc8 	bl	800151a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fdec 	bl	800156c <LL_RCC_MSI_SetCalibTrimming>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001996:	f7ff fda0 	bl	80014da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800199a:	f7ff f84f 	bl	8000a3c <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a2:	f7ff f84b 	bl	8000a3c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e2d6      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80019b4:	f7ff fda0 	bl	80014f8 <LL_RCC_MSI_IsReady>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f1      	bne.n	80019a2 <HAL_RCC_OscConfig+0x11a>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d047      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ce:	f7ff fdf6 	bl	80015be <LL_RCC_GetSysClkSource>
 80019d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d4:	f7ff feef 	bl	80017b6 <LL_RCC_PLL_GetMainSource>
 80019d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x164>
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d108      	bne.n	80019f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d134      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e2b4      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x180>
 8001a02:	f7ff fbdd 	bl	80011c0 <LL_RCC_HSE_Enable>
 8001a06:	e001      	b.n	8001a0c <HAL_RCC_OscConfig+0x184>
 8001a08:	f7ff fbe9 	bl	80011de <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d012      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f812 	bl	8000a3c <HAL_GetTick>
 8001a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f80e 	bl	8000a3c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e299      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a2e:	f7ff fbe5 	bl	80011fc <LL_RCC_HSE_IsReady>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f1      	beq.n	8001a1c <HAL_RCC_OscConfig+0x194>
 8001a38:	e011      	b.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ffff 	bl	8000a3c <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a42:	f7fe fffb 	bl	8000a3c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	; 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e286      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a54:	f7ff fbd2 	bl	80011fc <LL_RCC_HSE_IsReady>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d04c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	f7ff fda8 	bl	80015be <LL_RCC_GetSysClkSource>
 8001a6e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a70:	f7ff fea1 	bl	80017b6 <LL_RCC_PLL_GetMainSource>
 8001a74:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_OscConfig+0x200>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d10e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e266      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fbf1 	bl	8001280 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a9e:	e031      	b.n	8001b04 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d019      	beq.n	8001adc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	f7ff fbba 	bl	8001220 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7fe ffc6 	bl	8000a3c <HAL_GetTick>
 8001ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7fe ffc2 	bl	8000a3c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e24d      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ac6:	f7ff fbc9 	bl	800125c <LL_RCC_HSI_IsReady>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f1      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fbd3 	bl	8001280 <LL_RCC_HSI_SetCalibTrimming>
 8001ada:	e013      	b.n	8001b04 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001adc:	f7ff fbaf 	bl	800123e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe ffac 	bl	8000a3c <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7fe ffa8 	bl	8000a3c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e233      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001afa:	f7ff fbaf 	bl	800125c <LL_RCC_HSI_IsReady>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f1      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a3 	beq.w	8001c64 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d076      	beq.n	8001c14 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d046      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001b32:	f7ff fc66 	bl	8001402 <LL_RCC_LSI1_IsReady>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d113      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001b3c:	f7ff fc3f 	bl	80013be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b40:	f7fe ff7c 	bl	8000a3c <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b48:	f7fe ff78 	bl	8000a3c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e203      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001b5a:	f7ff fc52 	bl	8001402 <LL_RCC_LSI1_IsReady>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f1      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001b64:	f7ff fc5f 	bl	8001426 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7fe ff68 	bl	8000a3c <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b70:	f7fe ff64 	bl	8000a3c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ef      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001b82:	f7ff fc72 	bl	800146a <LL_RCC_LSI2_IsReady>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc7c 	bl	800148e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001b96:	f7ff fc23 	bl	80013e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe ff4f 	bl	8000a3c <HAL_GetTick>
 8001b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ba2:	f7fe ff4b 	bl	8000a3c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1d6      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001bb4:	f7ff fc25 	bl	8001402 <LL_RCC_LSI1_IsReady>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f1      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x31a>
 8001bbe:	e051      	b.n	8001c64 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001bc0:	f7ff fbfd 	bl	80013be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff3a 	bl	8000a3c <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001bca:	e00c      	b.n	8001be6 <HAL_RCC_OscConfig+0x35e>
 8001bcc:	20000024 	.word	0x20000024
 8001bd0:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bd4:	f7fe ff32 	bl	8000a3c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1bd      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001be6:	f7ff fc0c 	bl	8001402 <LL_RCC_LSI1_IsReady>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f1      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001bf0:	f7ff fc2a 	bl	8001448 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001bf6:	f7fe ff21 	bl	8000a3c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1ac      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c08:	f7ff fc2f 	bl	800146a <LL_RCC_LSI2_IsReady>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f1      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001c12:	e027      	b.n	8001c64 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001c14:	f7ff fc18 	bl	8001448 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7fe ff10 	bl	8000a3c <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c20:	f7fe ff0c 	bl	8000a3c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e197      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c32:	f7ff fc1a 	bl	800146a <LL_RCC_LSI2_IsReady>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f1      	bne.n	8001c20 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001c3c:	f7ff fbd0 	bl	80013e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7fe fefc 	bl	8000a3c <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c48:	f7fe fef8 	bl	8000a3c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e183      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001c5a:	f7ff fbd2 	bl	8001402 <LL_RCC_LSI1_IsReady>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f1      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d05b      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	4ba7      	ldr	r3, [pc, #668]	; (8001f10 <HAL_RCC_OscConfig+0x688>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d114      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001c7c:	f7ff fa70 	bl	8001160 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c80:	f7fe fedc 	bl	8000a3c <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7fe fed8 	bl	8000a3c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e163      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9a:	4b9d      	ldr	r3, [pc, #628]	; (8001f10 <HAL_RCC_OscConfig+0x688>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x42c>
 8001cae:	f7ff fb30 	bl	8001312 <LL_RCC_LSE_Enable>
 8001cb2:	e00c      	b.n	8001cce <HAL_RCC_OscConfig+0x446>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d104      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x43e>
 8001cbc:	f7ff fb4b 	bl	8001356 <LL_RCC_LSE_EnableBypass>
 8001cc0:	f7ff fb27 	bl	8001312 <LL_RCC_LSE_Enable>
 8001cc4:	e003      	b.n	8001cce <HAL_RCC_OscConfig+0x446>
 8001cc6:	f7ff fb35 	bl	8001334 <LL_RCC_LSE_Disable>
 8001cca:	f7ff fb55 	bl	8001378 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d014      	beq.n	8001d00 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7fe feb1 	bl	8000a3c <HAL_GetTick>
 8001cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7fe fead 	bl	8000a3c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e136      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001cf4:	f7ff fb51 	bl	800139a <LL_RCC_LSE_IsReady>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ef      	beq.n	8001cde <HAL_RCC_OscConfig+0x456>
 8001cfe:	e013      	b.n	8001d28 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7fe fe9c 	bl	8000a3c <HAL_GetTick>
 8001d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7fe fe98 	bl	8000a3c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e121      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d1e:	f7ff fb3c 	bl	800139a <LL_RCC_LSE_IsReady>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ef      	bne.n	8001d08 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d02c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d014      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d3c:	f7ff fab5 	bl	80012aa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7fe fe7c 	bl	8000a3c <HAL_GetTick>
 8001d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d48:	f7fe fe78 	bl	8000a3c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e103      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001d5a:	f7ff fac8 	bl	80012ee <LL_RCC_HSI48_IsReady>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f1      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4c0>
 8001d64:	e013      	b.n	8001d8e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d66:	f7ff fab1 	bl	80012cc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fe67 	bl	8000a3c <HAL_GetTick>
 8001d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d72:	f7fe fe63 	bl	8000a3c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0ee      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001d84:	f7ff fab3 	bl	80012ee <LL_RCC_HSI48_IsReady>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f1      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80e4 	beq.w	8001f60 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d98:	f7ff fc11 	bl	80015be <LL_RCC_GetSysClkSource>
 8001d9c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	f040 80b4 	bne.w	8001f18 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0203 	and.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d123      	bne.n	8001e06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d11c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d114      	bne.n	8001e06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d10d      	bne.n	8001e06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d05d      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d058      	beq.n	8001ebe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0a1      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e1e:	f7ff fc84 	bl	800172a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e22:	f7fe fe0b 	bl	8000a3c <HAL_GetTick>
 8001e26:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe fe07 	bl	8000a3c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e092      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_OscConfig+0x68c>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e62:	0212      	lsls	r2, r2, #8
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e76:	430a      	orrs	r2, r1
 8001e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e80:	f7ff fc44 	bl	800170c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e94:	f7fe fdd2 	bl	8000a3c <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe fdce 	bl	8000a3c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e059      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	e050      	b.n	8001f60 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e04f      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d147      	bne.n	8001f60 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed0:	f7ff fc1c 	bl	800170c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ee4:	f7fe fdaa 	bl	8000a3c <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe fda6 	bl	8000a3c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e031      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x664>
 8001f0c:	e028      	b.n	8001f60 <HAL_RCC_OscConfig+0x6d8>
 8001f0e:	bf00      	nop
 8001f10:	58000400 	.word	0x58000400
 8001f14:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d01e      	beq.n	8001f5c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	f7ff fc04 	bl	800172a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fd8b 	bl	8000a3c <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe fd87 	bl	8000a3c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e012      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ef      	bne.n	8001f2a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_OscConfig+0x6e4>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	60cb      	str	r3, [r1, #12]
 8001f5a:	e001      	b.n	8001f60 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3734      	adds	r7, #52	; 0x34
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	eefefffc 	.word	0xeefefffc

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e12d      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b98      	ldr	r3, [pc, #608]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d91b      	bls.n	8001fca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b95      	ldr	r3, [pc, #596]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4993      	ldr	r1, [pc, #588]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa2:	f7fe fd4b 	bl	8000a3c <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001faa:	f7fe fd47 	bl	8000a3c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e111      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbc:	4b8a      	ldr	r3, [pc, #552]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d1ef      	bne.n	8001faa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fafb 	bl	80015d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fd2c 	bl	8000a3c <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fe8:	f7fe fd28 	bl	8000a3c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0f2      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ffa:	f7ff fbe8 	bl	80017ce <LL_RCC_IsActiveFlag_HPRE>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f1      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d016      	beq.n	800203e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff faf2 	bl	80015fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800201a:	f7fe fd0f 	bl	8000a3c <HAL_GetTick>
 800201e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002022:	f7fe fd0b 	bl	8000a3c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0d5      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002034:	f7ff fbdd 	bl	80017f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f1      	beq.n	8002022 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff faeb 	bl	800162a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002054:	f7fe fcf2 	bl	8000a3c <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800205c:	f7fe fcee 	bl	8000a3c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0b8      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800206e:	f7ff fbd3 	bl	8001818 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f1      	beq.n	800205c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fae5 	bl	8001658 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800208e:	f7fe fcd5 	bl	8000a3c <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002096:	f7fe fcd1 	bl	8000a3c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e09b      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020a8:	f7ff fbc9 	bl	800183e <LL_RCC_IsActiveFlag_PPRE1>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f1      	beq.n	8002096 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d017      	beq.n	80020ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fadb 	bl	8001680 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020ca:	f7fe fcb7 	bl	8000a3c <HAL_GetTick>
 80020ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020d2:	f7fe fcb3 	bl	8000a3c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e07d      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80020e4:	f7ff fbbd 	bl	8001862 <LL_RCC_IsActiveFlag_PPRE2>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f1      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d043      	beq.n	8002182 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d106      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002102:	f7ff f87b 	bl	80011fc <LL_RCC_HSE_IsReady>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11e      	bne.n	800214a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e067      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002118:	f7ff fb16 	bl	8001748 <LL_RCC_PLL_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e05c      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800212e:	f7ff f9e3 	bl	80014f8 <LL_RCC_MSI_IsReady>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e051      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800213c:	f7ff f88e 	bl	800125c <LL_RCC_HSI_IsReady>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e04a      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fa21 	bl	8001596 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002154:	f7fe fc72 	bl	8000a3c <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7fe fc6e 	bl	8000a3c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e036      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	f7ff fa24 	bl	80015be <LL_RCC_GetSysClkSource>
 8002176:	4602      	mov	r2, r0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	429a      	cmp	r2, r3
 8002180:	d1ec      	bne.n	800215c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d21b      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 0207 	bic.w	r2, r3, #7
 8002198:	4913      	ldr	r1, [pc, #76]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a0:	f7fe fc4c 	bl	8000a3c <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021a8:	f7fe fc48 	bl	8000a3c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e012      	b.n	80021e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1ef      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021c8:	f000 f880 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_RCC_ClockConfig+0x27c>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80021d2:	f7fe fc3f 	bl	8000a54 <HAL_GetTickPrio>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fbe1 	bl	80009a0 <HAL_InitTick>
 80021de:	4603      	mov	r3, r0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	58004000 	.word	0x58004000
 80021ec:	20000024 	.word	0x20000024

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	f7ff f9e2 	bl	80015be <LL_RCC_GetSysClkSource>
 80021fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002202:	f7ff f99e 	bl	8001542 <LL_RCC_MSI_GetRange>
 8002206:	4603      	mov	r3, r0
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e04b      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d102      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e045      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b08      	cmp	r3, #8
 8002228:	d10a      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800222a:	f7fe ffb7 	bl	800119c <LL_RCC_HSE_IsEnabledDiv2>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e03a      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e037      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002240:	f7ff fab9 	bl	80017b6 <LL_RCC_PLL_GetMainSource>
 8002244:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d003      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x64>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x6a>
 8002252:	e00d      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002256:	60bb      	str	r3, [r7, #8]
        break;
 8002258:	e015      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800225a:	f7fe ff9f 	bl	800119c <LL_RCC_HSE_IsEnabledDiv2>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002266:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002268:	e00d      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800226c:	60bb      	str	r3, [r7, #8]
        break;
 800226e:	e00a      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002270:	f7ff f967 	bl	8001542 <LL_RCC_MSI_GetRange>
 8002274:	4603      	mov	r3, r0
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	60bb      	str	r3, [r7, #8]
        break;
 8002284:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002286:	f7ff fa71 	bl	800176c <LL_RCC_PLL_GetN>
 800228a:	4602      	mov	r2, r0
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	fb03 f402 	mul.w	r4, r3, r2
 8002292:	f7ff fa84 	bl	800179e <LL_RCC_PLL_GetDivider>
 8002296:	4603      	mov	r3, r0
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	3301      	adds	r3, #1
 800229c:	fbb4 f4f3 	udiv	r4, r4, r3
 80022a0:	f7ff fa71 	bl	8001786 <LL_RCC_PLL_GetR>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0f5b      	lsrs	r3, r3, #29
 80022a8:	3301      	adds	r3, #1
 80022aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80022ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	080041c4 	.word	0x080041c4
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	003d0900 	.word	0x003d0900
 80022c8:	007a1200 	.word	0x007a1200

080022cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b598      	push	{r3, r4, r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022d0:	f7ff ff8e 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80022d4:	4604      	mov	r4, r0
 80022d6:	f7ff f9e7 	bl	80016a8 <LL_RCC_GetAHBPrescaler>
 80022da:	4603      	mov	r3, r0
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd98      	pop	{r3, r4, r7, pc}
 80022f0:	08004164 	.word	0x08004164

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b598      	push	{r3, r4, r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022f8:	f7ff ffe8 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022fc:	4604      	mov	r4, r0
 80022fe:	f7ff f9ed 	bl	80016dc <LL_RCC_GetAPB1Prescaler>
 8002302:	4603      	mov	r3, r0
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_RCC_GetPCLK1Freq+0x28>)
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd98      	pop	{r3, r4, r7, pc}
 800231c:	080041a4 	.word	0x080041a4

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b598      	push	{r3, r4, r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002324:	f7ff ffd2 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8002328:	4604      	mov	r4, r0
 800232a:	f7ff f9e3 	bl	80016f4 <LL_RCC_GetAPB2Prescaler>
 800232e:	4603      	mov	r3, r0
 8002330:	0adb      	lsrs	r3, r3, #11
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd98      	pop	{r3, r4, r7, pc}
 8002348:	080041a4 	.word	0x080041a4

0800234c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2bb0      	cmp	r3, #176	; 0xb0
 8002358:	d903      	bls.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e007      	b.n	8002372 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002372:	f7ff f9a5 	bl	80016c0 <LL_RCC_GetAHB4Prescaler>
 8002376:	4603      	mov	r3, r0
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9c      	lsrs	r4, r3, #18
 8002396:	f7fe fef3 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	4620      	mov	r0, r4
 80023a0:	f000 f80c 	bl	80023bc <RCC_SetFlashLatency>
 80023a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}
 80023ae:	bf00      	nop
 80023b0:	080041c4 	.word	0x080041c4
 80023b4:	08004164 	.word	0x08004164
 80023b8:	431bde83 	.word	0x431bde83

080023bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b093      	sub	sp, #76	; 0x4c
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <RCC_SetFlashLatency+0xe8>)
 80023c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80023cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80023d2:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <RCC_SetFlashLatency+0xec>)
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023de:	4b33      	ldr	r3, [pc, #204]	; (80024ac <RCC_SetFlashLatency+0xf0>)
 80023e0:	f107 040c 	add.w	r4, r7, #12
 80023e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80023ea:	2300      	movs	r3, #0
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	d11a      	bne.n	800242c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
 80023fa:	e013      	b.n	8002424 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3348      	adds	r3, #72	; 0x48
 8002402:	443b      	add	r3, r7
 8002404:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	d807      	bhi.n	800241e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800240e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3348      	adds	r3, #72	; 0x48
 8002414:	443b      	add	r3, r7
 8002416:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800241a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800241c:	e020      	b.n	8002460 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800241e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002420:	3301      	adds	r3, #1
 8002422:	643b      	str	r3, [r7, #64]	; 0x40
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	2b03      	cmp	r3, #3
 8002428:	d9e8      	bls.n	80023fc <RCC_SetFlashLatency+0x40>
 800242a:	e019      	b.n	8002460 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002430:	e013      	b.n	800245a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	3348      	adds	r3, #72	; 0x48
 8002438:	443b      	add	r3, r7
 800243a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d807      	bhi.n	8002454 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3348      	adds	r3, #72	; 0x48
 800244a:	443b      	add	r3, r7
 800244c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002452:	e005      	b.n	8002460 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	3301      	adds	r3, #1
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245c:	2b02      	cmp	r3, #2
 800245e:	d9e8      	bls.n	8002432 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <RCC_SetFlashLatency+0xf4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 0207 	bic.w	r2, r3, #7
 8002468:	4911      	ldr	r1, [pc, #68]	; (80024b0 <RCC_SetFlashLatency+0xf4>)
 800246a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002470:	f7fe fae4 	bl	8000a3c <HAL_GetTick>
 8002474:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002476:	e008      	b.n	800248a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002478:	f7fe fae0 	bl	8000a3c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e007      	b.n	800249a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <RCC_SetFlashLatency+0xf4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002494:	429a      	cmp	r2, r3
 8002496:	d1ef      	bne.n	8002478 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	374c      	adds	r7, #76	; 0x4c
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	08004138 	.word	0x08004138
 80024a8:	08004148 	.word	0x08004148
 80024ac:	08004154 	.word	0x08004154
 80024b0:	58004000 	.word	0x58004000

080024b4 <LL_RCC_LSE_IsEnabled>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <LL_RCC_LSE_IsEnabled+0x18>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_RCC_LSE_IsEnabled+0x1a>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_LSE_IsReady>:
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d101      	bne.n	80024f0 <LL_RCC_LSE_IsReady+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_RCC_LSE_IsReady+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_SetRFWKPClockSource>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_RCC_SetSMPSClockSource>:
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_RCC_SetSMPSPrescaler>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4313      	orrs	r3, r2
 800256a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_RCC_SetUSARTClockSource>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002588:	f023 0203 	bic.w	r2, r3, #3
 800258c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_SetLPUARTClockSource>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_SetI2CClockSource>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80025f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_RCC_SetLPTIMClockSource>:
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_RCC_SetSAIClockSource>:
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_SetRNGClockSource>:
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800267e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_RCC_SetCLK48ClockSource>:
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_SetUSBClockSource>:
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffe3 	bl	8002696 <LL_RCC_SetCLK48ClockSource>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <LL_RCC_SetADCClockSource>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_SetRTCClockSource>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_RCC_GetRTCClockSource>:
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_RCC_ForceBackupDomainReset>:
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_RCC_ReleaseBackupDomainReset>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_RCC_PLLSAI1_Enable>:
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800279c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a0:	6013      	str	r3, [r2, #0]
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_PLLSAI1_Disable>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <LL_RCC_PLLSAI1_IsReady>:
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027dc:	d101      	bne.n	80027e2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b088      	sub	sp, #32
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80027f6:	2300      	movs	r3, #0
 80027f8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80027fa:	2300      	movs	r3, #0
 80027fc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d034      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002812:	d021      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002814:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002818:	d81b      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800281a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800281e:	d01d      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002820:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002824:	d815      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282e:	d110      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002840:	e00d      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f947 	bl	8002ada <RCCEx_PLLSAI1_ConfigNP>
 800284c:	4603      	mov	r3, r0
 800284e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002850:	e005      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	77fb      	strb	r3, [r7, #31]
        break;
 8002856:	e002      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800285c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fee8 	bl	800263e <LL_RCC_SetSAIClockSource>
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7ffb      	ldrb	r3, [r7, #31]
 8002872:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287c:	2b00      	cmp	r3, #0
 800287e:	d046      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002880:	f7ff ff56 	bl	8002730 <LL_RCC_GetRTCClockSource>
 8002884:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	429a      	cmp	r2, r3
 800288e:	d03c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002890:	f7fe fc66 	bl	8001160 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff30 	bl	8002704 <LL_RCC_SetRTCClockSource>
 80028a4:	e02e      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80028b0:	f7ff ff4b 	bl	800274a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80028b4:	f7ff ff5a 	bl	800276c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80028d0:	f7ff fdf0 	bl	80024b4 <LL_RCC_LSE_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d114      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028da:	f7fe f8af 	bl	8000a3c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80028e0:	e00b      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe f8ab 	bl	8000a3c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d902      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	77fb      	strb	r3, [r7, #31]
              break;
 80028f8:	e004      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80028fa:	f7ff fded 	bl	80024d8 <LL_RCC_LSE_IsReady>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d1ee      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002904:	7ffb      	ldrb	r3, [r7, #31]
 8002906:	77bb      	strb	r3, [r7, #30]
 8002908:	e001      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290a:	7ffb      	ldrb	r3, [r7, #31]
 800290c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fe2a 	bl	8002578 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fe35 	bl	80025a4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fe5d 	bl	800260a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fe52 	bl	800260a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fe2a 	bl	80025d0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe1f 	bl	80025d0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d022      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe8d 	bl	80026c2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b0:	d107      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f8dd 	bl	8002b90 <RCCEx_PLLSAI1_ConfigNQ>
 80029d6:	4603      	mov	r3, r0
 80029d8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80029da:	7ffb      	ldrb	r3, [r7, #31]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80029e0:	7ffb      	ldrb	r3, [r7, #31]
 80029e2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02b      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a02:	d003      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe2a 	bl	800266a <LL_RCC_SetRNGClockSource>
 8002a16:	e00a      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff fe21 	bl	800266a <LL_RCC_SetRNGClockSource>
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fe34 	bl	8002696 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a36:	d107      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d022      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe3d 	bl	80026d8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a66:	d107      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a80:	d10b      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f8dd 	bl	8002c46 <RCCEx_PLLSAI1_ConfigNR>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a90:	7ffb      	ldrb	r3, [r7, #31]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fd26 	bl	80024fc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fd45 	bl	8002550 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fd2c 	bl	8002528 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ad0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ae6:	f7ff fe61 	bl	80027ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002aea:	f7fd ffa7 	bl	8000a3c <HAL_GetTick>
 8002aee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002af0:	e009      	b.n	8002b06 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af2:	f7fd ffa3 	bl	8000a3c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d902      	bls.n	8002b06 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e004      	b.n	8002b10 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b06:	f7ff fe60 	bl	80027ca <LL_RCC_PLLSAI1_IsReady>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d137      	bne.n	8002b86 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b44:	f7ff fe23 	bl	800278e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fd ff78 	bl	8000a3c <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b4e:	e009      	b.n	8002b64 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b50:	f7fd ff74 	bl	8000a3c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	73fb      	strb	r3, [r7, #15]
        break;
 8002b62:	e004      	b.n	8002b6e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b64:	f7ff fe31 	bl	80027ca <LL_RCC_PLLSAI1_IsReady>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d1f0      	bne.n	8002b50 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d108      	bne.n	8002b86 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002b9c:	f7ff fe06 	bl	80027ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ba0:	f7fd ff4c 	bl	8000a3c <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ba6:	e009      	b.n	8002bbc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba8:	f7fd ff48 	bl	8000a3c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bba:	e004      	b.n	8002bc6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bbc:	f7ff fe05 	bl	80027ca <LL_RCC_PLLSAI1_IsReady>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d137      	bne.n	8002c3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be0:	4313      	orrs	r3, r2
 8002be2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002bfa:	f7ff fdc8 	bl	800278e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfe:	f7fd ff1d 	bl	8000a3c <HAL_GetTick>
 8002c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c04:	e009      	b.n	8002c1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c06:	f7fd ff19 	bl	8000a3c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d902      	bls.n	8002c1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	73fb      	strb	r3, [r7, #15]
        break;
 8002c18:	e004      	b.n	8002c24 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c1a:	f7ff fdd6 	bl	80027ca <LL_RCC_PLLSAI1_IsReady>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d1f0      	bne.n	8002c06 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d108      	bne.n	8002c3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002c52:	f7ff fdab 	bl	80027ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c56:	f7fd fef1 	bl	8000a3c <HAL_GetTick>
 8002c5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c5c:	e009      	b.n	8002c72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c5e:	f7fd feed 	bl	8000a3c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d902      	bls.n	8002c72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e004      	b.n	8002c7c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c72:	f7ff fdaa 	bl	80027ca <LL_RCC_PLLSAI1_IsReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d137      	bne.n	8002cf2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c96:	4313      	orrs	r3, r2
 8002c98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cac:	4313      	orrs	r3, r2
 8002cae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002cb0:	f7ff fd6d 	bl	800278e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fd fec2 	bl	8000a3c <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cba:	e009      	b.n	8002cd0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbc:	f7fd febe 	bl	8000a3c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d902      	bls.n	8002cd0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cce:	e004      	b.n	8002cda <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cd0:	f7ff fd7b 	bl	80027ca <LL_RCC_PLLSAI1_IsReady>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d1f0      	bne.n	8002cbc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d108      	bne.n	8002cf2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <LL_RCC_GetUSARTClockSource>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4013      	ands	r3, r2
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_GetLPUARTClockSource>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4013      	ands	r3, r2
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e042      	b.n	8002dd4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7fd fcef 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2224      	movs	r2, #36	; 0x24
 8002d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fe22 	bl	80039d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fbf7 	bl	8003580 <UART_SetConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e01b      	b.n	8002dd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fea1 	bl	8003b14 <UART_CheckIdleState>
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d17b      	bne.n	8002eee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_UART_Transmit+0x26>
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e074      	b.n	8002ef0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2221      	movs	r2, #33	; 0x21
 8002e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e16:	f7fd fe11 	bl	8000a3c <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d108      	bne.n	8002e48 <HAL_UART_Transmit+0x6c>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e003      	b.n	8002e50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e50:	e030      	b.n	8002eb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 ff03 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e03d      	b.n	8002ef0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	e007      	b.n	8002ea2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1c8      	bne.n	8002e52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fecc 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e006      	b.n	8002ef0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0ba      	sub	sp, #232	; 0xe8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f22:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f26:	4013      	ands	r3, r2
 8002f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11b      	bne.n	8002f6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 82e3 	beq.w	8003528 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
      }
      return;
 8002f6a:	e2dd      	b.n	8003528 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8123 	beq.w	80031bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	; (80031b0 <HAL_UART_IRQHandler+0x2b8>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_UART_IRQHandler+0x2bc>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8116 	beq.w	80031bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d011      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xc8>
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d011      	beq.n	8002ff0 <HAL_UART_IRQHandler+0xf8>
 8002fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d011      	beq.n	8003020 <HAL_UART_IRQHandler+0x128>
 8002ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2204      	movs	r2, #4
 800300e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800302c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003038:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800303c:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_UART_IRQHandler+0x2b8>)
 800303e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2208      	movs	r2, #8
 800304a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f043 0208 	orr.w	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <HAL_UART_IRQHandler+0x196>
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8249 	beq.w	800352c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d013      	beq.n	80030ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d054      	beq.n	800319c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fe1f 	bl	8003d36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d146      	bne.n	8003194 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3308      	adds	r3, #8
 800310c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800311c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800313e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1d9      	bne.n	8003106 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d017      	beq.n	800318c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_UART_IRQHandler+0x2c0>)
 8003164:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fe0f 	bl	8000d90 <HAL_DMA_Abort_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d019      	beq.n	80031ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003186:	4610      	mov	r0, r2
 8003188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318a:	e00f      	b.n	80031ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9e1 	bl	8003554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003192:	e00b      	b.n	80031ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9dd 	bl	8003554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319a:	e007      	b.n	80031ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f9d9 	bl	8003554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80031aa:	e1bf      	b.n	800352c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	bf00      	nop
    return;
 80031ae:	e1bd      	b.n	800352c <HAL_UART_IRQHandler+0x634>
 80031b0:	10000001 	.word	0x10000001
 80031b4:	04000120 	.word	0x04000120
 80031b8:	08003e03 	.word	0x08003e03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 8153 	bne.w	800346c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 814c 	beq.w	800346c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8145 	beq.w	800346c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2210      	movs	r2, #16
 80031e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	f040 80bb 	bne.w	8003370 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 818f 	beq.w	8003530 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321c:	429a      	cmp	r2, r3
 800321e:	f080 8187 	bcs.w	8003530 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 8087 	bne.w	800334e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800326a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800326e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1da      	bne.n	8003240 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3308      	adds	r3, #8
 8003290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3308      	adds	r3, #8
 80032aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e1      	bne.n	800328a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e3      	bne.n	80032c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800331a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331c:	f023 0310 	bic.w	r3, r3, #16
 8003320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800333c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e4      	bne.n	800330c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fcc2 	bl	8000cd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8fd 	bl	8003568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800336e:	e0df      	b.n	8003530 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80d1 	beq.w	8003534 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80cc 	beq.w	8003534 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033be:	647b      	str	r3, [r7, #68]	; 0x44
 80033c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e4      	bne.n	800339c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033fa:	633a      	str	r2, [r7, #48]	; 0x30
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e1      	bne.n	80033d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	617b      	str	r3, [r7, #20]
   return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e4      	bne.n	8003422 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800345e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f87f 	bl	8003568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800346a:	e063      	b.n	8003534 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <HAL_UART_IRQHandler+0x59e>
 8003478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800348c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fcf8 	bl	8003e84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003494:	e051      	b.n	800353a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d014      	beq.n	80034cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03a      	beq.n	8003538 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
    }
    return;
 80034ca:	e035      	b.n	8003538 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_UART_IRQHandler+0x5f4>
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fca2 	bl	8003e2e <UART_EndTransmit_IT>
    return;
 80034ea:	e026      	b.n	800353a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_UART_IRQHandler+0x614>
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fcd1 	bl	8003eac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800350a:	e016      	b.n	800353a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_UART_IRQHandler+0x642>
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351c:	2b00      	cmp	r3, #0
 800351e:	da0c      	bge.n	800353a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fcb9 	bl	8003e98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003526:	e008      	b.n	800353a <HAL_UART_IRQHandler+0x642>
      return;
 8003528:	bf00      	nop
 800352a:	e006      	b.n	800353a <HAL_UART_IRQHandler+0x642>
    return;
 800352c:	bf00      	nop
 800352e:	e004      	b.n	800353a <HAL_UART_IRQHandler+0x642>
      return;
 8003530:	bf00      	nop
 8003532:	e002      	b.n	800353a <HAL_UART_IRQHandler+0x642>
      return;
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <HAL_UART_IRQHandler+0x642>
    return;
 8003538:	bf00      	nop
  }
}
 800353a:	37e8      	adds	r7, #232	; 0xe8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b08c      	sub	sp, #48	; 0x30
 8003586:	af00      	add	r7, sp, #0
 8003588:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	431a      	orrs	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	431a      	orrs	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4baf      	ldr	r3, [pc, #700]	; (800386c <UART_SetConfig+0x2ec>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4aa4      	ldr	r2, [pc, #656]	; (8003870 <UART_SetConfig+0x2f0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e8:	4313      	orrs	r3, r2
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003600:	430b      	orrs	r3, r1
 8003602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f023 010f 	bic.w	r1, r3, #15
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a95      	ldr	r2, [pc, #596]	; (8003874 <UART_SetConfig+0x2f4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d125      	bne.n	8003670 <UART_SetConfig+0xf0>
 8003624:	2003      	movs	r0, #3
 8003626:	f7ff fb69 	bl	8002cfc <LL_RCC_GetUSARTClockSource>
 800362a:	4603      	mov	r3, r0
 800362c:	2b03      	cmp	r3, #3
 800362e:	d81b      	bhi.n	8003668 <UART_SetConfig+0xe8>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0xb8>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	08003659 	.word	0x08003659
 8003640:	08003651 	.word	0x08003651
 8003644:	08003661 	.word	0x08003661
 8003648:	2301      	movs	r3, #1
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e042      	b.n	80036d6 <UART_SetConfig+0x156>
 8003650:	2302      	movs	r3, #2
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e03e      	b.n	80036d6 <UART_SetConfig+0x156>
 8003658:	2304      	movs	r3, #4
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365e:	e03a      	b.n	80036d6 <UART_SetConfig+0x156>
 8003660:	2308      	movs	r3, #8
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003666:	e036      	b.n	80036d6 <UART_SetConfig+0x156>
 8003668:	2310      	movs	r3, #16
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366e:	e032      	b.n	80036d6 <UART_SetConfig+0x156>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a7e      	ldr	r2, [pc, #504]	; (8003870 <UART_SetConfig+0x2f0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d12a      	bne.n	80036d0 <UART_SetConfig+0x150>
 800367a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800367e:	f7ff fb4d 	bl	8002d1c <LL_RCC_GetLPUARTClockSource>
 8003682:	4603      	mov	r3, r0
 8003684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003688:	d01a      	beq.n	80036c0 <UART_SetConfig+0x140>
 800368a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800368e:	d81b      	bhi.n	80036c8 <UART_SetConfig+0x148>
 8003690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003694:	d00c      	beq.n	80036b0 <UART_SetConfig+0x130>
 8003696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369a:	d815      	bhi.n	80036c8 <UART_SetConfig+0x148>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <UART_SetConfig+0x128>
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d008      	beq.n	80036b8 <UART_SetConfig+0x138>
 80036a6:	e00f      	b.n	80036c8 <UART_SetConfig+0x148>
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e012      	b.n	80036d6 <UART_SetConfig+0x156>
 80036b0:	2302      	movs	r3, #2
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e00e      	b.n	80036d6 <UART_SetConfig+0x156>
 80036b8:	2304      	movs	r3, #4
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036be:	e00a      	b.n	80036d6 <UART_SetConfig+0x156>
 80036c0:	2308      	movs	r3, #8
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c6:	e006      	b.n	80036d6 <UART_SetConfig+0x156>
 80036c8:	2310      	movs	r3, #16
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ce:	e002      	b.n	80036d6 <UART_SetConfig+0x156>
 80036d0:	2310      	movs	r3, #16
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a65      	ldr	r2, [pc, #404]	; (8003870 <UART_SetConfig+0x2f0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	f040 8097 	bne.w	8003810 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d823      	bhi.n	8003732 <UART_SetConfig+0x1b2>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0x170>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003715 	.word	0x08003715
 80036f4:	08003733 	.word	0x08003733
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003733 	.word	0x08003733
 8003700:	08003723 	.word	0x08003723
 8003704:	08003733 	.word	0x08003733
 8003708:	08003733 	.word	0x08003733
 800370c:	08003733 	.word	0x08003733
 8003710:	0800372b 	.word	0x0800372b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7fe fdee 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800371a:	e010      	b.n	800373e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <UART_SetConfig+0x2f8>)
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003720:	e00d      	b.n	800373e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7fe fd65 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003726:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003728:	e009      	b.n	800373e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003730:	e005      	b.n	800373e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800373c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 812b 	beq.w	800399c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	4a4c      	ldr	r2, [pc, #304]	; (800387c <UART_SetConfig+0x2fc>)
 800374c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003750:	461a      	mov	r2, r3
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	fbb3 f3f2 	udiv	r3, r3, r2
 8003758:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d305      	bcc.n	8003776 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	429a      	cmp	r2, r3
 8003774:	d903      	bls.n	800377e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800377c:	e10e      	b.n	800399c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2200      	movs	r2, #0
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	60fa      	str	r2, [r7, #12]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	4a3c      	ldr	r2, [pc, #240]	; (800387c <UART_SetConfig+0x2fc>)
 800378c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003790:	b29b      	uxth	r3, r3
 8003792:	2200      	movs	r2, #0
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a0:	f7fc fcec 	bl	800017c <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	020b      	lsls	r3, r1, #8
 80037b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037ba:	0202      	lsls	r2, r0, #8
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	6849      	ldr	r1, [r1, #4]
 80037c0:	0849      	lsrs	r1, r1, #1
 80037c2:	2000      	movs	r0, #0
 80037c4:	460c      	mov	r4, r1
 80037c6:	4605      	mov	r5, r0
 80037c8:	eb12 0804 	adds.w	r8, r2, r4
 80037cc:	eb43 0905 	adc.w	r9, r3, r5
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	469a      	mov	sl, r3
 80037d8:	4693      	mov	fp, r2
 80037da:	4652      	mov	r2, sl
 80037dc:	465b      	mov	r3, fp
 80037de:	4640      	mov	r0, r8
 80037e0:	4649      	mov	r1, r9
 80037e2:	f7fc fccb 	bl	800017c <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4613      	mov	r3, r2
 80037ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f4:	d308      	bcc.n	8003808 <UART_SetConfig+0x288>
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fc:	d204      	bcs.n	8003808 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	e0c9      	b.n	800399c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800380e:	e0c5      	b.n	800399c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003818:	d16d      	bne.n	80038f6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800381a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800381e:	3b01      	subs	r3, #1
 8003820:	2b07      	cmp	r3, #7
 8003822:	d82d      	bhi.n	8003880 <UART_SetConfig+0x300>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <UART_SetConfig+0x2ac>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800384d 	.word	0x0800384d
 8003830:	08003855 	.word	0x08003855
 8003834:	08003881 	.word	0x08003881
 8003838:	0800385b 	.word	0x0800385b
 800383c:	08003881 	.word	0x08003881
 8003840:	08003881 	.word	0x08003881
 8003844:	08003881 	.word	0x08003881
 8003848:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7fe fd68 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003852:	e01b      	b.n	800388c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <UART_SetConfig+0x2f8>)
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003858:	e018      	b.n	800388c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe fcc9 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800385e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003860:	e014      	b.n	800388c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003868:	e010      	b.n	800388c <UART_SetConfig+0x30c>
 800386a:	bf00      	nop
 800386c:	cfff69f3 	.word	0xcfff69f3
 8003870:	40008000 	.word	0x40008000
 8003874:	40013800 	.word	0x40013800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	08004204 	.word	0x08004204
      default:
        pclk = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800388a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8084 	beq.w	800399c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <UART_SetConfig+0x448>)
 800389a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389e:	461a      	mov	r2, r3
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80038a6:	005a      	lsls	r2, r3, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	441a      	add	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d916      	bls.n	80038ee <UART_SetConfig+0x36e>
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c6:	d212      	bcs.n	80038ee <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f023 030f 	bic.w	r3, r3, #15
 80038d0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	b29a      	uxth	r2, r3
 80038de:	8bfb      	ldrh	r3, [r7, #30]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	8bfa      	ldrh	r2, [r7, #30]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	e056      	b.n	800399c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038f4:	e052      	b.n	800399c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038fa:	3b01      	subs	r3, #1
 80038fc:	2b07      	cmp	r3, #7
 80038fe:	d822      	bhi.n	8003946 <UART_SetConfig+0x3c6>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x388>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003929 	.word	0x08003929
 800390c:	08003931 	.word	0x08003931
 8003910:	08003947 	.word	0x08003947
 8003914:	08003937 	.word	0x08003937
 8003918:	08003947 	.word	0x08003947
 800391c:	08003947 	.word	0x08003947
 8003920:	08003947 	.word	0x08003947
 8003924:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe fcfa 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800392e:	e010      	b.n	8003952 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b26      	ldr	r3, [pc, #152]	; (80039cc <UART_SetConfig+0x44c>)
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003934:	e00d      	b.n	8003952 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe fc5b 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800393c:	e009      	b.n	8003952 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003944:	e005      	b.n	8003952 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003950:	bf00      	nop
    }

    if (pclk != 0U)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d021      	beq.n	800399c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <UART_SetConfig+0x448>)
 800395e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003962:	461a      	mov	r2, r3
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	fbb3 f2f2 	udiv	r2, r3, r2
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	441a      	add	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	d909      	bls.n	8003996 <UART_SetConfig+0x416>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d205      	bcs.n	8003996 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	b29a      	uxth	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	e002      	b.n	800399c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2201      	movs	r2, #1
 80039a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	08004204 	.word	0x08004204
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d10a      	bne.n	8003ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b098      	sub	sp, #96	; 0x60
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b24:	f7fc ff8a 	bl	8000a3c <HAL_GetTick>
 8003b28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d12f      	bne.n	8003b98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f88e 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d022      	beq.n	8003b98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b66:	653b      	str	r3, [r7, #80]	; 0x50
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e6      	bne.n	8003b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e063      	b.n	8003c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d149      	bne.n	8003c3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f857 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d03c      	beq.n	8003c3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	633b      	str	r3, [r7, #48]	; 0x30
 8003be0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e6      	bne.n	8003bc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c12:	61fa      	str	r2, [r7, #28]
 8003c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	69b9      	ldr	r1, [r7, #24]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e012      	b.n	8003c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3758      	adds	r7, #88	; 0x58
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c78:	e049      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d045      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fc fedb 	bl	8000a3c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e048      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d031      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d110      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f838 	bl	8003d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e029      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d111      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f81e 	bl	8003d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4013      	ands	r3, r2
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d0a6      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b095      	sub	sp, #84	; 0x54
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e6      	bne.n	8003d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3308      	adds	r3, #8
 8003d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d118      	bne.n	8003de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6979      	ldr	r1, [r7, #20]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	613b      	str	r3, [r7, #16]
   return(result);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003df6:	bf00      	nop
 8003df8:	3754      	adds	r7, #84	; 0x54
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fb97 	bl	8003554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b088      	sub	sp, #32
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	613b      	str	r3, [r7, #16]
   return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e6      	bne.n	8003e36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fb62 	bl	8003540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7c:	bf00      	nop
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e027      	b.n	8003f26 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2224      	movs	r2, #36	; 0x24
 8003ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e02d      	b.n	8003fa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	; 0x24
 8003f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f850 	bl	800402c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e02d      	b.n	8004022 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2224      	movs	r2, #36	; 0x24
 8003fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f812 	bl	800402c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004038:	2b00      	cmp	r3, #0
 800403a:	d108      	bne.n	800404e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800404c:	e031      	b.n	80040b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800404e:	2308      	movs	r3, #8
 8004050:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004052:	2308      	movs	r3, #8
 8004054:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	0e5b      	lsrs	r3, r3, #25
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	0f5b      	lsrs	r3, r3, #29
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	7b3a      	ldrb	r2, [r7, #12]
 800407a:	4911      	ldr	r1, [pc, #68]	; (80040c0 <UARTEx_SetNbDataToProcess+0x94>)
 800407c:	5c8a      	ldrb	r2, [r1, r2]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004082:	7b3a      	ldrb	r2, [r7, #12]
 8004084:	490f      	ldr	r1, [pc, #60]	; (80040c4 <UARTEx_SetNbDataToProcess+0x98>)
 8004086:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004088:	fb93 f3f2 	sdiv	r3, r3, r2
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	7b7a      	ldrb	r2, [r7, #13]
 8004098:	4909      	ldr	r1, [pc, #36]	; (80040c0 <UARTEx_SetNbDataToProcess+0x94>)
 800409a:	5c8a      	ldrb	r2, [r1, r2]
 800409c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80040a0:	7b7a      	ldrb	r2, [r7, #13]
 80040a2:	4908      	ldr	r1, [pc, #32]	; (80040c4 <UARTEx_SetNbDataToProcess+0x98>)
 80040a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	0800421c 	.word	0x0800421c
 80040c4:	08004224 	.word	0x08004224

080040c8 <memset>:
 80040c8:	4402      	add	r2, r0
 80040ca:	4603      	mov	r3, r0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d100      	bne.n	80040d2 <memset+0xa>
 80040d0:	4770      	bx	lr
 80040d2:	f803 1b01 	strb.w	r1, [r3], #1
 80040d6:	e7f9      	b.n	80040cc <memset+0x4>

080040d8 <__libc_init_array>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	4d0d      	ldr	r5, [pc, #52]	; (8004110 <__libc_init_array+0x38>)
 80040dc:	4c0d      	ldr	r4, [pc, #52]	; (8004114 <__libc_init_array+0x3c>)
 80040de:	1b64      	subs	r4, r4, r5
 80040e0:	10a4      	asrs	r4, r4, #2
 80040e2:	2600      	movs	r6, #0
 80040e4:	42a6      	cmp	r6, r4
 80040e6:	d109      	bne.n	80040fc <__libc_init_array+0x24>
 80040e8:	4d0b      	ldr	r5, [pc, #44]	; (8004118 <__libc_init_array+0x40>)
 80040ea:	4c0c      	ldr	r4, [pc, #48]	; (800411c <__libc_init_array+0x44>)
 80040ec:	f000 f818 	bl	8004120 <_init>
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	2600      	movs	r6, #0
 80040f6:	42a6      	cmp	r6, r4
 80040f8:	d105      	bne.n	8004106 <__libc_init_array+0x2e>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004100:	4798      	blx	r3
 8004102:	3601      	adds	r6, #1
 8004104:	e7ee      	b.n	80040e4 <__libc_init_array+0xc>
 8004106:	f855 3b04 	ldr.w	r3, [r5], #4
 800410a:	4798      	blx	r3
 800410c:	3601      	adds	r6, #1
 800410e:	e7f2      	b.n	80040f6 <__libc_init_array+0x1e>
 8004110:	08004234 	.word	0x08004234
 8004114:	08004234 	.word	0x08004234
 8004118:	08004234 	.word	0x08004234
 800411c:	08004238 	.word	0x08004238

08004120 <_init>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr

0800412c <_fini>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr
