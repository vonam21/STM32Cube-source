
do_an2_uart_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f0  080038f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080038f0  080038f0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f0  080038f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080038f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08003954  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003954  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c343  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c37  00000000  00000000  0002c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e3  00000000  00000000  0002ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182b5  00000000  00000000  0002f6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6e7  00000000  00000000  00047980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f1a8  00000000  00000000  00056067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039e8  00000000  00000000  000e5210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e8bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003860 	.word	0x08003860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003860 	.word	0x08003860

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b08f      	sub	sp, #60	; 0x3c
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbb7 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f891 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9e7 	bl	800053c <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f8dd 	bl	800032c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f9b9 	bl	80004e8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000176:	f000 f917 	bl	80003a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t data[] = "0vokhacnam";
  uint8_t count  = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t buffer[20]= "gia tri ADC la:";
 8000180:	4b3d      	ldr	r3, [pc, #244]	; (8000278 <main+0x11c>)
 8000182:	f107 0418 	add.w	r4, r7, #24
 8000186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800018c:	2300      	movs	r3, #0
 800018e:	62bb      	str	r3, [r7, #40]	; 0x28
  char val_ADC[20];
  uint32_t var,value_PWM=0 ;
 8000190:	2300      	movs	r3, #0
 8000192:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000194:	2100      	movs	r1, #0
 8000196:	4839      	ldr	r0, [pc, #228]	; (800027c <main+0x120>)
 8000198:	f001 ff62 	bl	8002060 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800019c:	4838      	ldr	r0, [pc, #224]	; (8000280 <main+0x124>)
 800019e:	f000 fcf7 	bl	8000b90 <HAL_ADC_Start>
	  HAL_Delay(50);
 80001a2:	2032      	movs	r0, #50	; 0x32
 80001a4:	f000 fbf8 	bl	8000998 <HAL_Delay>
	  var = HAL_ADC_GetValue(&hadc1);
 80001a8:	4835      	ldr	r0, [pc, #212]	; (8000280 <main+0x124>)
 80001aa:	f000 fdcb 	bl	8000d44 <HAL_ADC_GetValue>
 80001ae:	62f8      	str	r0, [r7, #44]	; 0x2c
	  HAL_ADC_Stop(&hadc1);
 80001b0:	4833      	ldr	r0, [pc, #204]	; (8000280 <main+0x124>)
 80001b2:	f000 fd9b 	bl	8000cec <HAL_ADC_Stop>

//	  HAL_UART_Transmit(&huart1, data,sizeof(data), 10);
	  sprintf(val_ADC, "%lu",var);
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80001ba:	4932      	ldr	r1, [pc, #200]	; (8000284 <main+0x128>)
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fe9d 	bl	8002efc <siprintf>
	  HAL_UART_Transmit(&huart1, buffer,strlen((const char*)buffer),10);
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffc0 	bl	800014c <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	f107 0118 	add.w	r1, r7, #24
 80001d4:	230a      	movs	r3, #10
 80001d6:	482c      	ldr	r0, [pc, #176]	; (8000288 <main+0x12c>)
 80001d8:	f002 fd11 	bl	8002bfe <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)val_ADC,strlen((const char*)val_ADC),10);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	1d39      	adds	r1, r7, #4
 80001ea:	230a      	movs	r3, #10
 80001ec:	4826      	ldr	r0, [pc, #152]	; (8000288 <main+0x12c>)
 80001ee:	f002 fd06 	bl	8002bfe <HAL_UART_Transmit>
	  if(DIMING_QUANG_TRO){
		  if(var >= 1500){
 80001f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001f4:	f240 52db 	movw	r2, #1499	; 0x5db
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d903      	bls.n	8000204 <main+0xa8>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80001fc:	4b1f      	ldr	r3, [pc, #124]	; (800027c <main+0x120>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2200      	movs	r2, #0
 8000202:	635a      	str	r2, [r3, #52]	; 0x34
		  }
		  if((var >= 1200) && (var <1500)){
 8000204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000206:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800020a:	d308      	bcc.n	800021e <main+0xc2>
 800020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800020e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000212:	4293      	cmp	r3, r2
 8000214:	d803      	bhi.n	800021e <main+0xc2>
		  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,250);
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <main+0x120>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	22fa      	movs	r2, #250	; 0xfa
 800021c:	635a      	str	r2, [r3, #52]	; 0x34
		  		  }
		  if((var >= 900) && (var <1200)){
 800021e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000220:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000224:	d308      	bcc.n	8000238 <main+0xdc>
 8000226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000228:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800022c:	d204      	bcs.n	8000238 <main+0xdc>
		  		  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 800022e:	4b13      	ldr	r3, [pc, #76]	; (800027c <main+0x120>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
		  		  		  }
		  if((var >= 600) && (var <900)){
 8000238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800023a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800023e:	d308      	bcc.n	8000252 <main+0xf6>
 8000240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000242:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000246:	d204      	bcs.n	8000252 <main+0xf6>
		  		  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,750);
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <main+0x120>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
		  		  		  }
		  if((var >= 0) && (var <600)){
 8000252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000254:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000258:	d204      	bcs.n	8000264 <main+0x108>
		  		  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,999);
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <main+0x120>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000262:	635a      	str	r2, [r3, #52]	; 0x34
		  		  		  }

  	  }else{

  	  }
	  count++;
 8000264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000268:	3301      	adds	r3, #1
 800026a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  HAL_Delay(3000);
 800026e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000272:	f000 fb91 	bl	8000998 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000276:	e791      	b.n	800019c <main+0x40>
 8000278:	0800387c 	.word	0x0800387c
 800027c:	200000a8 	.word	0x200000a8
 8000280:	20000078 	.word	0x20000078
 8000284:	08003878 	.word	0x08003878
 8000288:	200000f0 	.word	0x200000f0

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b094      	sub	sp, #80	; 0x50
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fe4e 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	2302      	movs	r3, #2
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c4:	2310      	movs	r3, #16
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 f957 	bl	8001584 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002dc:	f000 f96e 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e4:	2300      	movs	r3, #0
 80002e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fbc4 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000306:	f000 f959 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800030a:	2302      	movs	r3, #2
 800030c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fd45 	bl	8001da4 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000320:	f000 f94c 	bl	80005bc <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3750      	adds	r7, #80	; 0x50
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_ADC1_Init+0x74>)
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <MX_ADC1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_ADC1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_ADC1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_ADC1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_ADC1_Init+0x74>)
 8000356:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800035a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_ADC1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_ADC1_Init+0x74>)
 8000364:	2201      	movs	r2, #1
 8000366:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_ADC1_Init+0x74>)
 800036a:	f000 fb39 	bl	80009e0 <HAL_ADC_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000374:	f000 f922 	bl	80005bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000378:	2305      	movs	r3, #5
 800037a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037c:	2301      	movs	r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_ADC1_Init+0x74>)
 800038a:	f000 fce7 	bl	8000d5c <HAL_ADC_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000394:	f000 f912 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000078 	.word	0x20000078
 80003a4:	40012400 	.word	0x40012400

080003a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b096      	sub	sp, #88	; 0x58
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2220      	movs	r2, #32
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fdab 	bl	8002f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e6:	4b3e      	ldr	r3, [pc, #248]	; (80004e0 <MX_TIM1_Init+0x138>)
 80003e8:	4a3e      	ldr	r2, [pc, #248]	; (80004e4 <MX_TIM1_Init+0x13c>)
 80003ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80003ec:	4b3c      	ldr	r3, [pc, #240]	; (80004e0 <MX_TIM1_Init+0x138>)
 80003ee:	224f      	movs	r2, #79	; 0x4f
 80003f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <MX_TIM1_Init+0x138>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <MX_TIM1_Init+0x138>)
 80003fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000400:	4b37      	ldr	r3, [pc, #220]	; (80004e0 <MX_TIM1_Init+0x138>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000406:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_TIM1_Init+0x138>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040c:	4b34      	ldr	r3, [pc, #208]	; (80004e0 <MX_TIM1_Init+0x138>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000412:	4833      	ldr	r0, [pc, #204]	; (80004e0 <MX_TIM1_Init+0x138>)
 8000414:	f001 fd7c 	bl	8001f10 <HAL_TIM_Base_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800041e:	f000 f8cd 	bl	80005bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000426:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000428:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800042c:	4619      	mov	r1, r3
 800042e:	482c      	ldr	r0, [pc, #176]	; (80004e0 <MX_TIM1_Init+0x138>)
 8000430:	f001 ff7a 	bl	8002328 <HAL_TIM_ConfigClockSource>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800043a:	f000 f8bf 	bl	80005bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800043e:	4828      	ldr	r0, [pc, #160]	; (80004e0 <MX_TIM1_Init+0x138>)
 8000440:	f001 fdb5 	bl	8001fae <HAL_TIM_PWM_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800044a:	f000 f8b7 	bl	80005bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800045a:	4619      	mov	r1, r3
 800045c:	4820      	ldr	r0, [pc, #128]	; (80004e0 <MX_TIM1_Init+0x138>)
 800045e:	f002 facf 	bl	8002a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000468:	f000 f8a8 	bl	80005bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046c:	2360      	movs	r3, #96	; 0x60
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000478:	2300      	movs	r3, #0
 800047a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_TIM1_Init+0x138>)
 8000492:	f001 fe87 	bl	80021a4 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800049c:	f000 f88e 	bl	80005bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4807      	ldr	r0, [pc, #28]	; (80004e0 <MX_TIM1_Init+0x138>)
 80004c4:	f002 fafa 	bl	8002abc <HAL_TIMEx_ConfigBreakDeadTime>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80004ce:	f000 f875 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <MX_TIM1_Init+0x138>)
 80004d4:	f000 f8f4 	bl	80006c0 <HAL_TIM_MspPostInit>

}
 80004d8:	bf00      	nop
 80004da:	3758      	adds	r7, #88	; 0x58
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000a8 	.word	0x200000a8
 80004e4:	40012c00 	.word	0x40012c00

080004e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_USART1_UART_Init+0x50>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_USART1_UART_Init+0x4c>)
 8000520:	f002 fb1d 	bl	8002b5e <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800052a:	f000 f847 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000f0 	.word	0x200000f0
 8000538:	40013800 	.word	0x40013800

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_GPIO_Init+0x78>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <MX_GPIO_Init+0x78>)
 8000556:	f043 0310 	orr.w	r3, r3, #16
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <MX_GPIO_Init+0x78>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0310 	and.w	r3, r3, #16
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_GPIO_Init+0x78>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <MX_GPIO_Init+0x78>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_GPIO_Init+0x78>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_GPIO_Init+0x7c>)
 8000588:	f000 ffe4 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800058c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2302      	movs	r3, #2
 800059c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_GPIO_Init+0x7c>)
 80005a6:	f000 fe51 	bl	800124c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40011000 	.word	0x40011000

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_MspInit+0x40>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <HAL_MspInit+0x40>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_MspInit+0x40>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_MspInit+0x40>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_MspInit+0x40>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_MspInit+0x40>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_ADC_MspInit+0x6c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d121      	bne.n	8000670 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <HAL_ADC_MspInit+0x70>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <HAL_ADC_MspInit+0x70>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_ADC_MspInit+0x70>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_ADC_MspInit+0x70>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <HAL_ADC_MspInit+0x70>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_ADC_MspInit+0x70>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800065c:	2320      	movs	r3, #32
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	2303      	movs	r3, #3
 8000662:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <HAL_ADC_MspInit+0x74>)
 800066c:	f000 fdee 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40012400 	.word	0x40012400
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800

08000684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <HAL_TIM_Base_MspInit+0x34>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d10b      	bne.n	80006ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_TIM_Base_MspInit+0x38>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_TIM_Base_MspInit+0x38>)
 800069c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_TIM_Base_MspInit+0x38>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40012c00 	.word	0x40012c00
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <HAL_TIM_MspPostInit+0x5c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d118      	bne.n	8000712 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_TIM_MspPostInit+0x60>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_TIM_MspPostInit+0x60>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_TIM_MspPostInit+0x60>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2302      	movs	r3, #2
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <HAL_TIM_MspPostInit+0x64>)
 800070e:	f000 fd9d 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012c00 	.word	0x40012c00
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800

08000728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <HAL_UART_MspInit+0x8c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d131      	bne.n	80007ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_UART_MspInit+0x90>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <HAL_UART_MspInit+0x90>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_UART_MspInit+0x90>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_UART_MspInit+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <HAL_UART_MspInit+0x90>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_UART_MspInit+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_UART_MspInit+0x94>)
 800078e:	f000 fd5d 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_UART_MspInit+0x94>)
 80007a8:	f000 fd50 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40013800 	.word	0x40013800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f8ab 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f002 fb84 	bl	8002f4c <__errno>
 8000844:	4603      	mov	r3, r0
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <_sbrk+0x64>)
 8000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20005000 	.word	0x20005000
 8000870:	00000400 	.word	0x00000400
 8000874:	20000138 	.word	0x20000138
 8000878:	20000288 	.word	0x20000288

0800087c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000888:	f7ff fff8 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000890:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008a4:	4c09      	ldr	r4, [pc, #36]	; (80008cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b2:	f002 fb51 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff fc51 	bl	800015c <main>
  bx lr
 80008ba:	4770      	bx	lr
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008c4:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 80008c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008cc:	20000288 	.word	0x20000288

080008d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_2_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x28>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 fc7d 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff fe6a 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fc87 	bl	8001232 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 fc5d 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000008 	.word	0x20000008
 8000980:	2000013c 	.word	0x2000013c

08000984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	2000013c 	.word	0x2000013c

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e0be      	b.n	8000b80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fdf4 	bl	800060c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 faeb 	bl	8001000 <ADC_ConversionStop_Disable>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8099 	bne.w	8000b6e <HAL_ADC_Init+0x18e>
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8095 	bne.w	8000b6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	f043 0202 	orr.w	r2, r3, #2
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7b1b      	ldrb	r3, [r3, #12]
 8000a66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a78:	d003      	beq.n	8000a82 <HAL_ADC_Init+0xa2>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d102      	bne.n	8000a88 <HAL_ADC_Init+0xa8>
 8000a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a86:	e000      	b.n	8000a8a <HAL_ADC_Init+0xaa>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7d1b      	ldrb	r3, [r3, #20]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d119      	bne.n	8000acc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7b1b      	ldrb	r3, [r3, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	035a      	lsls	r2, r3, #13
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	e00b      	b.n	8000acc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f043 0220 	orr.w	r2, r3, #32
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	f043 0201 	orr.w	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_ADC_Init+0x1a8>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000afc:	d003      	beq.n	8000b06 <HAL_ADC_Init+0x126>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d104      	bne.n	8000b10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	051b      	lsls	r3, r3, #20
 8000b0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	430a      	orrs	r2, r1
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_ADC_Init+0x1ac>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d10b      	bne.n	8000b4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	f023 0303 	bic.w	r3, r3, #3
 8000b42:	f043 0201 	orr.w	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b4a:	e018      	b.n	8000b7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f023 0312 	bic.w	r3, r3, #18
 8000b54:	f043 0210 	orr.w	r2, r3, #16
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	f043 0201 	orr.w	r2, r3, #1
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b6c:	e007      	b.n	8000b7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	f043 0210 	orr.w	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	ffe1f7fd 	.word	0xffe1f7fd
 8000b8c:	ff1f0efe 	.word	0xff1f0efe

08000b90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Start+0x1a>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e098      	b.n	8000cdc <HAL_ADC_Start+0x14c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2201      	movs	r2, #1
 8000bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f9ca 	bl	8000f4c <ADC_Enable>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8087 	bne.w	8000cd2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bcc:	f023 0301 	bic.w	r3, r3, #1
 8000bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a41      	ldr	r2, [pc, #260]	; (8000ce4 <HAL_ADC_Start+0x154>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d105      	bne.n	8000bee <HAL_ADC_Start+0x5e>
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <HAL_ADC_Start+0x158>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d115      	bne.n	8000c1a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d026      	beq.n	8000c56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c18:	e01d      	b.n	8000c56 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_ADC_Start+0x158>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d004      	beq.n	8000c3a <HAL_ADC_Start+0xaa>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <HAL_ADC_Start+0x154>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10d      	bne.n	8000c56 <HAL_ADC_Start+0xc6>
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ADC_Start+0x158>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	f023 0206 	bic.w	r2, r3, #6
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c6e:	e002      	b.n	8000c76 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f06f 0202 	mvn.w	r2, #2
 8000c86:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c96:	d113      	bne.n	8000cc0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_ADC_Start+0x154>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d105      	bne.n	8000cae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_ADC_Start+0x158>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d108      	bne.n	8000cc0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	e00c      	b.n	8000cda <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	e003      	b.n	8000cda <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012800 	.word	0x40012800
 8000ce8:	40012400 	.word	0x40012400

08000cec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Stop+0x1a>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e01a      	b.n	8000d3c <HAL_ADC_Stop+0x50>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f976 	bl	8001000 <ADC_ConversionStop_Disable>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d26:	f023 0301 	bic.w	r3, r3, #1
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d101      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x20>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	e0dc      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x1da>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d81c      	bhi.n	8000dc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b05      	subs	r3, #5
 8000d9e:	221f      	movs	r2, #31
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4019      	ands	r1, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	3b05      	subs	r3, #5
 8000db8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc4:	e03c      	b.n	8000e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b0c      	cmp	r3, #12
 8000dcc:	d81c      	bhi.n	8000e08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b23      	subs	r3, #35	; 0x23
 8000de0:	221f      	movs	r2, #31
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4019      	ands	r1, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	6818      	ldr	r0, [r3, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	3b23      	subs	r3, #35	; 0x23
 8000dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	631a      	str	r2, [r3, #48]	; 0x30
 8000e06:	e01b      	b.n	8000e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	3b41      	subs	r3, #65	; 0x41
 8000e1a:	221f      	movs	r2, #31
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4019      	ands	r1, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	3b41      	subs	r3, #65	; 0x41
 8000e34:	fa00 f203 	lsl.w	r2, r0, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b09      	cmp	r3, #9
 8000e46:	d91c      	bls.n	8000e82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68d9      	ldr	r1, [r3, #12]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	3b1e      	subs	r3, #30
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4019      	ands	r1, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6898      	ldr	r0, [r3, #8]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	3b1e      	subs	r3, #30
 8000e74:	fa00 f203 	lsl.w	r2, r0, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	e019      	b.n	8000eb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6919      	ldr	r1, [r3, #16]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	2207      	movs	r2, #7
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4019      	ands	r1, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	6898      	ldr	r0, [r3, #8]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d003      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ec2:	2b11      	cmp	r3, #17
 8000ec4:	d132      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d125      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d126      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000eec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b10      	cmp	r3, #16
 8000ef4:	d11a      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_ADC_ConfigChannel+0x1ec>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	0c9a      	lsrs	r2, r3, #18
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f0c:	e002      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f9      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x1b2>
 8000f1a:	e007      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	f043 0220 	orr.w	r2, r3, #32
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40012400 	.word	0x40012400
 8000f44:	20000000 	.word	0x20000000
 8000f48:	431bde83 	.word	0x431bde83

08000f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d040      	beq.n	8000fec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 0201 	orr.w	r2, r2, #1
 8000f78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <ADC_Enable+0xac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <ADC_Enable+0xb0>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	0c9b      	lsrs	r3, r3, #18
 8000f86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f88:	e002      	b.n	8000f90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f9      	bne.n	8000f8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f96:	f7ff fcf5 	bl	8000984 <HAL_GetTick>
 8000f9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f9c:	e01f      	b.n	8000fde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f9e:	f7ff fcf1 	bl	8000984 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d918      	bls.n	8000fde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d011      	beq.n	8000fde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f043 0210 	orr.w	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e007      	b.n	8000fee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d1d8      	bne.n	8000f9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	431bde83 	.word	0x431bde83

08001000 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d12e      	bne.n	8001078 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800102a:	f7ff fcab 	bl	8000984 <HAL_GetTick>
 800102e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001030:	e01b      	b.n	800106a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001032:	f7ff fca7 	bl	8000984 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d914      	bls.n	800106a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10d      	bne.n	800106a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	f043 0210 	orr.w	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e007      	b.n	800107a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	d0dc      	beq.n	8001032 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff90 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff49 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff5e 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffb0 	bl	80011a0 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e169      	b.n	8001534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001260:	2201      	movs	r2, #1
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 8158 	bne.w	800152e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <HAL_GPIO_Init+0x2a0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d05e      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 8001288:	4a98      	ldr	r2, [pc, #608]	; (80014ec <HAL_GPIO_Init+0x2a0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d875      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 800128e:	4a98      	ldr	r2, [pc, #608]	; (80014f0 <HAL_GPIO_Init+0x2a4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d058      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 8001294:	4a96      	ldr	r2, [pc, #600]	; (80014f0 <HAL_GPIO_Init+0x2a4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d86f      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 800129a:	4a96      	ldr	r2, [pc, #600]	; (80014f4 <HAL_GPIO_Init+0x2a8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d052      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012a0:	4a94      	ldr	r2, [pc, #592]	; (80014f4 <HAL_GPIO_Init+0x2a8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d869      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012a6:	4a94      	ldr	r2, [pc, #592]	; (80014f8 <HAL_GPIO_Init+0x2ac>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d04c      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012ac:	4a92      	ldr	r2, [pc, #584]	; (80014f8 <HAL_GPIO_Init+0x2ac>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d863      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012b2:	4a92      	ldr	r2, [pc, #584]	; (80014fc <HAL_GPIO_Init+0x2b0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d046      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012b8:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_GPIO_Init+0x2b0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d85d      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d82a      	bhi.n	8001318 <HAL_GPIO_Init+0xcc>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d859      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <HAL_GPIO_Init+0x80>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001321 	.word	0x08001321
 80012d4:	08001333 	.word	0x08001333
 80012d8:	08001375 	.word	0x08001375
 80012dc:	0800137b 	.word	0x0800137b
 80012e0:	0800137b 	.word	0x0800137b
 80012e4:	0800137b 	.word	0x0800137b
 80012e8:	0800137b 	.word	0x0800137b
 80012ec:	0800137b 	.word	0x0800137b
 80012f0:	0800137b 	.word	0x0800137b
 80012f4:	0800137b 	.word	0x0800137b
 80012f8:	0800137b 	.word	0x0800137b
 80012fc:	0800137b 	.word	0x0800137b
 8001300:	0800137b 	.word	0x0800137b
 8001304:	0800137b 	.word	0x0800137b
 8001308:	0800137b 	.word	0x0800137b
 800130c:	0800137b 	.word	0x0800137b
 8001310:	08001329 	.word	0x08001329
 8001314:	0800133d 	.word	0x0800133d
 8001318:	4a79      	ldr	r2, [pc, #484]	; (8001500 <HAL_GPIO_Init+0x2b4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800131e:	e02c      	b.n	800137a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e029      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	3304      	adds	r3, #4
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e024      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	3308      	adds	r3, #8
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e01f      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	330c      	adds	r3, #12
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e01a      	b.n	800137c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134e:	2304      	movs	r3, #4
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e013      	b.n	800137c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	611a      	str	r2, [r3, #16]
          break;
 8001366:	e009      	b.n	800137c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	615a      	str	r2, [r3, #20]
          break;
 8001372:	e003      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x130>
          break;
 800137a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2bff      	cmp	r3, #255	; 0xff
 8001380:	d801      	bhi.n	8001386 <HAL_GPIO_Init+0x13a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	e001      	b.n	800138a <HAL_GPIO_Init+0x13e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2bff      	cmp	r3, #255	; 0xff
 8001390:	d802      	bhi.n	8001398 <HAL_GPIO_Init+0x14c>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x152>
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3b08      	subs	r3, #8
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	210f      	movs	r1, #15
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	6a39      	ldr	r1, [r7, #32]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80b1 	beq.w	800152e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e4:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2bc>)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a40      	ldr	r2, [pc, #256]	; (800150c <HAL_GPIO_Init+0x2c0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_GPIO_Init+0x1ec>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3f      	ldr	r2, [pc, #252]	; (8001510 <HAL_GPIO_Init+0x2c4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00d      	beq.n	8001434 <HAL_GPIO_Init+0x1e8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3e      	ldr	r2, [pc, #248]	; (8001514 <HAL_GPIO_Init+0x2c8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d007      	beq.n	8001430 <HAL_GPIO_Init+0x1e4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <HAL_GPIO_Init+0x2cc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <HAL_GPIO_Init+0x1e0>
 8001428:	2303      	movs	r3, #3
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 800142c:	2304      	movs	r3, #4
 800142e:	e004      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001438:	2300      	movs	r3, #0
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144a:	492f      	ldr	r1, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x2bc>)
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_GPIO_Init+0x2d0>)
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	492c      	ldr	r1, [pc, #176]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_GPIO_Init+0x2d0>)
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4928      	ldr	r1, [pc, #160]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800147c:	4013      	ands	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4922      	ldr	r1, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	491e      	ldr	r1, [pc, #120]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4918      	ldr	r1, [pc, #96]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4914      	ldr	r1, [pc, #80]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d021      	beq.n	8001520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	490e      	ldr	r1, [pc, #56]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e021      	b.n	800152e <HAL_GPIO_Init+0x2e2>
 80014ea:	bf00      	nop
 80014ec:	10320000 	.word	0x10320000
 80014f0:	10310000 	.word	0x10310000
 80014f4:	10220000 	.word	0x10220000
 80014f8:	10210000 	.word	0x10210000
 80014fc:	10120000 	.word	0x10120000
 8001500:	10110000 	.word	0x10110000
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	40010800 	.word	0x40010800
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40011000 	.word	0x40011000
 8001518:	40011400 	.word	0x40011400
 800151c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	43db      	mvns	r3, r3
 8001528:	4909      	ldr	r1, [pc, #36]	; (8001550 <HAL_GPIO_Init+0x304>)
 800152a:	4013      	ands	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3301      	adds	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	f47f ae8e 	bne.w	8001260 <HAL_GPIO_Init+0x14>
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	372c      	adds	r7, #44	; 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	611a      	str	r2, [r3, #16]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e272      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8087 	beq.w	80016b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a4:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d00c      	beq.n	80015ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b0:	4b8f      	ldr	r3, [pc, #572]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d112      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5e>
 80015bc:	4b8c      	ldr	r3, [pc, #560]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c8:	d10b      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x12c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d168      	bne.n	80016b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e24c      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x76>
 80015ec:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a7f      	ldr	r2, [pc, #508]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e02e      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a7a      	ldr	r2, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a77      	ldr	r2, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0xbc>
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a71      	ldr	r2, [pc, #452]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xd4>
 8001640:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a6a      	ldr	r2, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a67      	ldr	r2, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff f990 	bl	8000984 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff f98c 	bl	8000984 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e200      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xe4>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff f97c 	bl	8000984 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff f978 	bl	8000984 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1ec      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x10c>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016be:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x18c>
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x176>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1c0      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4939      	ldr	r1, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_RCC_OscConfig+0x270>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff f931 	bl	8000984 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff f92d 	bl	8000984 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1a1      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4927      	ldr	r1, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x270>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f910 	bl	8000984 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff f90c 	bl	8000984 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e180      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d03a      	beq.n	8001808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d019      	beq.n	80017ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff f8f0 	bl	8000984 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff f8ec 	bl	8000984 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e160      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 face 	bl	8001d68 <RCC_Delay>
 80017cc:	e01c      	b.n	8001808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_OscConfig+0x274>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f8d6 	bl	8000984 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017da:	e00f      	b.n	80017fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff f8d2 	bl	8000984 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d908      	bls.n	80017fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e146      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	42420000 	.word	0x42420000
 80017f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e9      	bne.n	80017dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a6 	beq.w	8001962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10d      	bne.n	8001842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a87      	ldr	r2, [pc, #540]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b82      	ldr	r3, [pc, #520]	; (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b7f      	ldr	r3, [pc, #508]	; (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a7e      	ldr	r2, [pc, #504]	; (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff f893 	bl	8000984 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff f88f 	bl	8000984 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e103      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x4c8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x312>
 8001888:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e02d      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x334>
 800189e:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a66      	ldr	r2, [pc, #408]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	e01c      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x356>
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a60      	ldr	r2, [pc, #384]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a5d      	ldr	r2, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 80018da:	4b5b      	ldr	r3, [pc, #364]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d015      	beq.n	8001926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f843 	bl	8000984 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f83f 	bl	8000984 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0b1      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ee      	beq.n	8001902 <HAL_RCC_OscConfig+0x37e>
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff f82d 	bl	8000984 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f829 	bl	8000984 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e09b      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ee      	bne.n	800192e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8087 	beq.w	8001a7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d061      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d146      	bne.n	8001a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7fe fffd 	bl	8000984 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7fe fff9 	bl	8000984 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e06d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4921      	ldr	r1, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a19      	ldr	r1, [r3, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	430b      	orrs	r3, r1
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7fe ffcd 	bl	8000984 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7fe ffc9 	bl	8000984 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e03d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x46a>
 8001a0c:	e035      	b.n	8001a7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7fe ffb6 	bl	8000984 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7fe ffb2 	bl	8000984 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e026      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x498>
 8001a3a:	e01e      	b.n	8001a7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e019      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x500>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0d0      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d910      	bls.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4965      	ldr	r1, [pc, #404]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	494d      	ldr	r1, [pc, #308]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d040      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e07f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e073      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06b      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4936      	ldr	r1, [pc, #216]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7fe ff04 	bl	8000984 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7fe ff00 	bl	8000984 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e053      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d210      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4922      	ldr	r1, [pc, #136]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e032      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4916      	ldr	r1, [pc, #88]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c16:	f000 f821 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	490a      	ldr	r1, [pc, #40]	; (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1cc>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1d0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fe62 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003890 	.word	0x08003890
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x30>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x36>
 8001c8a:	e027      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c8e:	613b      	str	r3, [r7, #16]
      break;
 8001c90:	e027      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0c5b      	lsrs	r3, r3, #17
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cbe:	fb03 f202 	mul.w	r2, r3, r2
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e004      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	613b      	str	r3, [r7, #16]
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cde:	613b      	str	r3, [r7, #16]
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	693b      	ldr	r3, [r7, #16]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	007a1200 	.word	0x007a1200
 8001cf8:	080038a8 	.word	0x080038a8
 8001cfc:	080038b8 	.word	0x080038b8
 8001d00:	003d0900 	.word	0x003d0900

08001d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d08:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d1c:	f7ff fff2 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	080038a0 	.word	0x080038a0

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0adb      	lsrs	r3, r3, #11
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	080038a0 	.word	0x080038a0

08001d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <RCC_Delay+0x34>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <RCC_Delay+0x38>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0a5b      	lsrs	r3, r3, #9
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d84:	bf00      	nop
  }
  while (Delay --);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <RCC_Delay+0x1c>
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d07d      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dda:	61d3      	str	r3, [r2, #28]
 8001ddc:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d118      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a42      	ldr	r2, [pc, #264]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e04:	f7fe fdbe 	bl	8000984 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	e008      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7fe fdba 	bl	8000984 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e06d      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d02e      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d027      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e48:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e58:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e5e:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d014      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fd89 	bl	8000984 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe fd85 	bl	8000984 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e036      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ee      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4917      	ldr	r1, [pc, #92]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4904      	ldr	r1, [pc, #16]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	42420440 	.word	0x42420440

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fba4 	bl	8000684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fab2 	bl	80024b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e041      	b.n	8002044 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d106      	bne.n	8001fda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f839 	bl	800204c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4610      	mov	r0, r2
 8001fee:	f000 fa63 	bl	80024b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_TIM_PWM_Start+0x24>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e022      	b.n	80020ca <HAL_TIM_PWM_Start+0x6a>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d109      	bne.n	800209e <HAL_TIM_PWM_Start+0x3e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	e015      	b.n	80020ca <HAL_TIM_PWM_Start+0x6a>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d109      	bne.n	80020b8 <HAL_TIM_PWM_Start+0x58>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e008      	b.n	80020ca <HAL_TIM_PWM_Start+0x6a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e05e      	b.n	8002190 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x82>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e0:	e013      	b.n	800210a <HAL_TIM_PWM_Start+0xaa>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d104      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x92>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	e00b      	b.n	800210a <HAL_TIM_PWM_Start+0xaa>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d104      	bne.n	8002102 <HAL_TIM_PWM_Start+0xa2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002100:	e003      	b.n	800210a <HAL_TIM_PWM_Start+0xaa>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fc50 	bl	80029b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_TIM_PWM_Start+0x138>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d107      	bne.n	8002132 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_TIM_PWM_Start+0x138>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00e      	beq.n	800215a <HAL_TIM_PWM_Start+0xfa>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d009      	beq.n	800215a <HAL_TIM_PWM_Start+0xfa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_TIM_PWM_Start+0x13c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_TIM_PWM_Start+0xfa>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_TIM_PWM_Start+0x140>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d111      	bne.n	800217e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b06      	cmp	r3, #6
 800216a:	d010      	beq.n	800218e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217c:	e007      	b.n	800218e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40000400 	.word	0x40000400
 80021a0:	40000800 	.word	0x40000800

080021a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021be:	2302      	movs	r3, #2
 80021c0:	e0ae      	b.n	8002320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	f200 809f 	bhi.w	8002310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	0800220d 	.word	0x0800220d
 80021dc:	08002311 	.word	0x08002311
 80021e0:	08002311 	.word	0x08002311
 80021e4:	08002311 	.word	0x08002311
 80021e8:	0800224d 	.word	0x0800224d
 80021ec:	08002311 	.word	0x08002311
 80021f0:	08002311 	.word	0x08002311
 80021f4:	08002311 	.word	0x08002311
 80021f8:	0800228f 	.word	0x0800228f
 80021fc:	08002311 	.word	0x08002311
 8002200:	08002311 	.word	0x08002311
 8002204:	08002311 	.word	0x08002311
 8002208:	080022cf 	.word	0x080022cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f9b2 	bl	800257c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0208 	orr.w	r2, r2, #8
 8002226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6999      	ldr	r1, [r3, #24]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	619a      	str	r2, [r3, #24]
      break;
 800224a:	e064      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f9f8 	bl	8002648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6999      	ldr	r1, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	021a      	lsls	r2, r3, #8
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	619a      	str	r2, [r3, #24]
      break;
 800228c:	e043      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fa41 	bl	800271c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0208 	orr.w	r2, r2, #8
 80022a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0204 	bic.w	r2, r2, #4
 80022b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
      break;
 80022cc:	e023      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fa8b 	bl	80027f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69d9      	ldr	r1, [r3, #28]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	021a      	lsls	r2, r3, #8
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	61da      	str	r2, [r3, #28]
      break;
 800230e:	e002      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
      break;
 8002314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_TIM_ConfigClockSource+0x1c>
 8002340:	2302      	movs	r3, #2
 8002342:	e0b4      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x186>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237c:	d03e      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0xd4>
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	f200 8087 	bhi.w	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	f000 8086 	beq.w	800249a <HAL_TIM_ConfigClockSource+0x172>
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d87f      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d01a      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0xa6>
 8002398:	2b70      	cmp	r3, #112	; 0x70
 800239a:	d87b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d050      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x11a>
 80023a0:	2b60      	cmp	r3, #96	; 0x60
 80023a2:	d877      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d03c      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xfa>
 80023a8:	2b50      	cmp	r3, #80	; 0x50
 80023aa:	d873      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d058      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x13a>
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d86f      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d064      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d86b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d060      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d867      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05c      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d05a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023cc:	e062      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023de:	f000 facc 	bl	800297a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	609a      	str	r2, [r3, #8]
      break;
 80023fa:	e04f      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240c:	f000 fab5 	bl	800297a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800241e:	609a      	str	r2, [r3, #8]
      break;
 8002420:	e03c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242e:	461a      	mov	r2, r3
 8002430:	f000 fa2c 	bl	800288c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2150      	movs	r1, #80	; 0x50
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa83 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002440:	e02c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244e:	461a      	mov	r2, r3
 8002450:	f000 fa4a 	bl	80028e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2160      	movs	r1, #96	; 0x60
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fa73 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002460:	e01c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fa0c 	bl	800288c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fa63 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002480:	e00c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f000 fa5a 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002492:	e003      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e000      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800249a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <TIM_Base_SetConfig+0xb8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <TIM_Base_SetConfig+0x30>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d6:	d007      	beq.n	80024e8 <TIM_Base_SetConfig+0x30>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a26      	ldr	r2, [pc, #152]	; (8002574 <TIM_Base_SetConfig+0xbc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0x30>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a25      	ldr	r2, [pc, #148]	; (8002578 <TIM_Base_SetConfig+0xc0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d108      	bne.n	80024fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <TIM_Base_SetConfig+0xb8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00b      	beq.n	800251a <TIM_Base_SetConfig+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002508:	d007      	beq.n	800251a <TIM_Base_SetConfig+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <TIM_Base_SetConfig+0xbc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d003      	beq.n	800251a <TIM_Base_SetConfig+0x62>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <TIM_Base_SetConfig+0xc0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d108      	bne.n	800252c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <TIM_Base_SetConfig+0xb8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d103      	bne.n	8002560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	615a      	str	r2, [r3, #20]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800

0800257c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f023 0201 	bic.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 0302 	bic.w	r3, r3, #2
 80025c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <TIM_OC1_SetConfig+0xc8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10c      	bne.n	80025f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0308 	bic.w	r3, r3, #8
 80025de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <TIM_OC1_SetConfig+0xc8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d111      	bne.n	800261e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	621a      	str	r2, [r3, #32]
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00

08002648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f023 0210 	bic.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0320 	bic.w	r3, r3, #32
 8002692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <TIM_OC2_SetConfig+0xd0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10d      	bne.n	80026c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <TIM_OC2_SetConfig+0xd0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d113      	bne.n	80026f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	621a      	str	r2, [r3, #32]
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	40012c00 	.word	0x40012c00

0800271c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <TIM_OC3_SetConfig+0xd0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <TIM_OC3_SetConfig+0xd0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d113      	bne.n	80027c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00

080027f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800283a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	031b      	lsls	r3, r3, #12
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <TIM_OC4_SetConfig+0x98>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d109      	bne.n	8002864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40012c00 	.word	0x40012c00

0800288c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0201 	bic.w	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f023 030a 	bic.w	r3, r3, #10
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	621a      	str	r2, [r3, #32]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f023 0210 	bic.w	r2, r3, #16
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	031b      	lsls	r3, r3, #12
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002924:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	621a      	str	r2, [r3, #32]
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	f043 0307 	orr.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002994:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	431a      	orrs	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	609a      	str	r2, [r3, #8]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2201      	movs	r2, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e046      	b.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d009      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10c      	bne.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800

08002abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e03d      	b.n	8002b54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e042      	b.n	8002bf6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fd fdcf 	bl	8000728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2224      	movs	r2, #36	; 0x24
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f91c 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d16d      	bne.n	8002cfa <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_Transmit+0x2c>
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e066      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2221      	movs	r2, #33	; 0x21
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3c:	f7fd fea2 	bl	8000984 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d108      	bne.n	8002c6a <HAL_UART_Transmit+0x6c>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	e003      	b.n	8002c72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c72:	e02a      	b.n	8002cca <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f840 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e036      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e007      	b.n	8002cbc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1cf      	bne.n	8002c74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f810 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e006      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b090      	sub	sp, #64	; 0x40
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d14:	e050      	b.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d04c      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d24:	f7fd fe2e 	bl	8000984 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d241      	bcs.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d54:	637a      	str	r2, [r7, #52]	; 0x34
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	613b      	str	r3, [r7, #16]
   return(result);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3314      	adds	r3, #20
 8002d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d88:	623a      	str	r2, [r7, #32]
 8002d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	69f9      	ldr	r1, [r7, #28]
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e00f      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d09f      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3740      	adds	r7, #64	; 0x40
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e1a:	f023 030c 	bic.w	r3, r3, #12
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <UART_SetConfig+0x114>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7fe ff7a 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	e002      	b.n	8002e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e50:	f7fe ff62 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009a      	lsls	r2, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <UART_SetConfig+0x118>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	0119      	lsls	r1, r3, #4
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <UART_SetConfig+0x118>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eac:	4419      	add	r1, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <UART_SetConfig+0x118>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	; 0x32
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	440a      	add	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	51eb851f 	.word	0x51eb851f

08002efc <siprintf>:
 8002efc:	b40e      	push	{r1, r2, r3}
 8002efe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f02:	b500      	push	{lr}
 8002f04:	b09c      	sub	sp, #112	; 0x70
 8002f06:	ab1d      	add	r3, sp, #116	; 0x74
 8002f08:	9002      	str	r0, [sp, #8]
 8002f0a:	9006      	str	r0, [sp, #24]
 8002f0c:	9107      	str	r1, [sp, #28]
 8002f0e:	9104      	str	r1, [sp, #16]
 8002f10:	4808      	ldr	r0, [pc, #32]	; (8002f34 <siprintf+0x38>)
 8002f12:	4909      	ldr	r1, [pc, #36]	; (8002f38 <siprintf+0x3c>)
 8002f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f18:	9105      	str	r1, [sp, #20]
 8002f1a:	6800      	ldr	r0, [r0, #0]
 8002f1c:	a902      	add	r1, sp, #8
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	f000 f98e 	bl	8003240 <_svfiprintf_r>
 8002f24:	2200      	movs	r2, #0
 8002f26:	9b02      	ldr	r3, [sp, #8]
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	b01c      	add	sp, #112	; 0x70
 8002f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f30:	b003      	add	sp, #12
 8002f32:	4770      	bx	lr
 8002f34:	20000058 	.word	0x20000058
 8002f38:	ffff0208 	.word	0xffff0208

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <__errno>:
 8002f4c:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <__errno+0x8>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000058 	.word	0x20000058

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	4d0c      	ldr	r5, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a6      	cmp	r6, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	f000 fc7a 	bl	8003860 <_init>
 8002f6c:	2600      	movs	r6, #0
 8002f6e:	4d0a      	ldr	r5, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f80:	4798      	blx	r3
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8a:	4798      	blx	r3
 8002f8c:	3601      	adds	r6, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	080038f0 	.word	0x080038f0
 8002f94:	080038f0 	.word	0x080038f0
 8002f98:	080038f0 	.word	0x080038f0
 8002f9c:	080038f4 	.word	0x080038f4

08002fa0 <__retarget_lock_acquire_recursive>:
 8002fa0:	4770      	bx	lr

08002fa2 <__retarget_lock_release_recursive>:
 8002fa2:	4770      	bx	lr

08002fa4 <_free_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	d040      	beq.n	800302e <_free_r+0x8a>
 8002fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb0:	1f0c      	subs	r4, r1, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfb8      	it	lt
 8002fb6:	18e4      	addlt	r4, r4, r3
 8002fb8:	f000 f8dc 	bl	8003174 <__malloc_lock>
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <_free_r+0x8c>)
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	b933      	cbnz	r3, 8002fd0 <_free_r+0x2c>
 8002fc2:	6063      	str	r3, [r4, #4]
 8002fc4:	6014      	str	r4, [r2, #0]
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fcc:	f000 b8d8 	b.w	8003180 <__malloc_unlock>
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	d908      	bls.n	8002fe6 <_free_r+0x42>
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	1821      	adds	r1, r4, r0
 8002fd8:	428b      	cmp	r3, r1
 8002fda:	bf01      	itttt	eq
 8002fdc:	6819      	ldreq	r1, [r3, #0]
 8002fde:	685b      	ldreq	r3, [r3, #4]
 8002fe0:	1809      	addeq	r1, r1, r0
 8002fe2:	6021      	streq	r1, [r4, #0]
 8002fe4:	e7ed      	b.n	8002fc2 <_free_r+0x1e>
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	b10b      	cbz	r3, 8002ff0 <_free_r+0x4c>
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d9fa      	bls.n	8002fe6 <_free_r+0x42>
 8002ff0:	6811      	ldr	r1, [r2, #0]
 8002ff2:	1850      	adds	r0, r2, r1
 8002ff4:	42a0      	cmp	r0, r4
 8002ff6:	d10b      	bne.n	8003010 <_free_r+0x6c>
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	4401      	add	r1, r0
 8002ffc:	1850      	adds	r0, r2, r1
 8002ffe:	4283      	cmp	r3, r0
 8003000:	6011      	str	r1, [r2, #0]
 8003002:	d1e0      	bne.n	8002fc6 <_free_r+0x22>
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4408      	add	r0, r1
 800300a:	6010      	str	r0, [r2, #0]
 800300c:	6053      	str	r3, [r2, #4]
 800300e:	e7da      	b.n	8002fc6 <_free_r+0x22>
 8003010:	d902      	bls.n	8003018 <_free_r+0x74>
 8003012:	230c      	movs	r3, #12
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	e7d6      	b.n	8002fc6 <_free_r+0x22>
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	1821      	adds	r1, r4, r0
 800301c:	428b      	cmp	r3, r1
 800301e:	bf01      	itttt	eq
 8003020:	6819      	ldreq	r1, [r3, #0]
 8003022:	685b      	ldreq	r3, [r3, #4]
 8003024:	1809      	addeq	r1, r1, r0
 8003026:	6021      	streq	r1, [r4, #0]
 8003028:	6063      	str	r3, [r4, #4]
 800302a:	6054      	str	r4, [r2, #4]
 800302c:	e7cb      	b.n	8002fc6 <_free_r+0x22>
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000280 	.word	0x20000280

08003034 <sbrk_aligned>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	4e0e      	ldr	r6, [pc, #56]	; (8003070 <sbrk_aligned+0x3c>)
 8003038:	460c      	mov	r4, r1
 800303a:	6831      	ldr	r1, [r6, #0]
 800303c:	4605      	mov	r5, r0
 800303e:	b911      	cbnz	r1, 8003046 <sbrk_aligned+0x12>
 8003040:	f000 fbaa 	bl	8003798 <_sbrk_r>
 8003044:	6030      	str	r0, [r6, #0]
 8003046:	4621      	mov	r1, r4
 8003048:	4628      	mov	r0, r5
 800304a:	f000 fba5 	bl	8003798 <_sbrk_r>
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	d00a      	beq.n	8003068 <sbrk_aligned+0x34>
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d007      	beq.n	800306c <sbrk_aligned+0x38>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f000 fb9a 	bl	8003798 <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d101      	bne.n	800306c <sbrk_aligned+0x38>
 8003068:	f04f 34ff 	mov.w	r4, #4294967295
 800306c:	4620      	mov	r0, r4
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	20000284 	.word	0x20000284

08003074 <_malloc_r>:
 8003074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003078:	1ccd      	adds	r5, r1, #3
 800307a:	f025 0503 	bic.w	r5, r5, #3
 800307e:	3508      	adds	r5, #8
 8003080:	2d0c      	cmp	r5, #12
 8003082:	bf38      	it	cc
 8003084:	250c      	movcc	r5, #12
 8003086:	2d00      	cmp	r5, #0
 8003088:	4607      	mov	r7, r0
 800308a:	db01      	blt.n	8003090 <_malloc_r+0x1c>
 800308c:	42a9      	cmp	r1, r5
 800308e:	d905      	bls.n	800309c <_malloc_r+0x28>
 8003090:	230c      	movs	r3, #12
 8003092:	2600      	movs	r6, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4630      	mov	r0, r6
 8003098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800309c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003170 <_malloc_r+0xfc>
 80030a0:	f000 f868 	bl	8003174 <__malloc_lock>
 80030a4:	f8d8 3000 	ldr.w	r3, [r8]
 80030a8:	461c      	mov	r4, r3
 80030aa:	bb5c      	cbnz	r4, 8003104 <_malloc_r+0x90>
 80030ac:	4629      	mov	r1, r5
 80030ae:	4638      	mov	r0, r7
 80030b0:	f7ff ffc0 	bl	8003034 <sbrk_aligned>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	4604      	mov	r4, r0
 80030b8:	d155      	bne.n	8003166 <_malloc_r+0xf2>
 80030ba:	f8d8 4000 	ldr.w	r4, [r8]
 80030be:	4626      	mov	r6, r4
 80030c0:	2e00      	cmp	r6, #0
 80030c2:	d145      	bne.n	8003150 <_malloc_r+0xdc>
 80030c4:	2c00      	cmp	r4, #0
 80030c6:	d048      	beq.n	800315a <_malloc_r+0xe6>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	4631      	mov	r1, r6
 80030cc:	4638      	mov	r0, r7
 80030ce:	eb04 0903 	add.w	r9, r4, r3
 80030d2:	f000 fb61 	bl	8003798 <_sbrk_r>
 80030d6:	4581      	cmp	r9, r0
 80030d8:	d13f      	bne.n	800315a <_malloc_r+0xe6>
 80030da:	6821      	ldr	r1, [r4, #0]
 80030dc:	4638      	mov	r0, r7
 80030de:	1a6d      	subs	r5, r5, r1
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7ff ffa7 	bl	8003034 <sbrk_aligned>
 80030e6:	3001      	adds	r0, #1
 80030e8:	d037      	beq.n	800315a <_malloc_r+0xe6>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	442b      	add	r3, r5
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	f8d8 3000 	ldr.w	r3, [r8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d038      	beq.n	800316a <_malloc_r+0xf6>
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	42a2      	cmp	r2, r4
 80030fc:	d12b      	bne.n	8003156 <_malloc_r+0xe2>
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e00f      	b.n	8003124 <_malloc_r+0xb0>
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	1b52      	subs	r2, r2, r5
 8003108:	d41f      	bmi.n	800314a <_malloc_r+0xd6>
 800310a:	2a0b      	cmp	r2, #11
 800310c:	d917      	bls.n	800313e <_malloc_r+0xca>
 800310e:	1961      	adds	r1, r4, r5
 8003110:	42a3      	cmp	r3, r4
 8003112:	6025      	str	r5, [r4, #0]
 8003114:	bf18      	it	ne
 8003116:	6059      	strne	r1, [r3, #4]
 8003118:	6863      	ldr	r3, [r4, #4]
 800311a:	bf08      	it	eq
 800311c:	f8c8 1000 	streq.w	r1, [r8]
 8003120:	5162      	str	r2, [r4, r5]
 8003122:	604b      	str	r3, [r1, #4]
 8003124:	4638      	mov	r0, r7
 8003126:	f104 060b 	add.w	r6, r4, #11
 800312a:	f000 f829 	bl	8003180 <__malloc_unlock>
 800312e:	f026 0607 	bic.w	r6, r6, #7
 8003132:	1d23      	adds	r3, r4, #4
 8003134:	1af2      	subs	r2, r6, r3
 8003136:	d0ae      	beq.n	8003096 <_malloc_r+0x22>
 8003138:	1b9b      	subs	r3, r3, r6
 800313a:	50a3      	str	r3, [r4, r2]
 800313c:	e7ab      	b.n	8003096 <_malloc_r+0x22>
 800313e:	42a3      	cmp	r3, r4
 8003140:	6862      	ldr	r2, [r4, #4]
 8003142:	d1dd      	bne.n	8003100 <_malloc_r+0x8c>
 8003144:	f8c8 2000 	str.w	r2, [r8]
 8003148:	e7ec      	b.n	8003124 <_malloc_r+0xb0>
 800314a:	4623      	mov	r3, r4
 800314c:	6864      	ldr	r4, [r4, #4]
 800314e:	e7ac      	b.n	80030aa <_malloc_r+0x36>
 8003150:	4634      	mov	r4, r6
 8003152:	6876      	ldr	r6, [r6, #4]
 8003154:	e7b4      	b.n	80030c0 <_malloc_r+0x4c>
 8003156:	4613      	mov	r3, r2
 8003158:	e7cc      	b.n	80030f4 <_malloc_r+0x80>
 800315a:	230c      	movs	r3, #12
 800315c:	4638      	mov	r0, r7
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	f000 f80e 	bl	8003180 <__malloc_unlock>
 8003164:	e797      	b.n	8003096 <_malloc_r+0x22>
 8003166:	6025      	str	r5, [r4, #0]
 8003168:	e7dc      	b.n	8003124 <_malloc_r+0xb0>
 800316a:	605b      	str	r3, [r3, #4]
 800316c:	deff      	udf	#255	; 0xff
 800316e:	bf00      	nop
 8003170:	20000280 	.word	0x20000280

08003174 <__malloc_lock>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__malloc_lock+0x8>)
 8003176:	f7ff bf13 	b.w	8002fa0 <__retarget_lock_acquire_recursive>
 800317a:	bf00      	nop
 800317c:	2000027c 	.word	0x2000027c

08003180 <__malloc_unlock>:
 8003180:	4801      	ldr	r0, [pc, #4]	; (8003188 <__malloc_unlock+0x8>)
 8003182:	f7ff bf0e 	b.w	8002fa2 <__retarget_lock_release_recursive>
 8003186:	bf00      	nop
 8003188:	2000027c 	.word	0x2000027c

0800318c <__ssputs_r>:
 800318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	461f      	mov	r7, r3
 8003192:	688e      	ldr	r6, [r1, #8]
 8003194:	4682      	mov	sl, r0
 8003196:	42be      	cmp	r6, r7
 8003198:	460c      	mov	r4, r1
 800319a:	4690      	mov	r8, r2
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	d82c      	bhi.n	80031fa <__ssputs_r+0x6e>
 80031a0:	898a      	ldrh	r2, [r1, #12]
 80031a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031a6:	d026      	beq.n	80031f6 <__ssputs_r+0x6a>
 80031a8:	6965      	ldr	r5, [r4, #20]
 80031aa:	6909      	ldr	r1, [r1, #16]
 80031ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031b0:	eba3 0901 	sub.w	r9, r3, r1
 80031b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b8:	1c7b      	adds	r3, r7, #1
 80031ba:	444b      	add	r3, r9
 80031bc:	106d      	asrs	r5, r5, #1
 80031be:	429d      	cmp	r5, r3
 80031c0:	bf38      	it	cc
 80031c2:	461d      	movcc	r5, r3
 80031c4:	0553      	lsls	r3, r2, #21
 80031c6:	d527      	bpl.n	8003218 <__ssputs_r+0x8c>
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7ff ff53 	bl	8003074 <_malloc_r>
 80031ce:	4606      	mov	r6, r0
 80031d0:	b360      	cbz	r0, 800322c <__ssputs_r+0xa0>
 80031d2:	464a      	mov	r2, r9
 80031d4:	6921      	ldr	r1, [r4, #16]
 80031d6:	f000 fafd 	bl	80037d4 <memcpy>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	81a3      	strh	r3, [r4, #12]
 80031e6:	6126      	str	r6, [r4, #16]
 80031e8:	444e      	add	r6, r9
 80031ea:	6026      	str	r6, [r4, #0]
 80031ec:	463e      	mov	r6, r7
 80031ee:	6165      	str	r5, [r4, #20]
 80031f0:	eba5 0509 	sub.w	r5, r5, r9
 80031f4:	60a5      	str	r5, [r4, #8]
 80031f6:	42be      	cmp	r6, r7
 80031f8:	d900      	bls.n	80031fc <__ssputs_r+0x70>
 80031fa:	463e      	mov	r6, r7
 80031fc:	4632      	mov	r2, r6
 80031fe:	4641      	mov	r1, r8
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	f000 faaf 	bl	8003764 <memmove>
 8003206:	2000      	movs	r0, #0
 8003208:	68a3      	ldr	r3, [r4, #8]
 800320a:	1b9b      	subs	r3, r3, r6
 800320c:	60a3      	str	r3, [r4, #8]
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	4433      	add	r3, r6
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	462a      	mov	r2, r5
 800321a:	f000 fae9 	bl	80037f0 <_realloc_r>
 800321e:	4606      	mov	r6, r0
 8003220:	2800      	cmp	r0, #0
 8003222:	d1e0      	bne.n	80031e6 <__ssputs_r+0x5a>
 8003224:	4650      	mov	r0, sl
 8003226:	6921      	ldr	r1, [r4, #16]
 8003228:	f7ff febc 	bl	8002fa4 <_free_r>
 800322c:	230c      	movs	r3, #12
 800322e:	f8ca 3000 	str.w	r3, [sl]
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	e7e9      	b.n	8003214 <__ssputs_r+0x88>

08003240 <_svfiprintf_r>:
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4698      	mov	r8, r3
 8003246:	898b      	ldrh	r3, [r1, #12]
 8003248:	4607      	mov	r7, r0
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	460d      	mov	r5, r1
 800324e:	4614      	mov	r4, r2
 8003250:	b09d      	sub	sp, #116	; 0x74
 8003252:	d50e      	bpl.n	8003272 <_svfiprintf_r+0x32>
 8003254:	690b      	ldr	r3, [r1, #16]
 8003256:	b963      	cbnz	r3, 8003272 <_svfiprintf_r+0x32>
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	f7ff ff0b 	bl	8003074 <_malloc_r>
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	6128      	str	r0, [r5, #16]
 8003262:	b920      	cbnz	r0, 800326e <_svfiprintf_r+0x2e>
 8003264:	230c      	movs	r3, #12
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	e0d0      	b.n	8003410 <_svfiprintf_r+0x1d0>
 800326e:	2340      	movs	r3, #64	; 0x40
 8003270:	616b      	str	r3, [r5, #20]
 8003272:	2300      	movs	r3, #0
 8003274:	9309      	str	r3, [sp, #36]	; 0x24
 8003276:	2320      	movs	r3, #32
 8003278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800327c:	2330      	movs	r3, #48	; 0x30
 800327e:	f04f 0901 	mov.w	r9, #1
 8003282:	f8cd 800c 	str.w	r8, [sp, #12]
 8003286:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003428 <_svfiprintf_r+0x1e8>
 800328a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800328e:	4623      	mov	r3, r4
 8003290:	469a      	mov	sl, r3
 8003292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003296:	b10a      	cbz	r2, 800329c <_svfiprintf_r+0x5c>
 8003298:	2a25      	cmp	r2, #37	; 0x25
 800329a:	d1f9      	bne.n	8003290 <_svfiprintf_r+0x50>
 800329c:	ebba 0b04 	subs.w	fp, sl, r4
 80032a0:	d00b      	beq.n	80032ba <_svfiprintf_r+0x7a>
 80032a2:	465b      	mov	r3, fp
 80032a4:	4622      	mov	r2, r4
 80032a6:	4629      	mov	r1, r5
 80032a8:	4638      	mov	r0, r7
 80032aa:	f7ff ff6f 	bl	800318c <__ssputs_r>
 80032ae:	3001      	adds	r0, #1
 80032b0:	f000 80a9 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032b6:	445a      	add	r2, fp
 80032b8:	9209      	str	r2, [sp, #36]	; 0x24
 80032ba:	f89a 3000 	ldrb.w	r3, [sl]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a1 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032c4:	2300      	movs	r3, #0
 80032c6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ce:	f10a 0a01 	add.w	sl, sl, #1
 80032d2:	9304      	str	r3, [sp, #16]
 80032d4:	9307      	str	r3, [sp, #28]
 80032d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032da:	931a      	str	r3, [sp, #104]	; 0x68
 80032dc:	4654      	mov	r4, sl
 80032de:	2205      	movs	r2, #5
 80032e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e4:	4850      	ldr	r0, [pc, #320]	; (8003428 <_svfiprintf_r+0x1e8>)
 80032e6:	f000 fa67 	bl	80037b8 <memchr>
 80032ea:	9a04      	ldr	r2, [sp, #16]
 80032ec:	b9d8      	cbnz	r0, 8003326 <_svfiprintf_r+0xe6>
 80032ee:	06d0      	lsls	r0, r2, #27
 80032f0:	bf44      	itt	mi
 80032f2:	2320      	movmi	r3, #32
 80032f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032f8:	0711      	lsls	r1, r2, #28
 80032fa:	bf44      	itt	mi
 80032fc:	232b      	movmi	r3, #43	; 0x2b
 80032fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003302:	f89a 3000 	ldrb.w	r3, [sl]
 8003306:	2b2a      	cmp	r3, #42	; 0x2a
 8003308:	d015      	beq.n	8003336 <_svfiprintf_r+0xf6>
 800330a:	4654      	mov	r4, sl
 800330c:	2000      	movs	r0, #0
 800330e:	f04f 0c0a 	mov.w	ip, #10
 8003312:	9a07      	ldr	r2, [sp, #28]
 8003314:	4621      	mov	r1, r4
 8003316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331a:	3b30      	subs	r3, #48	; 0x30
 800331c:	2b09      	cmp	r3, #9
 800331e:	d94d      	bls.n	80033bc <_svfiprintf_r+0x17c>
 8003320:	b1b0      	cbz	r0, 8003350 <_svfiprintf_r+0x110>
 8003322:	9207      	str	r2, [sp, #28]
 8003324:	e014      	b.n	8003350 <_svfiprintf_r+0x110>
 8003326:	eba0 0308 	sub.w	r3, r0, r8
 800332a:	fa09 f303 	lsl.w	r3, r9, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	46a2      	mov	sl, r4
 8003332:	9304      	str	r3, [sp, #16]
 8003334:	e7d2      	b.n	80032dc <_svfiprintf_r+0x9c>
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	1d19      	adds	r1, r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	9103      	str	r1, [sp, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	bfbb      	ittet	lt
 8003342:	425b      	neglt	r3, r3
 8003344:	f042 0202 	orrlt.w	r2, r2, #2
 8003348:	9307      	strge	r3, [sp, #28]
 800334a:	9307      	strlt	r3, [sp, #28]
 800334c:	bfb8      	it	lt
 800334e:	9204      	strlt	r2, [sp, #16]
 8003350:	7823      	ldrb	r3, [r4, #0]
 8003352:	2b2e      	cmp	r3, #46	; 0x2e
 8003354:	d10c      	bne.n	8003370 <_svfiprintf_r+0x130>
 8003356:	7863      	ldrb	r3, [r4, #1]
 8003358:	2b2a      	cmp	r3, #42	; 0x2a
 800335a:	d134      	bne.n	80033c6 <_svfiprintf_r+0x186>
 800335c:	9b03      	ldr	r3, [sp, #12]
 800335e:	3402      	adds	r4, #2
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	9203      	str	r2, [sp, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	bfb8      	it	lt
 800336a:	f04f 33ff 	movlt.w	r3, #4294967295
 800336e:	9305      	str	r3, [sp, #20]
 8003370:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800342c <_svfiprintf_r+0x1ec>
 8003374:	2203      	movs	r2, #3
 8003376:	4650      	mov	r0, sl
 8003378:	7821      	ldrb	r1, [r4, #0]
 800337a:	f000 fa1d 	bl	80037b8 <memchr>
 800337e:	b138      	cbz	r0, 8003390 <_svfiprintf_r+0x150>
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	eba0 000a 	sub.w	r0, r0, sl
 8003388:	4082      	lsls	r2, r0
 800338a:	4313      	orrs	r3, r2
 800338c:	3401      	adds	r4, #1
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003394:	2206      	movs	r2, #6
 8003396:	4826      	ldr	r0, [pc, #152]	; (8003430 <_svfiprintf_r+0x1f0>)
 8003398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800339c:	f000 fa0c 	bl	80037b8 <memchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d038      	beq.n	8003416 <_svfiprintf_r+0x1d6>
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <_svfiprintf_r+0x1f4>)
 80033a6:	bb1b      	cbnz	r3, 80033f0 <_svfiprintf_r+0x1b0>
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	3307      	adds	r3, #7
 80033ac:	f023 0307 	bic.w	r3, r3, #7
 80033b0:	3308      	adds	r3, #8
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b6:	4433      	add	r3, r6
 80033b8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ba:	e768      	b.n	800328e <_svfiprintf_r+0x4e>
 80033bc:	460c      	mov	r4, r1
 80033be:	2001      	movs	r0, #1
 80033c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c4:	e7a6      	b.n	8003314 <_svfiprintf_r+0xd4>
 80033c6:	2300      	movs	r3, #0
 80033c8:	f04f 0c0a 	mov.w	ip, #10
 80033cc:	4619      	mov	r1, r3
 80033ce:	3401      	adds	r4, #1
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	4620      	mov	r0, r4
 80033d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d8:	3a30      	subs	r2, #48	; 0x30
 80033da:	2a09      	cmp	r2, #9
 80033dc:	d903      	bls.n	80033e6 <_svfiprintf_r+0x1a6>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c6      	beq.n	8003370 <_svfiprintf_r+0x130>
 80033e2:	9105      	str	r1, [sp, #20]
 80033e4:	e7c4      	b.n	8003370 <_svfiprintf_r+0x130>
 80033e6:	4604      	mov	r4, r0
 80033e8:	2301      	movs	r3, #1
 80033ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ee:	e7f0      	b.n	80033d2 <_svfiprintf_r+0x192>
 80033f0:	ab03      	add	r3, sp, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462a      	mov	r2, r5
 80033f6:	4638      	mov	r0, r7
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <_svfiprintf_r+0x1f8>)
 80033fa:	a904      	add	r1, sp, #16
 80033fc:	f3af 8000 	nop.w
 8003400:	1c42      	adds	r2, r0, #1
 8003402:	4606      	mov	r6, r0
 8003404:	d1d6      	bne.n	80033b4 <_svfiprintf_r+0x174>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af2d 	bmi.w	8003268 <_svfiprintf_r+0x28>
 800340e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003410:	b01d      	add	sp, #116	; 0x74
 8003412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003416:	ab03      	add	r3, sp, #12
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	462a      	mov	r2, r5
 800341c:	4638      	mov	r0, r7
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <_svfiprintf_r+0x1f8>)
 8003420:	a904      	add	r1, sp, #16
 8003422:	f000 f87d 	bl	8003520 <_printf_i>
 8003426:	e7eb      	b.n	8003400 <_svfiprintf_r+0x1c0>
 8003428:	080038ba 	.word	0x080038ba
 800342c:	080038c0 	.word	0x080038c0
 8003430:	080038c4 	.word	0x080038c4
 8003434:	00000000 	.word	0x00000000
 8003438:	0800318d 	.word	0x0800318d

0800343c <_printf_common>:
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	4616      	mov	r6, r2
 8003442:	4699      	mov	r9, r3
 8003444:	688a      	ldr	r2, [r1, #8]
 8003446:	690b      	ldr	r3, [r1, #16]
 8003448:	4607      	mov	r7, r0
 800344a:	4293      	cmp	r3, r2
 800344c:	bfb8      	it	lt
 800344e:	4613      	movlt	r3, r2
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003456:	460c      	mov	r4, r1
 8003458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800345c:	b10a      	cbz	r2, 8003462 <_printf_common+0x26>
 800345e:	3301      	adds	r3, #1
 8003460:	6033      	str	r3, [r6, #0]
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	0699      	lsls	r1, r3, #26
 8003466:	bf42      	ittt	mi
 8003468:	6833      	ldrmi	r3, [r6, #0]
 800346a:	3302      	addmi	r3, #2
 800346c:	6033      	strmi	r3, [r6, #0]
 800346e:	6825      	ldr	r5, [r4, #0]
 8003470:	f015 0506 	ands.w	r5, r5, #6
 8003474:	d106      	bne.n	8003484 <_printf_common+0x48>
 8003476:	f104 0a19 	add.w	sl, r4, #25
 800347a:	68e3      	ldr	r3, [r4, #12]
 800347c:	6832      	ldr	r2, [r6, #0]
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	42ab      	cmp	r3, r5
 8003482:	dc2b      	bgt.n	80034dc <_printf_common+0xa0>
 8003484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003488:	1e13      	subs	r3, r2, #0
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	bf18      	it	ne
 800348e:	2301      	movne	r3, #1
 8003490:	0692      	lsls	r2, r2, #26
 8003492:	d430      	bmi.n	80034f6 <_printf_common+0xba>
 8003494:	4649      	mov	r1, r9
 8003496:	4638      	mov	r0, r7
 8003498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800349c:	47c0      	blx	r8
 800349e:	3001      	adds	r0, #1
 80034a0:	d023      	beq.n	80034ea <_printf_common+0xae>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	6922      	ldr	r2, [r4, #16]
 80034a6:	f003 0306 	and.w	r3, r3, #6
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf14      	ite	ne
 80034ae:	2500      	movne	r5, #0
 80034b0:	6833      	ldreq	r3, [r6, #0]
 80034b2:	f04f 0600 	mov.w	r6, #0
 80034b6:	bf08      	it	eq
 80034b8:	68e5      	ldreq	r5, [r4, #12]
 80034ba:	f104 041a 	add.w	r4, r4, #26
 80034be:	bf08      	it	eq
 80034c0:	1aed      	subeq	r5, r5, r3
 80034c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034c6:	bf08      	it	eq
 80034c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034cc:	4293      	cmp	r3, r2
 80034ce:	bfc4      	itt	gt
 80034d0:	1a9b      	subgt	r3, r3, r2
 80034d2:	18ed      	addgt	r5, r5, r3
 80034d4:	42b5      	cmp	r5, r6
 80034d6:	d11a      	bne.n	800350e <_printf_common+0xd2>
 80034d8:	2000      	movs	r0, #0
 80034da:	e008      	b.n	80034ee <_printf_common+0xb2>
 80034dc:	2301      	movs	r3, #1
 80034de:	4652      	mov	r2, sl
 80034e0:	4649      	mov	r1, r9
 80034e2:	4638      	mov	r0, r7
 80034e4:	47c0      	blx	r8
 80034e6:	3001      	adds	r0, #1
 80034e8:	d103      	bne.n	80034f2 <_printf_common+0xb6>
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f2:	3501      	adds	r5, #1
 80034f4:	e7c1      	b.n	800347a <_printf_common+0x3e>
 80034f6:	2030      	movs	r0, #48	; 0x30
 80034f8:	18e1      	adds	r1, r4, r3
 80034fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003504:	4422      	add	r2, r4
 8003506:	3302      	adds	r3, #2
 8003508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800350c:	e7c2      	b.n	8003494 <_printf_common+0x58>
 800350e:	2301      	movs	r3, #1
 8003510:	4622      	mov	r2, r4
 8003512:	4649      	mov	r1, r9
 8003514:	4638      	mov	r0, r7
 8003516:	47c0      	blx	r8
 8003518:	3001      	adds	r0, #1
 800351a:	d0e6      	beq.n	80034ea <_printf_common+0xae>
 800351c:	3601      	adds	r6, #1
 800351e:	e7d9      	b.n	80034d4 <_printf_common+0x98>

08003520 <_printf_i>:
 8003520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	7e0f      	ldrb	r7, [r1, #24]
 8003526:	4691      	mov	r9, r2
 8003528:	2f78      	cmp	r7, #120	; 0x78
 800352a:	4680      	mov	r8, r0
 800352c:	460c      	mov	r4, r1
 800352e:	469a      	mov	sl, r3
 8003530:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003536:	d807      	bhi.n	8003548 <_printf_i+0x28>
 8003538:	2f62      	cmp	r7, #98	; 0x62
 800353a:	d80a      	bhi.n	8003552 <_printf_i+0x32>
 800353c:	2f00      	cmp	r7, #0
 800353e:	f000 80d5 	beq.w	80036ec <_printf_i+0x1cc>
 8003542:	2f58      	cmp	r7, #88	; 0x58
 8003544:	f000 80c1 	beq.w	80036ca <_printf_i+0x1aa>
 8003548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800354c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003550:	e03a      	b.n	80035c8 <_printf_i+0xa8>
 8003552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003556:	2b15      	cmp	r3, #21
 8003558:	d8f6      	bhi.n	8003548 <_printf_i+0x28>
 800355a:	a101      	add	r1, pc, #4	; (adr r1, 8003560 <_printf_i+0x40>)
 800355c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003560:	080035b9 	.word	0x080035b9
 8003564:	080035cd 	.word	0x080035cd
 8003568:	08003549 	.word	0x08003549
 800356c:	08003549 	.word	0x08003549
 8003570:	08003549 	.word	0x08003549
 8003574:	08003549 	.word	0x08003549
 8003578:	080035cd 	.word	0x080035cd
 800357c:	08003549 	.word	0x08003549
 8003580:	08003549 	.word	0x08003549
 8003584:	08003549 	.word	0x08003549
 8003588:	08003549 	.word	0x08003549
 800358c:	080036d3 	.word	0x080036d3
 8003590:	080035f9 	.word	0x080035f9
 8003594:	0800368d 	.word	0x0800368d
 8003598:	08003549 	.word	0x08003549
 800359c:	08003549 	.word	0x08003549
 80035a0:	080036f5 	.word	0x080036f5
 80035a4:	08003549 	.word	0x08003549
 80035a8:	080035f9 	.word	0x080035f9
 80035ac:	08003549 	.word	0x08003549
 80035b0:	08003549 	.word	0x08003549
 80035b4:	08003695 	.word	0x08003695
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	602a      	str	r2, [r5, #0]
 80035c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a0      	b.n	800370e <_printf_i+0x1ee>
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	0607      	lsls	r7, r0, #24
 80035d2:	f103 0104 	add.w	r1, r3, #4
 80035d6:	6029      	str	r1, [r5, #0]
 80035d8:	d501      	bpl.n	80035de <_printf_i+0xbe>
 80035da:	681e      	ldr	r6, [r3, #0]
 80035dc:	e003      	b.n	80035e6 <_printf_i+0xc6>
 80035de:	0646      	lsls	r6, r0, #25
 80035e0:	d5fb      	bpl.n	80035da <_printf_i+0xba>
 80035e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	da03      	bge.n	80035f2 <_printf_i+0xd2>
 80035ea:	232d      	movs	r3, #45	; 0x2d
 80035ec:	4276      	negs	r6, r6
 80035ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f2:	230a      	movs	r3, #10
 80035f4:	4859      	ldr	r0, [pc, #356]	; (800375c <_printf_i+0x23c>)
 80035f6:	e012      	b.n	800361e <_printf_i+0xfe>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	1d19      	adds	r1, r3, #4
 80035fe:	6029      	str	r1, [r5, #0]
 8003600:	0605      	lsls	r5, r0, #24
 8003602:	d501      	bpl.n	8003608 <_printf_i+0xe8>
 8003604:	681e      	ldr	r6, [r3, #0]
 8003606:	e002      	b.n	800360e <_printf_i+0xee>
 8003608:	0641      	lsls	r1, r0, #25
 800360a:	d5fb      	bpl.n	8003604 <_printf_i+0xe4>
 800360c:	881e      	ldrh	r6, [r3, #0]
 800360e:	2f6f      	cmp	r7, #111	; 0x6f
 8003610:	bf0c      	ite	eq
 8003612:	2308      	moveq	r3, #8
 8003614:	230a      	movne	r3, #10
 8003616:	4851      	ldr	r0, [pc, #324]	; (800375c <_printf_i+0x23c>)
 8003618:	2100      	movs	r1, #0
 800361a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800361e:	6865      	ldr	r5, [r4, #4]
 8003620:	2d00      	cmp	r5, #0
 8003622:	bfa8      	it	ge
 8003624:	6821      	ldrge	r1, [r4, #0]
 8003626:	60a5      	str	r5, [r4, #8]
 8003628:	bfa4      	itt	ge
 800362a:	f021 0104 	bicge.w	r1, r1, #4
 800362e:	6021      	strge	r1, [r4, #0]
 8003630:	b90e      	cbnz	r6, 8003636 <_printf_i+0x116>
 8003632:	2d00      	cmp	r5, #0
 8003634:	d04b      	beq.n	80036ce <_printf_i+0x1ae>
 8003636:	4615      	mov	r5, r2
 8003638:	fbb6 f1f3 	udiv	r1, r6, r3
 800363c:	fb03 6711 	mls	r7, r3, r1, r6
 8003640:	5dc7      	ldrb	r7, [r0, r7]
 8003642:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003646:	4637      	mov	r7, r6
 8003648:	42bb      	cmp	r3, r7
 800364a:	460e      	mov	r6, r1
 800364c:	d9f4      	bls.n	8003638 <_printf_i+0x118>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d10b      	bne.n	800366a <_printf_i+0x14a>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	07de      	lsls	r6, r3, #31
 8003656:	d508      	bpl.n	800366a <_printf_i+0x14a>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	6861      	ldr	r1, [r4, #4]
 800365c:	4299      	cmp	r1, r3
 800365e:	bfde      	ittt	le
 8003660:	2330      	movle	r3, #48	; 0x30
 8003662:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003666:	f105 35ff 	addle.w	r5, r5, #4294967295
 800366a:	1b52      	subs	r2, r2, r5
 800366c:	6122      	str	r2, [r4, #16]
 800366e:	464b      	mov	r3, r9
 8003670:	4621      	mov	r1, r4
 8003672:	4640      	mov	r0, r8
 8003674:	f8cd a000 	str.w	sl, [sp]
 8003678:	aa03      	add	r2, sp, #12
 800367a:	f7ff fedf 	bl	800343c <_printf_common>
 800367e:	3001      	adds	r0, #1
 8003680:	d14a      	bne.n	8003718 <_printf_i+0x1f8>
 8003682:	f04f 30ff 	mov.w	r0, #4294967295
 8003686:	b004      	add	sp, #16
 8003688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f043 0320 	orr.w	r3, r3, #32
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	2778      	movs	r7, #120	; 0x78
 8003696:	4832      	ldr	r0, [pc, #200]	; (8003760 <_printf_i+0x240>)
 8003698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	6829      	ldr	r1, [r5, #0]
 80036a0:	061f      	lsls	r7, r3, #24
 80036a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80036a6:	d402      	bmi.n	80036ae <_printf_i+0x18e>
 80036a8:	065f      	lsls	r7, r3, #25
 80036aa:	bf48      	it	mi
 80036ac:	b2b6      	uxthmi	r6, r6
 80036ae:	07df      	lsls	r7, r3, #31
 80036b0:	bf48      	it	mi
 80036b2:	f043 0320 	orrmi.w	r3, r3, #32
 80036b6:	6029      	str	r1, [r5, #0]
 80036b8:	bf48      	it	mi
 80036ba:	6023      	strmi	r3, [r4, #0]
 80036bc:	b91e      	cbnz	r6, 80036c6 <_printf_i+0x1a6>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f023 0320 	bic.w	r3, r3, #32
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	2310      	movs	r3, #16
 80036c8:	e7a6      	b.n	8003618 <_printf_i+0xf8>
 80036ca:	4824      	ldr	r0, [pc, #144]	; (800375c <_printf_i+0x23c>)
 80036cc:	e7e4      	b.n	8003698 <_printf_i+0x178>
 80036ce:	4615      	mov	r5, r2
 80036d0:	e7bd      	b.n	800364e <_printf_i+0x12e>
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	6826      	ldr	r6, [r4, #0]
 80036d6:	1d18      	adds	r0, r3, #4
 80036d8:	6961      	ldr	r1, [r4, #20]
 80036da:	6028      	str	r0, [r5, #0]
 80036dc:	0635      	lsls	r5, r6, #24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	d501      	bpl.n	80036e6 <_printf_i+0x1c6>
 80036e2:	6019      	str	r1, [r3, #0]
 80036e4:	e002      	b.n	80036ec <_printf_i+0x1cc>
 80036e6:	0670      	lsls	r0, r6, #25
 80036e8:	d5fb      	bpl.n	80036e2 <_printf_i+0x1c2>
 80036ea:	8019      	strh	r1, [r3, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	4615      	mov	r5, r2
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	e7bc      	b.n	800366e <_printf_i+0x14e>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	2100      	movs	r1, #0
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	602a      	str	r2, [r5, #0]
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f859 	bl	80037b8 <memchr>
 8003706:	b108      	cbz	r0, 800370c <_printf_i+0x1ec>
 8003708:	1b40      	subs	r0, r0, r5
 800370a:	6060      	str	r0, [r4, #4]
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	2300      	movs	r3, #0
 8003712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003716:	e7aa      	b.n	800366e <_printf_i+0x14e>
 8003718:	462a      	mov	r2, r5
 800371a:	4649      	mov	r1, r9
 800371c:	4640      	mov	r0, r8
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	47d0      	blx	sl
 8003722:	3001      	adds	r0, #1
 8003724:	d0ad      	beq.n	8003682 <_printf_i+0x162>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	079b      	lsls	r3, r3, #30
 800372a:	d413      	bmi.n	8003754 <_printf_i+0x234>
 800372c:	68e0      	ldr	r0, [r4, #12]
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	4298      	cmp	r0, r3
 8003732:	bfb8      	it	lt
 8003734:	4618      	movlt	r0, r3
 8003736:	e7a6      	b.n	8003686 <_printf_i+0x166>
 8003738:	2301      	movs	r3, #1
 800373a:	4632      	mov	r2, r6
 800373c:	4649      	mov	r1, r9
 800373e:	4640      	mov	r0, r8
 8003740:	47d0      	blx	sl
 8003742:	3001      	adds	r0, #1
 8003744:	d09d      	beq.n	8003682 <_printf_i+0x162>
 8003746:	3501      	adds	r5, #1
 8003748:	68e3      	ldr	r3, [r4, #12]
 800374a:	9903      	ldr	r1, [sp, #12]
 800374c:	1a5b      	subs	r3, r3, r1
 800374e:	42ab      	cmp	r3, r5
 8003750:	dcf2      	bgt.n	8003738 <_printf_i+0x218>
 8003752:	e7eb      	b.n	800372c <_printf_i+0x20c>
 8003754:	2500      	movs	r5, #0
 8003756:	f104 0619 	add.w	r6, r4, #25
 800375a:	e7f5      	b.n	8003748 <_printf_i+0x228>
 800375c:	080038cb 	.word	0x080038cb
 8003760:	080038dc 	.word	0x080038dc

08003764 <memmove>:
 8003764:	4288      	cmp	r0, r1
 8003766:	b510      	push	{r4, lr}
 8003768:	eb01 0402 	add.w	r4, r1, r2
 800376c:	d902      	bls.n	8003774 <memmove+0x10>
 800376e:	4284      	cmp	r4, r0
 8003770:	4623      	mov	r3, r4
 8003772:	d807      	bhi.n	8003784 <memmove+0x20>
 8003774:	1e43      	subs	r3, r0, #1
 8003776:	42a1      	cmp	r1, r4
 8003778:	d008      	beq.n	800378c <memmove+0x28>
 800377a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800377e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003782:	e7f8      	b.n	8003776 <memmove+0x12>
 8003784:	4601      	mov	r1, r0
 8003786:	4402      	add	r2, r0
 8003788:	428a      	cmp	r2, r1
 800378a:	d100      	bne.n	800378e <memmove+0x2a>
 800378c:	bd10      	pop	{r4, pc}
 800378e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003796:	e7f7      	b.n	8003788 <memmove+0x24>

08003798 <_sbrk_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	2300      	movs	r3, #0
 800379c:	4d05      	ldr	r5, [pc, #20]	; (80037b4 <_sbrk_r+0x1c>)
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd f834 	bl	8000810 <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_sbrk_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_sbrk_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20000278 	.word	0x20000278

080037b8 <memchr>:
 80037b8:	4603      	mov	r3, r0
 80037ba:	b510      	push	{r4, lr}
 80037bc:	b2c9      	uxtb	r1, r1
 80037be:	4402      	add	r2, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	d101      	bne.n	80037ca <memchr+0x12>
 80037c6:	2000      	movs	r0, #0
 80037c8:	e003      	b.n	80037d2 <memchr+0x1a>
 80037ca:	7804      	ldrb	r4, [r0, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	428c      	cmp	r4, r1
 80037d0:	d1f6      	bne.n	80037c0 <memchr+0x8>
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <memcpy>:
 80037d4:	440a      	add	r2, r1
 80037d6:	4291      	cmp	r1, r2
 80037d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037dc:	d100      	bne.n	80037e0 <memcpy+0xc>
 80037de:	4770      	bx	lr
 80037e0:	b510      	push	{r4, lr}
 80037e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e6:	4291      	cmp	r1, r2
 80037e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ec:	d1f9      	bne.n	80037e2 <memcpy+0xe>
 80037ee:	bd10      	pop	{r4, pc}

080037f0 <_realloc_r>:
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	4680      	mov	r8, r0
 80037f6:	4614      	mov	r4, r2
 80037f8:	460e      	mov	r6, r1
 80037fa:	b921      	cbnz	r1, 8003806 <_realloc_r+0x16>
 80037fc:	4611      	mov	r1, r2
 80037fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	f7ff bc37 	b.w	8003074 <_malloc_r>
 8003806:	b92a      	cbnz	r2, 8003814 <_realloc_r+0x24>
 8003808:	f7ff fbcc 	bl	8002fa4 <_free_r>
 800380c:	4625      	mov	r5, r4
 800380e:	4628      	mov	r0, r5
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003814:	f000 f81b 	bl	800384e <_malloc_usable_size_r>
 8003818:	4284      	cmp	r4, r0
 800381a:	4607      	mov	r7, r0
 800381c:	d802      	bhi.n	8003824 <_realloc_r+0x34>
 800381e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003822:	d812      	bhi.n	800384a <_realloc_r+0x5a>
 8003824:	4621      	mov	r1, r4
 8003826:	4640      	mov	r0, r8
 8003828:	f7ff fc24 	bl	8003074 <_malloc_r>
 800382c:	4605      	mov	r5, r0
 800382e:	2800      	cmp	r0, #0
 8003830:	d0ed      	beq.n	800380e <_realloc_r+0x1e>
 8003832:	42bc      	cmp	r4, r7
 8003834:	4622      	mov	r2, r4
 8003836:	4631      	mov	r1, r6
 8003838:	bf28      	it	cs
 800383a:	463a      	movcs	r2, r7
 800383c:	f7ff ffca 	bl	80037d4 <memcpy>
 8003840:	4631      	mov	r1, r6
 8003842:	4640      	mov	r0, r8
 8003844:	f7ff fbae 	bl	8002fa4 <_free_r>
 8003848:	e7e1      	b.n	800380e <_realloc_r+0x1e>
 800384a:	4635      	mov	r5, r6
 800384c:	e7df      	b.n	800380e <_realloc_r+0x1e>

0800384e <_malloc_usable_size_r>:
 800384e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003852:	1f18      	subs	r0, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	bfbc      	itt	lt
 8003858:	580b      	ldrlt	r3, [r1, r0]
 800385a:	18c0      	addlt	r0, r0, r3
 800385c:	4770      	bx	lr
	...

08003860 <_init>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr

0800386c <_fini>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr
