
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042fc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  0800453c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  20000014  08004548  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003bc  08004548  000203bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014535  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b4b  00000000  00000000  000345bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014b8  00000000  00000000  00037108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000fc5  00000000  00000000  000385c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021233  00000000  00000000  00039585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012b38  00000000  00000000  0005a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d4ffd  00000000  00000000  0006d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000056b8  00000000  00000000  001422f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001479a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004420 	.word	0x08004420

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004420 	.word	0x08004420

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb1f 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f80b 	bl	80004f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e2:	f000 f87f 	bl	80005e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f915 	bl	8000714 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f89f 	bl	800062c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004ee:	f000 f8e9 	bl	80006c4 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 80004f2:	f000 f894 	bl	800061e <MX_MEMORYMAP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x20>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09a      	sub	sp, #104	; 0x68
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2248      	movs	r2, #72	; 0x48
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 ff5e 	bl	80043c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800051e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800052c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800052e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	f023 0303 	bic.w	r3, r3, #3
 8000538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000542:	f000 ffcb 	bl	80014dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ff96 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SystemClock_Config+0xe8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000554:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <SystemClock_Config+0xe8>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <SystemClock_Config+0xe8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000568:	2327      	movs	r3, #39	; 0x27
 800056a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fb35 	bl	8001c04 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005a0:	f000 f900 	bl	80007a4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005a4:	236f      	movs	r3, #111	; 0x6f
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005a8:	2302      	movs	r3, #2
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2101      	movs	r1, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fe91 	bl	80022ec <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005d0:	f000 f8e8 	bl	80007a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d4:	f002 fc4c 	bl	8002e70 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005d8:	bf00      	nop
 80005da:	3768      	adds	r7, #104	; 0x68
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	58000400 	.word	0x58000400

080005e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2250      	movs	r2, #80	; 0x50
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fee9 	bl	80043c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fabc 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000612:	f000 f8c7 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <MX_USART1_UART_Init+0x94>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000676:	f002 fd32 	bl	80030de <HAL_UART_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f890 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_USART1_UART_Init+0x90>)
 8000688:	f003 fd97 	bl	80041ba <HAL_UARTEx_SetTxFifoThreshold>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000692:	f000 f887 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <MX_USART1_UART_Init+0x90>)
 800069a:	f003 fdcc 	bl	8004236 <HAL_UARTEx_SetRxFifoThreshold>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a4:	f000 f87e 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_USART1_UART_Init+0x90>)
 80006aa:	f003 fd4d 	bl	8004148 <HAL_UARTEx_DisableFifoMode>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f876 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000030 	.word	0x20000030
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <MX_USB_PCD_Init+0x4c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006d0:	2208      	movs	r2, #8
 80006d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006dc:	2202      	movs	r2, #2
 80006de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_USB_PCD_Init+0x48>)
 80006fa:	f000 fdeb 	bl	80012d4 <HAL_PCD_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000704:	f000 f84e 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000c4 	.word	0x200000c4
 8000710:	40006800 	.word	0x40006800

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff febb 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff feb8 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff feb5 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2008      	movs	r0, #8
 800073c:	f7ff feb2 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2123      	movs	r1, #35	; 0x23
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_GPIO_Init+0x84>)
 8000746:	f000 fdad 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074a:	2310      	movs	r3, #16
 800074c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4810      	ldr	r0, [pc, #64]	; (800079c <MX_GPIO_Init+0x88>)
 800075c:	f000 fc32 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000760:	2323      	movs	r3, #35	; 0x23
 8000762:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <MX_GPIO_Init+0x84>)
 8000776:	f000 fc25 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800077a:	2303      	movs	r3, #3
 800077c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800078c:	f000 fc1a 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	48000400 	.word	0x48000400
 800079c:	48000800 	.word	0x48000800
 80007a0:	48000c00 	.word	0x48000c00

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>

080007ae <LL_AHB2_GRP1_EnableClock>:
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4013      	ands	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000804:	68fb      	ldr	r3, [r7, #12]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800081a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4313      	orrs	r3, r2
 8000828:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4013      	ands	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	; 0x70
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2250      	movs	r2, #80	; 0x50
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fda7 	bl	80043c8 <memset>
  if(huart->Instance==USART1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <HAL_UART_MspInit+0x94>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d12c      	bne.n	80008de <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000884:	2301      	movs	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4618      	mov	r0, r3
 8000892:	f002 f977 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800089c:	f7ff ff82 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008a4:	f7ff ffb5 	bl	8000812 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff ff80 	bl	80007ae <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80008ae:	23c0      	movs	r3, #192	; 0xc0
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008be:	2307      	movs	r3, #7
 80008c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008c6:	4619      	mov	r1, r3
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <HAL_UART_MspInit+0x98>)
 80008ca:	f000 fb7b 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2024      	movs	r0, #36	; 0x24
 80008d4:	f000 fa83 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d8:	2024      	movs	r0, #36	; 0x24
 80008da:	f000 fa9a 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3770      	adds	r7, #112	; 0x70
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40013800 	.word	0x40013800
 80008ec:	48000400 	.word	0x48000400

080008f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2250      	movs	r2, #80	; 0x50
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fd59 	bl	80043c8 <memset>
  if(hpcd->Instance==USB)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <HAL_PCD_MspInit+0xa8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d136      	bne.n	800098e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000926:	2318      	movs	r3, #24
 8000928:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800092a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800092e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000934:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000936:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800093a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800093c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000940:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000942:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4618      	mov	r0, r3
 800094e:	f002 f919 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000958:	f7ff ff24 	bl	80007a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff ff26 	bl	80007ae <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000962:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000966:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000974:	230a      	movs	r3, #10
 8000976:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 fb1f 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000986:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800098a:	f7ff ff29 	bl	80007e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3770      	adds	r7, #112	; 0x70
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40006800 	.word	0x40006800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f8f2 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USART1_IRQHandler+0x10>)
 80009f6:	f002 fbc3 	bl	8003180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000030 	.word	0x20000030

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <SystemInit+0x98>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <SystemInit+0x98>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a30:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <SystemInit+0x9c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a4e:	f023 0305 	bic.w	r3, r3, #5
 8000a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6e:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <SystemInit+0xa0>)
 8000a70:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <SystemInit+0xa0>)
 8000a78:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	faf6fefb 	.word	0xfaf6fefb
 8000aa4:	22041000 	.word	0x22041000

08000aa8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000aa8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aaa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aac:	3304      	adds	r3, #4

08000aae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ab2:	d3f9      	bcc.n	8000aa8 <CopyDataInit>
  bx lr
 8000ab4:	4770      	bx	lr

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ab6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ab8:	3004      	adds	r0, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000aba:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>
  bx lr
 8000abe:	4770      	bx	lr

08000ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f7ff ff9e 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LoopForever+0x6>)
 8000aca:	490c      	ldr	r1, [pc, #48]	; (8000afc <LoopForever+0xa>)
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <LoopForever+0xe>)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f7ff ffed 	bl	8000aae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <LoopForever+0x12>)
 8000ad6:	490c      	ldr	r1, [pc, #48]	; (8000b08 <LoopForever+0x16>)
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <LoopForever+0x1a>)
 8000ada:	2300      	movs	r3, #0
 8000adc:	f7ff ffe7 	bl	8000aae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoopForever+0x1e>)
 8000ae2:	490c      	ldr	r1, [pc, #48]	; (8000b14 <LoopForever+0x22>)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f7ff ffe8 	bl	8000aba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aea:	f003 fc75 	bl	80043d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aee:	f7ff fcf2 	bl	80004d6 <main>

08000af2 <LoopForever>:

LoopForever:
  b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   r0, =_estack
 8000af4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000014 	.word	0x20000014
 8000b00:	0800453c 	.word	0x0800453c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b04:	20030000 	.word	0x20030000
 8000b08:	20030000 	.word	0x20030000
 8000b0c:	08004548 	.word	0x08004548
  INIT_BSS _sbss, _ebss
 8000b10:	20000014 	.word	0x20000014
 8000b14:	200003bc 	.word	0x200003bc

08000b18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_Init+0x3c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_Init+0x3c>)
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f000 f948 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 f80f 	bl	8000b5c <HAL_InitTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	e001      	b.n	8000b4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4a:	f7ff fe7b 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58004000 	.word	0x58004000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d024      	beq.n	8000bba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b70:	f001 fd68 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8000b74:	4602      	mov	r2, r0
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f950 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10f      	bne.n	8000bb4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d809      	bhi.n	8000bae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba2:	f000 f91c 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_InitTick+0x70>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e007      	b.n	8000bbe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e004      	b.n	8000bbe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e001      	b.n	8000bbe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000010 	.word	0x20000010
 8000bcc:	2000000c 	.word	0x2000000c

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000010 	.word	0x20000010
 8000bf4:	200003b8 	.word	0x200003b8

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200003b8 	.word	0x200003b8

08000c10 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTickPrio+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff40 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff90 	bl	8000d1c <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5f 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff33 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa4 	bl	8000d84 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e04f      	b.n	8000ef8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d008      	beq.n	8000e76 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e040      	b.n	8000ef8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 020e 	bic.w	r2, r2, #14
 8000e84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f003 021c 	and.w	r2, r3, #28
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ec2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00c      	beq.n	8000ee6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ee4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d005      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e047      	b.n	8000fb8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 020e 	bic.w	r2, r2, #14
 8000f36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f003 021c 	and.w	r2, r3, #28
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00c      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4798      	blx	r3
    }
  }
  return status;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e14c      	b.n	800126e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 813e 	beq.w	8001268 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x40>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 0201 	and.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b03      	cmp	r3, #3
 8001070:	d017      	beq.n	80010a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d123      	bne.n	80010f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691a      	ldr	r2, [r3, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	6939      	ldr	r1, [r7, #16]
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0203 	and.w	r2, r3, #3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8098 	beq.w	8001268 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a54      	ldr	r2, [pc, #336]	; (800128c <HAL_GPIO_Init+0x2c8>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d019      	beq.n	8001198 <HAL_GPIO_Init+0x1d4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <HAL_GPIO_Init+0x2cc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d013      	beq.n	8001194 <HAL_GPIO_Init+0x1d0>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a49      	ldr	r2, [pc, #292]	; (8001294 <HAL_GPIO_Init+0x2d0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1cc>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a48      	ldr	r2, [pc, #288]	; (8001298 <HAL_GPIO_Init+0x2d4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1c8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_GPIO_Init+0x2d8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1c4>
 8001184:	2304      	movs	r3, #4
 8001186:	e008      	b.n	800119a <HAL_GPIO_Init+0x1d6>
 8001188:	2307      	movs	r3, #7
 800118a:	e006      	b.n	800119a <HAL_GPIO_Init+0x1d6>
 800118c:	2303      	movs	r3, #3
 800118e:	e004      	b.n	800119a <HAL_GPIO_Init+0x1d6>
 8001190:	2302      	movs	r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x1d6>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <HAL_GPIO_Init+0x1d6>
 8001198:	2300      	movs	r3, #0
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	f002 0203 	and.w	r2, r2, #3
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	4093      	lsls	r3, r2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011aa:	4938      	ldr	r1, [pc, #224]	; (800128c <HAL_GPIO_Init+0x2c8>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011dc:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001206:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 800120e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001232:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 800123c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_GPIO_Init+0x2dc>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f aeab 	bne.w	8000fd4 <HAL_GPIO_Init+0x10>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	48001000 	.word	0x48001000
 80012a0:	58000800 	.word	0x58000800

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af06      	add	r7, sp, #24
 80012da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0cb      	b.n	800147e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff faf8 	bl	80008f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f81f 	bl	8004350 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e040      	b.n	800139a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3301      	adds	r3, #1
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	3303      	adds	r3, #3
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3338      	adds	r3, #56	; 0x38
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	333c      	adds	r3, #60	; 0x3c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	3340      	adds	r3, #64	; 0x40
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3301      	adds	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3b9      	bcc.n	8001318 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e044      	b.n	8001434 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	3301      	adds	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d3b5      	bcc.n	80013aa <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	687e      	ldr	r6, [r7, #4]
 8001446:	466d      	mov	r5, sp
 8001448:	f106 0410 	add.w	r4, r6, #16
 800144c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	602b      	str	r3, [r5, #0]
 8001454:	1d33      	adds	r3, r6, #4
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f002 ff94 	bl	8004386 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d102      	bne.n	800147c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f805 	bl	8001486 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001486 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014be:	b29b      	uxth	r3, r3
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	58000400 	.word	0x58000400

080014fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_PWREx_GetVoltageRange+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	58000400 	.word	0x58000400

08001518 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800152a:	d101      	bne.n	8001530 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_RCC_HSE_Enable>:
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_RCC_HSE_Disable>:
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_RCC_HSE_IsReady>:
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800158a:	d101      	bne.n	8001590 <LL_RCC_HSE_IsReady+0x18>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <LL_RCC_HSE_IsReady+0x1a>
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_RCC_HSI_Enable>:
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_RCC_HSI_Disable>:
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_HSI_IsReady>:
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ea:	d101      	bne.n	80015f0 <LL_RCC_HSI_IsReady+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_RCC_HSI_IsReady+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_RCC_HSI_SetCalibTrimming>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_RCC_HSI48_Enable>:
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_RCC_HSI48_Disable>:
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_RCC_HSI48_IsReady>:
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d101      	bne.n	8001682 <LL_RCC_HSI48_IsReady+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_RCC_HSI48_IsReady+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RCC_LSE_Enable>:
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_LSE_Disable>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_LSE_EnableBypass>:
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_RCC_LSE_DisableBypass>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d101      	bne.n	800172e <LL_RCC_LSE_IsReady+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_RCC_LSE_IsReady+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b02      	cmp	r3, #2
 8001790:	d101      	bne.n	8001796 <LL_RCC_LSI1_IsReady+0x18>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_RCC_LSI1_IsReady+0x1a>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d101      	bne.n	80017fe <LL_RCC_LSI2_IsReady+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_RCC_LSI2_IsReady+0x1a>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001826:	4313      	orrs	r3, r2
 8001828:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d101      	bne.n	800188a <LL_RCC_MSI_IsReady+0x16>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_RCC_MSI_IsReady+0x18>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2bb0      	cmp	r3, #176	; 0xb0
 80018d4:	d901      	bls.n	80018da <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80018d6:	23b0      	movs	r3, #176	; 0xb0
 80018d8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800198a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4313      	orrs	r3, r2
 8001996:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019b6:	f023 020f 	bic.w	r2, r3, #15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab8:	6013      	str	r3, [r2, #0]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad6:	d101      	bne.n	8001adc <LL_RCC_PLL_IsReady+0x18>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <LL_RCC_PLL_IsReady+0x1a>
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d101      	bne.n	8001b62 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b82:	d101      	bne.n	8001b88 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d101      	bne.n	8001bae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bcc:	d101      	bne.n	8001bd2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bf0:	d101      	bne.n	8001bf6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b08d      	sub	sp, #52	; 0x34
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e363      	b.n	80022de <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 808d 	beq.w	8001d3e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c24:	f7ff fe89 	bl	800193a <LL_RCC_GetSysClkSource>
 8001c28:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2a:	f7ff ff82 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 8001c2e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x3e>
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d147      	bne.n	8001ccc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d144      	bne.n	8001ccc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e347      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c52:	f7ff fe34 	bl	80018be <LL_RCC_MSI_GetRange>
 8001c56:	4603      	mov	r3, r0
 8001c58:	429c      	cmp	r4, r3
 8001c5a:	d914      	bls.n	8001c86 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fd2f 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e336      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fe0e 	bl	8001896 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fe32 	bl	80018e8 <LL_RCC_MSI_SetCalibTrimming>
 8001c84:	e013      	b.n	8001cae <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe03 	bl	8001896 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe27 	bl	80018e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fd10 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e317      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cae:	f000 fcc9 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4aa4      	ldr	r2, [pc, #656]	; (8001f48 <HAL_RCC_OscConfig+0x344>)
 8001cb6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cb8:	4ba4      	ldr	r3, [pc, #656]	; (8001f4c <HAL_RCC_OscConfig+0x348>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe ff4d 	bl	8000b5c <HAL_InitTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d039      	beq.n	8001d3c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e308      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01e      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd4:	f7ff fdb0 	bl	8001838 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ff8e 	bl	8000bf8 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce0:	f7fe ff8a 	bl	8000bf8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e2f5      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cf2:	f7ff fdbf 	bl	8001874 <LL_RCC_MSI_IsReady>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f1      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fdc8 	bl	8001896 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fdec 	bl	80018e8 <LL_RCC_MSI_SetCalibTrimming>
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d12:	f7ff fda0 	bl	8001856 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d16:	f7fe ff6f 	bl	8000bf8 <HAL_GetTick>
 8001d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1e:	f7fe ff6b 	bl	8000bf8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e2d6      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d30:	f7ff fda0 	bl	8001874 <LL_RCC_MSI_IsReady>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f1      	bne.n	8001d1e <HAL_RCC_OscConfig+0x11a>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d3c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d047      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	f7ff fdf6 	bl	800193a <LL_RCC_GetSysClkSource>
 8001d4e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d50:	f7ff feef 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 8001d54:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x164>
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d134      	bne.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e2b4      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_OscConfig+0x180>
 8001d7e:	f7ff fbdd 	bl	800153c <LL_RCC_HSE_Enable>
 8001d82:	e001      	b.n	8001d88 <HAL_RCC_OscConfig+0x184>
 8001d84:	f7ff fbe9 	bl	800155a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7fe ff32 	bl	8000bf8 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7fe ff2e 	bl	8000bf8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e299      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001daa:	f7ff fbe5 	bl	8001578 <LL_RCC_HSE_IsReady>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f1      	beq.n	8001d98 <HAL_RCC_OscConfig+0x194>
 8001db4:	e011      	b.n	8001dda <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7fe ff1f 	bl	8000bf8 <HAL_GetTick>
 8001dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7fe ff1b 	bl	8000bf8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e286      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dd0:	f7ff fbd2 	bl	8001578 <LL_RCC_HSE_IsReady>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f1      	bne.n	8001dbe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d04c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	f7ff fda8 	bl	800193a <LL_RCC_GetSysClkSource>
 8001dea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	f7ff fea1 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 8001df0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x200>
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d10e      	bne.n	8001e1c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e266      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fbf1 	bl	80015fc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e1a:	e031      	b.n	8001e80 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d019      	beq.n	8001e58 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e24:	f7ff fbba 	bl	800159c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fee6 	bl	8000bf8 <HAL_GetTick>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7fe fee2 	bl	8000bf8 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e24d      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e42:	f7ff fbc9 	bl	80015d8 <LL_RCC_HSI_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f1      	beq.n	8001e30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbd3 	bl	80015fc <LL_RCC_HSI_SetCalibTrimming>
 8001e56:	e013      	b.n	8001e80 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	f7ff fbaf 	bl	80015ba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fecc 	bl	8000bf8 <HAL_GetTick>
 8001e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fec8 	bl	8000bf8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e233      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e76:	f7ff fbaf 	bl	80015d8 <LL_RCC_HSI_IsReady>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f1      	bne.n	8001e64 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a3 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d076      	beq.n	8001f90 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d046      	beq.n	8001f3c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001eae:	f7ff fc66 	bl	800177e <LL_RCC_LSI1_IsReady>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d113      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001eb8:	f7ff fc3f 	bl	800173a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ebc:	f7fe fe9c 	bl	8000bf8 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ec4:	f7fe fe98 	bl	8000bf8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e203      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ed6:	f7ff fc52 	bl	800177e <LL_RCC_LSI1_IsReady>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f1      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001ee0:	f7ff fc5f 	bl	80017a2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fe88 	bl	8000bf8 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001eec:	f7fe fe84 	bl	8000bf8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1ef      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001efe:	f7ff fc72 	bl	80017e6 <LL_RCC_LSI2_IsReady>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f1      	beq.n	8001eec <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fc7c 	bl	800180a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f12:	f7ff fc23 	bl	800175c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe6f 	bl	8000bf8 <HAL_GetTick>
 8001f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f1e:	f7fe fe6b 	bl	8000bf8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1d6      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f30:	f7ff fc25 	bl	800177e <LL_RCC_LSI1_IsReady>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f1      	bne.n	8001f1e <HAL_RCC_OscConfig+0x31a>
 8001f3a:	e051      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f3c:	f7ff fbfd 	bl	800173a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe fe5a 	bl	8000bf8 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f46:	e00c      	b.n	8001f62 <HAL_RCC_OscConfig+0x35e>
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f50:	f7fe fe52 	bl	8000bf8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1bd      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f62:	f7ff fc0c 	bl	800177e <LL_RCC_LSI1_IsReady>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f1      	beq.n	8001f50 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001f6c:	f7ff fc2a 	bl	80017c4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f72:	f7fe fe41 	bl	8000bf8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1ac      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f84:	f7ff fc2f 	bl	80017e6 <LL_RCC_LSI2_IsReady>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f1      	bne.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f8e:	e027      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001f90:	f7ff fc18 	bl	80017c4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7fe fe30 	bl	8000bf8 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f9c:	f7fe fe2c 	bl	8000bf8 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e197      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fae:	f7ff fc1a 	bl	80017e6 <LL_RCC_LSI2_IsReady>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f1      	bne.n	8001f9c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001fb8:	f7ff fbd0 	bl	800175c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7fe fe1c 	bl	8000bf8 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fc4:	f7fe fe18 	bl	8000bf8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e183      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001fd6:	f7ff fbd2 	bl	800177e <LL_RCC_LSI1_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f1      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d05b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	4ba7      	ldr	r3, [pc, #668]	; (800228c <HAL_RCC_OscConfig+0x688>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d114      	bne.n	8002022 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ff8:	f7ff fa70 	bl	80014dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fdfc 	bl	8000bf8 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7fe fdf8 	bl	8000bf8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e163      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	4b9d      	ldr	r3, [pc, #628]	; (800228c <HAL_RCC_OscConfig+0x688>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_RCC_OscConfig+0x42c>
 800202a:	f7ff fb30 	bl	800168e <LL_RCC_LSE_Enable>
 800202e:	e00c      	b.n	800204a <HAL_RCC_OscConfig+0x446>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d104      	bne.n	8002042 <HAL_RCC_OscConfig+0x43e>
 8002038:	f7ff fb4b 	bl	80016d2 <LL_RCC_LSE_EnableBypass>
 800203c:	f7ff fb27 	bl	800168e <LL_RCC_LSE_Enable>
 8002040:	e003      	b.n	800204a <HAL_RCC_OscConfig+0x446>
 8002042:	f7ff fb35 	bl	80016b0 <LL_RCC_LSE_Disable>
 8002046:	f7ff fb55 	bl	80016f4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d014      	beq.n	800207c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fdd1 	bl	8000bf8 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fdcd 	bl	8000bf8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e136      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002070:	f7ff fb51 	bl	8001716 <LL_RCC_LSE_IsReady>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0ef      	beq.n	800205a <HAL_RCC_OscConfig+0x456>
 800207a:	e013      	b.n	80020a4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7fe fdbc 	bl	8000bf8 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe fdb8 	bl	8000bf8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e121      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800209a:	f7ff fb3c 	bl	8001716 <LL_RCC_LSE_IsReady>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ef      	bne.n	8002084 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02c      	beq.n	800210a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d014      	beq.n	80020e2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	f7ff fab5 	bl	8001626 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe fd9c 	bl	8000bf8 <HAL_GetTick>
 80020c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c4:	f7fe fd98 	bl	8000bf8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e103      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020d6:	f7ff fac8 	bl	800166a <LL_RCC_HSI48_IsReady>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f1      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4c0>
 80020e0:	e013      	b.n	800210a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020e2:	f7ff fab1 	bl	8001648 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe fd87 	bl	8000bf8 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ee:	f7fe fd83 	bl	8000bf8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0ee      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002100:	f7ff fab3 	bl	800166a <LL_RCC_HSI48_IsReady>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f1      	bne.n	80020ee <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80e4 	beq.w	80022dc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002114:	f7ff fc11 	bl	800193a <LL_RCC_GetSysClkSource>
 8002118:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	2b02      	cmp	r3, #2
 8002128:	f040 80b4 	bne.w	8002294 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0203 	and.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	429a      	cmp	r2, r3
 8002138:	d123      	bne.n	8002182 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d11c      	bne.n	8002182 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d114      	bne.n	8002182 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d10d      	bne.n	8002182 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d05d      	beq.n	800223e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d058      	beq.n	800223a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0a1      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800219a:	f7ff fc84 	bl	8001aa6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800219e:	f7fe fd2b 	bl	8000bf8 <HAL_GetTick>
 80021a2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fd27 	bl	8000bf8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e092      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ef      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x68c>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021de:	0212      	lsls	r2, r2, #8
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ec:	4311      	orrs	r1, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021f2:	430a      	orrs	r2, r1
 80021f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021fc:	f7ff fc44 	bl	8001a88 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002210:	f7fe fcf2 	bl	8000bf8 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fcee 	bl	8000bf8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e059      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ef      	beq.n	8002218 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	e050      	b.n	80022dc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e04f      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d147      	bne.n	80022dc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800224c:	f7ff fc1c 	bl	8001a88 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002260:	f7fe fcca 	bl	8000bf8 <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe fcc6 	bl	8000bf8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e031      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ef      	beq.n	8002268 <HAL_RCC_OscConfig+0x664>
 8002288:	e028      	b.n	80022dc <HAL_RCC_OscConfig+0x6d8>
 800228a:	bf00      	nop
 800228c:	58000400 	.word	0x58000400
 8002290:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d01e      	beq.n	80022d8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	f7ff fc04 	bl	8001aa6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe fcab 	bl	8000bf8 <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7fe fca7 	bl	8000bf8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e012      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ef      	bne.n	80022a6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_OscConfig+0x6e4>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	60cb      	str	r3, [r1, #12]
 80022d6:	e001      	b.n	80022dc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3734      	adds	r7, #52	; 0x34
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	eefefffc 	.word	0xeefefffc

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e12d      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b98      	ldr	r3, [pc, #608]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d91b      	bls.n	8002346 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b95      	ldr	r3, [pc, #596]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4993      	ldr	r1, [pc, #588]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231e:	f7fe fc6b 	bl	8000bf8 <HAL_GetTick>
 8002322:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002324:	e008      	b.n	8002338 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002326:	f7fe fc67 	bl	8000bf8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e111      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002338:	4b8a      	ldr	r3, [pc, #552]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d1ef      	bne.n	8002326 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fafb 	bl	8001952 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800235c:	f7fe fc4c 	bl	8000bf8 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002364:	f7fe fc48 	bl	8000bf8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0f2      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002376:	f7ff fbe8 	bl	8001b4a <LL_RCC_IsActiveFlag_HPRE>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f1      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d016      	beq.n	80023ba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff faf2 	bl	800197a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002396:	f7fe fc2f 	bl	8000bf8 <HAL_GetTick>
 800239a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800239e:	f7fe fc2b 	bl	8000bf8 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0d5      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023b0:	f7ff fbdd 	bl	8001b6e <LL_RCC_IsActiveFlag_C2HPRE>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f1      	beq.n	800239e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff faeb 	bl	80019a6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fc12 	bl	8000bf8 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023d8:	f7fe fc0e 	bl	8000bf8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0b8      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023ea:	f7ff fbd3 	bl	8001b94 <LL_RCC_IsActiveFlag_SHDHPRE>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f1      	beq.n	80023d8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d016      	beq.n	800242e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fae5 	bl	80019d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800240a:	f7fe fbf5 	bl	8000bf8 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002412:	f7fe fbf1 	bl	8000bf8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e09b      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002424:	f7ff fbc9 	bl	8001bba <LL_RCC_IsActiveFlag_PPRE1>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f1      	beq.n	8002412 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fadb 	bl	80019fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002446:	f7fe fbd7 	bl	8000bf8 <HAL_GetTick>
 800244a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800244e:	f7fe fbd3 	bl	8000bf8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e07d      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002460:	f7ff fbbd 	bl	8001bde <LL_RCC_IsActiveFlag_PPRE2>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f1      	beq.n	800244e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d043      	beq.n	80024fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d106      	bne.n	800248c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800247e:	f7ff f87b 	bl	8001578 <LL_RCC_HSE_IsReady>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11e      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e067      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002494:	f7ff fb16 	bl	8001ac4 <LL_RCC_PLL_IsReady>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d113      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e05c      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024aa:	f7ff f9e3 	bl	8001874 <LL_RCC_MSI_IsReady>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e051      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024b8:	f7ff f88e 	bl	80015d8 <LL_RCC_HSI_IsReady>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e04a      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fa21 	bl	8001912 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fb92 	bl	8000bf8 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe fb8e 	bl	8000bf8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e036      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	f7ff fa24 	bl	800193a <LL_RCC_GetSysClkSource>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d1ec      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d21b      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 0207 	bic.w	r2, r3, #7
 8002514:	4913      	ldr	r1, [pc, #76]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7fe fb6c 	bl	8000bf8 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	e008      	b.n	8002536 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002524:	f7fe fb68 	bl	8000bf8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e012      	b.n	800255c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x278>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d1ef      	bne.n	8002524 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002544:	f000 f87e 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002548:	4603      	mov	r3, r0
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_RCC_ClockConfig+0x27c>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800254e:	f7fe fb5f 	bl	8000c10 <HAL_GetTickPrio>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fb01 	bl	8000b5c <HAL_InitTick>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	58004000 	.word	0x58004000
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002572:	f7ff f9e2 	bl	800193a <LL_RCC_GetSysClkSource>
 8002576:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800257e:	f7ff f99e 	bl	80018be <LL_RCC_MSI_GetRange>
 8002582:	4603      	mov	r3, r0
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_RCC_GetSysClockFreq+0xcc>)
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	e04b      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b04      	cmp	r3, #4
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_GetSysClockFreq+0xd0>)
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e045      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d10a      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025a6:	f7fe ffb7 	bl	8001518 <LL_RCC_HSE_IsEnabledDiv2>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_GetSysClockFreq+0xd0>)
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e03a      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e037      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025bc:	f7ff fab9 	bl	8001b32 <LL_RCC_PLL_GetMainSource>
 80025c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d003      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x64>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x6a>
 80025ce:	e00d      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_GetSysClockFreq+0xd0>)
 80025d2:	60bb      	str	r3, [r7, #8]
        break;
 80025d4:	e015      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025d6:	f7fe ff9f 	bl	8001518 <LL_RCC_HSE_IsEnabledDiv2>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_RCC_GetSysClockFreq+0xd0>)
 80025e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025e4:	e00d      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025e8:	60bb      	str	r3, [r7, #8]
        break;
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025ec:	f7ff f967 	bl	80018be <LL_RCC_MSI_GetRange>
 80025f0:	4603      	mov	r3, r0
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	60bb      	str	r3, [r7, #8]
        break;
 8002600:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002602:	f7ff fa71 	bl	8001ae8 <LL_RCC_PLL_GetN>
 8002606:	4602      	mov	r2, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	fb03 f402 	mul.w	r4, r3, r2
 800260e:	f7ff fa84 	bl	8001b1a <LL_RCC_PLL_GetDivider>
 8002612:	4603      	mov	r3, r0
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	3301      	adds	r3, #1
 8002618:	fbb4 f4f3 	udiv	r4, r4, r3
 800261c:	f7ff fa71 	bl	8001b02 <LL_RCC_PLL_GetR>
 8002620:	4603      	mov	r3, r0
 8002622:	0f5b      	lsrs	r3, r3, #29
 8002624:	3301      	adds	r3, #1
 8002626:	fbb4 f3f3 	udiv	r3, r4, r3
 800262a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800262c:	68fb      	ldr	r3, [r7, #12]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	bf00      	nop
 8002638:	080044c4 	.word	0x080044c4
 800263c:	00f42400 	.word	0x00f42400
 8002640:	01e84800 	.word	0x01e84800

08002644 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b598      	push	{r3, r4, r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002648:	f7ff ff90 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800264c:	4604      	mov	r4, r0
 800264e:	f7ff f9e9 	bl	8001a24 <LL_RCC_GetAHBPrescaler>
 8002652:	4603      	mov	r3, r0
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_RCC_GetHCLKFreq+0x24>)
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd98      	pop	{r3, r4, r7, pc}
 8002668:	08004464 	.word	0x08004464

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b598      	push	{r3, r4, r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002670:	f7ff ffe8 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002674:	4604      	mov	r4, r0
 8002676:	f7ff f9ef 	bl	8001a58 <LL_RCC_GetAPB1Prescaler>
 800267a:	4603      	mov	r3, r0
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd98      	pop	{r3, r4, r7, pc}
 8002694:	080044a4 	.word	0x080044a4

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b598      	push	{r3, r4, r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800269c:	f7ff ffd2 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 80026a0:	4604      	mov	r4, r0
 80026a2:	f7ff f9e5 	bl	8001a70 <LL_RCC_GetAPB2Prescaler>
 80026a6:	4603      	mov	r3, r0
 80026a8:	0adb      	lsrs	r3, r3, #11
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd98      	pop	{r3, r4, r7, pc}
 80026c0:	080044a4 	.word	0x080044a4

080026c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2bb0      	cmp	r3, #176	; 0xb0
 80026d0:	d903      	bls.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e007      	b.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80026ea:	f7ff f9a7 	bl	8001a3c <LL_RCC_GetAHB4Prescaler>
 80026ee:	4603      	mov	r3, r0
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	4a0d      	ldr	r2, [pc, #52]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0c9c      	lsrs	r4, r3, #18
 800270e:	f7fe fef5 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002712:	4603      	mov	r3, r0
 8002714:	4619      	mov	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f000 f80c 	bl	8002734 <RCC_SetFlashLatency>
 800271c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	bf00      	nop
 8002728:	080044c4 	.word	0x080044c4
 800272c:	08004464 	.word	0x08004464
 8002730:	431bde83 	.word	0x431bde83

08002734 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b093      	sub	sp, #76	; 0x4c
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800273e:	4b37      	ldr	r3, [pc, #220]	; (800281c <RCC_SetFlashLatency+0xe8>)
 8002740:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800274a:	4a35      	ldr	r2, [pc, #212]	; (8002820 <RCC_SetFlashLatency+0xec>)
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	ca07      	ldmia	r2, {r0, r1, r2}
 8002752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002756:	4b33      	ldr	r3, [pc, #204]	; (8002824 <RCC_SetFlashLatency+0xf0>)
 8002758:	f107 040c 	add.w	r4, r7, #12
 800275c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002762:	2300      	movs	r3, #0
 8002764:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276c:	d11a      	bne.n	80027a4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800276e:	2300      	movs	r3, #0
 8002770:	643b      	str	r3, [r7, #64]	; 0x40
 8002772:	e013      	b.n	800279c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3348      	adds	r3, #72	; 0x48
 800277a:	443b      	add	r3, r7
 800277c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d807      	bhi.n	8002796 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3348      	adds	r3, #72	; 0x48
 800278c:	443b      	add	r3, r7
 800278e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002794:	e020      	b.n	80027d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002798:	3301      	adds	r3, #1
 800279a:	643b      	str	r3, [r7, #64]	; 0x40
 800279c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9e8      	bls.n	8002774 <RCC_SetFlashLatency+0x40>
 80027a2:	e019      	b.n	80027d8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a8:	e013      	b.n	80027d2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	3348      	adds	r3, #72	; 0x48
 80027b0:	443b      	add	r3, r7
 80027b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d807      	bhi.n	80027cc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3348      	adds	r3, #72	; 0x48
 80027c2:	443b      	add	r3, r7
 80027c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027ca:	e005      	b.n	80027d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ce:	3301      	adds	r3, #1
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d9e8      	bls.n	80027aa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <RCC_SetFlashLatency+0xf4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 0207 	bic.w	r2, r3, #7
 80027e0:	4911      	ldr	r1, [pc, #68]	; (8002828 <RCC_SetFlashLatency+0xf4>)
 80027e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027e8:	f7fe fa06 	bl	8000bf8 <HAL_GetTick>
 80027ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027ee:	e008      	b.n	8002802 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f0:	f7fe fa02 	bl	8000bf8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e007      	b.n	8002812 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <RCC_SetFlashLatency+0xf4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800280c:	429a      	cmp	r2, r3
 800280e:	d1ef      	bne.n	80027f0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	374c      	adds	r7, #76	; 0x4c
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}
 800281a:	bf00      	nop
 800281c:	08004438 	.word	0x08004438
 8002820:	08004448 	.word	0x08004448
 8002824:	08004454 	.word	0x08004454
 8002828:	58004000 	.word	0x58004000

0800282c <LL_RCC_LSE_IsEnabled>:
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <LL_RCC_LSE_IsEnabled+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_RCC_LSE_IsEnabled+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_RCC_LSE_IsReady>:
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b02      	cmp	r3, #2
 8002862:	d101      	bne.n	8002868 <LL_RCC_LSE_IsReady+0x18>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <LL_RCC_LSE_IsReady+0x1a>
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_RCC_MSI_EnablePLLMode>:
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_RCC_SetRFWKPClockSource>:
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_RCC_SetSMPSClockSource>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f023 0203 	bic.w	r2, r3, #3
 80028d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_SetSMPSPrescaler>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4313      	orrs	r3, r2
 8002900:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_SetUSARTClockSource>:
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_RCC_SetLPUARTClockSource>:
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_RCC_SetI2CClockSource>:
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800298a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_RCC_SetLPTIMClockSource>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_SetSAIClockSource>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_SetRNGClockSource>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_RCC_SetCLK48ClockSource>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_SetUSBClockSource>:
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffe3 	bl	8002a2c <LL_RCC_SetCLK48ClockSource>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <LL_RCC_SetADCClockSource>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_RCC_SetRTCClockSource>:
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_GetRTCClockSource>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_ForceBackupDomainReset>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_RCC_PLLSAI1_Enable>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_PLLSAI1_Disable>:
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b54:	6013      	str	r3, [r2, #0]
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_PLLSAI1_IsReady>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b72:	d101      	bne.n	8002b78 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d034      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba8:	d021      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002baa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bae:	d81b      	bhi.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bba:	d815      	bhi.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc4:	d110      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bd6:	e00d      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f94d 	bl	8002e7c <RCCEx_PLLSAI1_ConfigNP>
 8002be2:	4603      	mov	r3, r0
 8002be4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
        break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf4:	7ffb      	ldrb	r3, [r7, #31]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fee8 	bl	80029d4 <LL_RCC_SetSAIClockSource>
 8002c04:	e001      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d046      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c16:	f7ff ff56 	bl	8002ac6 <LL_RCC_GetRTCClockSource>
 8002c1a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d03c      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c26:	f7fe fc59 	bl	80014dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff30 	bl	8002a9a <LL_RCC_SetRTCClockSource>
 8002c3a:	e02e      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c46:	f7ff ff4b 	bl	8002ae0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c4a:	f7ff ff5a 	bl	8002b02 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c66:	f7ff fde1 	bl	800282c <LL_RCC_LSE_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d114      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c70:	f7fd ffc2 	bl	8000bf8 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c76:	e00b      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fd ffbe 	bl	8000bf8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d902      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	77fb      	strb	r3, [r7, #31]
              break;
 8002c8e:	e004      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c90:	f7ff fdde 	bl	8002850 <LL_RCC_LSE_IsReady>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d1ee      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	77bb      	strb	r3, [r7, #30]
 8002c9e:	e001      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe2a 	bl	800290e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fe35 	bl	800293a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe5d 	bl	80029a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe52 	bl	80029a0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fe2a 	bl	8002966 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fe1f 	bl	8002966 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fe8d 	bl	8002a58 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d46:	d107      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d56:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f8e3 	bl	8002f32 <RCCEx_PLLSAI1_ConfigNQ>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002d76:	7ffb      	ldrb	r3, [r7, #31]
 8002d78:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d98:	d003      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fe2a 	bl	8002a00 <LL_RCC_SetRNGClockSource>
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff fe21 	bl	8002a00 <LL_RCC_SetRNGClockSource>
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fe34 	bl	8002a2c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002dcc:	d107      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d022      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe3d 	bl	8002a6e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 f8e3 	bl	8002fe8 <RCCEx_PLLSAI1_ConfigNR>
 8002e22:	4603      	mov	r3, r0
 8002e24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd26 	bl	8002892 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fd45 	bl	80028e6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fd2c 	bl	80028be <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002e66:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002e74:	f7ff fcfe 	bl	8002874 <LL_RCC_MSI_EnablePLLMode>
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e88:	f7ff fe5b 	bl	8002b42 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e8c:	f7fd feb4 	bl	8000bf8 <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e92:	e009      	b.n	8002ea8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e94:	f7fd feb0 	bl	8000bf8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea6:	e004      	b.n	8002eb2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ea8:	f7ff fe5a 	bl	8002b60 <LL_RCC_PLLSAI1_IsReady>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d137      	bne.n	8002f28 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002ee6:	f7ff fe1d 	bl	8002b24 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eea:	f7fd fe85 	bl	8000bf8 <HAL_GetTick>
 8002eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ef0:	e009      	b.n	8002f06 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef2:	f7fd fe81 	bl	8000bf8 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	73fb      	strb	r3, [r7, #15]
        break;
 8002f04:	e004      	b.n	8002f10 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f06:	f7ff fe2b 	bl	8002b60 <LL_RCC_PLLSAI1_IsReady>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d1f0      	bne.n	8002ef2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f24:	4313      	orrs	r3, r2
 8002f26:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f3e:	f7ff fe00 	bl	8002b42 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f42:	f7fd fe59 	bl	8000bf8 <HAL_GetTick>
 8002f46:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f48:	e009      	b.n	8002f5e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4a:	f7fd fe55 	bl	8000bf8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d902      	bls.n	8002f5e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e004      	b.n	8002f68 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f5e:	f7ff fdff 	bl	8002b60 <LL_RCC_PLLSAI1_IsReady>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d137      	bne.n	8002fde <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f82:	4313      	orrs	r3, r2
 8002f84:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f9c:	f7ff fdc2 	bl	8002b24 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fd fe2a 	bl	8000bf8 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fa6:	e009      	b.n	8002fbc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa8:	f7fd fe26 	bl	8000bf8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002fba:	e004      	b.n	8002fc6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fbc:	f7ff fdd0 	bl	8002b60 <LL_RCC_PLLSAI1_IsReady>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d1f0      	bne.n	8002fa8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ff4:	f7ff fda5 	bl	8002b42 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ff8:	f7fd fdfe 	bl	8000bf8 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ffe:	e009      	b.n	8003014 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003000:	f7fd fdfa 	bl	8000bf8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	73fb      	strb	r3, [r7, #15]
      break;
 8003012:	e004      	b.n	800301e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003014:	f7ff fda4 	bl	8002b60 <LL_RCC_PLLSAI1_IsReady>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d137      	bne.n	8003094 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003038:	4313      	orrs	r3, r2
 800303a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003052:	f7ff fd67 	bl	8002b24 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003056:	f7fd fdcf 	bl	8000bf8 <HAL_GetTick>
 800305a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800305c:	e009      	b.n	8003072 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305e:	f7fd fdcb 	bl	8000bf8 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d902      	bls.n	8003072 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	73fb      	strb	r3, [r7, #15]
        break;
 8003070:	e004      	b.n	800307c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003072:	f7ff fd75 	bl	8002b60 <LL_RCC_PLLSAI1_IsReady>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d1f0      	bne.n	800305e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003090:	4313      	orrs	r3, r2
 8003092:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <LL_RCC_GetUSARTClockSource>:
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4013      	ands	r3, r2
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_RCC_GetLPUARTClockSource>:
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4013      	ands	r3, r2
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e042      	b.n	8003176 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fba6 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fd95 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fb6a 	bl	8003808 <UART_SetConfig>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e01b      	b.n	8003176 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fe14 	bl	8003d9c <UART_CheckIdleState>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0ba      	sub	sp, #232	; 0xe8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80031ae:	4013      	ands	r3, r2
 80031b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11b      	bne.n	80031f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 82e3 	beq.w	80037b0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
      }
      return;
 80031f2:	e2dd      	b.n	80037b0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8123 	beq.w	8003444 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80031fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003202:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <HAL_UART_IRQHandler+0x2b8>)
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800320a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_UART_IRQHandler+0x2bc>)
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8116 	beq.w	8003444 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d011      	beq.n	8003248 <HAL_UART_IRQHandler+0xc8>
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2201      	movs	r2, #1
 8003236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d011      	beq.n	8003278 <HAL_UART_IRQHandler+0xf8>
 8003254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2202      	movs	r2, #2
 8003266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d011      	beq.n	80032a8 <HAL_UART_IRQHandler+0x128>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2204      	movs	r2, #4
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d017      	beq.n	80032e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80032c4:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_UART_IRQHandler+0x2b8>)
 80032c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2208      	movs	r2, #8
 80032d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f043 0208 	orr.w	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_UART_IRQHandler+0x196>
 80032f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8249 	beq.w	80037b4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d013      	beq.n	8003356 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800332e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800333a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003376:	2b00      	cmp	r3, #0
 8003378:	d054      	beq.n	8003424 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fe1f 	bl	8003fbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d146      	bne.n	800341c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1d9      	bne.n	800338e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ea:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_UART_IRQHandler+0x2c0>)
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fd85 	bl	8000f04 <HAL_DMA_Abort_IT>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800340e:	4610      	mov	r0, r2
 8003410:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003412:	e00f      	b.n	8003434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f9e1 	bl	80037dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341a:	e00b      	b.n	8003434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f9dd 	bl	80037dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003422:	e007      	b.n	8003434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f9d9 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003432:	e1bf      	b.n	80037b4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	bf00      	nop
    return;
 8003436:	e1bd      	b.n	80037b4 <HAL_UART_IRQHandler+0x634>
 8003438:	10000001 	.word	0x10000001
 800343c:	04000120 	.word	0x04000120
 8003440:	0800408b 	.word	0x0800408b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003448:	2b01      	cmp	r3, #1
 800344a:	f040 8153 	bne.w	80036f4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 814c 	beq.w	80036f4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8145 	beq.w	80036f4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2210      	movs	r2, #16
 8003470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	f040 80bb 	bne.w	80035f8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 818f 	beq.w	80037b8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034a4:	429a      	cmp	r2, r3
 80034a6:	f080 8187 	bcs.w	80037b8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 8087 	bne.w	80035d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800350a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1da      	bne.n	80034c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3308      	adds	r3, #8
 8003532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800353a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800353e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e1      	bne.n	8003512 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3308      	adds	r3, #8
 8003554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e3      	bne.n	800354e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	f023 0310 	bic.w	r3, r3, #16
 80035a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e4      	bne.n	8003594 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fc38 	bl	8000e46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8fd 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035f6:	e0df      	b.n	80037b8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80d1 	beq.w	80037bc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800361a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80cc 	beq.w	80037bc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
 8003648:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800364c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e4      	bne.n	8003624 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	623b      	str	r3, [r7, #32]
   return(result);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003682:	633a      	str	r2, [r7, #48]	; 0x30
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e1      	bne.n	800365a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	617b      	str	r3, [r7, #20]
   return(result);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e4      	bne.n	80036aa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f87f 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f2:	e063      	b.n	80037bc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_UART_IRQHandler+0x59e>
 8003700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fcf8 	bl	800410c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800371c:	e051      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d105      	bne.n	8003742 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03a      	beq.n	80037c0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
    }
    return;
 8003752:	e035      	b.n	80037c0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_UART_IRQHandler+0x5f4>
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fca2 	bl	80040b6 <UART_EndTransmit_IT>
    return;
 8003772:	e026      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_UART_IRQHandler+0x614>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fcd1 	bl	8004134 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003792:	e016      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d010      	beq.n	80037c2 <HAL_UART_IRQHandler+0x642>
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0c      	bge.n	80037c2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fcb9 	bl	8004120 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037ae:	e008      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
      return;
 80037b0:	bf00      	nop
 80037b2:	e006      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
    return;
 80037b4:	bf00      	nop
 80037b6:	e004      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
      return;
 80037b8:	bf00      	nop
 80037ba:	e002      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
      return;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
    return;
 80037c0:	bf00      	nop
  }
}
 80037c2:	37e8      	adds	r7, #232	; 0xe8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b08c      	sub	sp, #48	; 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4baf      	ldr	r3, [pc, #700]	; (8003af4 <UART_SetConfig+0x2ec>)
 8003838:	4013      	ands	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4aa4      	ldr	r2, [pc, #656]	; (8003af8 <UART_SetConfig+0x2f0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	4313      	orrs	r3, r2
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800387e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 010f 	bic.w	r1, r3, #15
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a95      	ldr	r2, [pc, #596]	; (8003afc <UART_SetConfig+0x2f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0xf0>
 80038ac:	2003      	movs	r0, #3
 80038ae:	f7ff fbf6 	bl	800309e <LL_RCC_GetUSARTClockSource>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d81b      	bhi.n	80038f0 <UART_SetConfig+0xe8>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xb8>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e042      	b.n	800395e <UART_SetConfig+0x156>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e03e      	b.n	800395e <UART_SetConfig+0x156>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e03a      	b.n	800395e <UART_SetConfig+0x156>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e036      	b.n	800395e <UART_SetConfig+0x156>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e032      	b.n	800395e <UART_SetConfig+0x156>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <UART_SetConfig+0x2f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12a      	bne.n	8003958 <UART_SetConfig+0x150>
 8003902:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003906:	f7ff fbda 	bl	80030be <LL_RCC_GetLPUARTClockSource>
 800390a:	4603      	mov	r3, r0
 800390c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003910:	d01a      	beq.n	8003948 <UART_SetConfig+0x140>
 8003912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003916:	d81b      	bhi.n	8003950 <UART_SetConfig+0x148>
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	d00c      	beq.n	8003938 <UART_SetConfig+0x130>
 800391e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003922:	d815      	bhi.n	8003950 <UART_SetConfig+0x148>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <UART_SetConfig+0x128>
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	d008      	beq.n	8003940 <UART_SetConfig+0x138>
 800392e:	e00f      	b.n	8003950 <UART_SetConfig+0x148>
 8003930:	2300      	movs	r3, #0
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003936:	e012      	b.n	800395e <UART_SetConfig+0x156>
 8003938:	2302      	movs	r3, #2
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393e:	e00e      	b.n	800395e <UART_SetConfig+0x156>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003946:	e00a      	b.n	800395e <UART_SetConfig+0x156>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394e:	e006      	b.n	800395e <UART_SetConfig+0x156>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003956:	e002      	b.n	800395e <UART_SetConfig+0x156>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <UART_SetConfig+0x2f0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f040 8097 	bne.w	8003a98 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800396a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800396e:	2b08      	cmp	r3, #8
 8003970:	d823      	bhi.n	80039ba <UART_SetConfig+0x1b2>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x170>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	0800399d 	.word	0x0800399d
 800397c:	080039bb 	.word	0x080039bb
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039ab 	.word	0x080039ab
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039bb 	.word	0x080039bb
 8003994:	080039bb 	.word	0x080039bb
 8003998:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7fe fe66 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039a2:	e010      	b.n	80039c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <UART_SetConfig+0x2f8>)
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039a8:	e00d      	b.n	80039c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fddf 	bl	800256c <HAL_RCC_GetSysClockFreq>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039b0:	e009      	b.n	80039c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039b8:	e005      	b.n	80039c6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 812b 	beq.w	8003c24 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	4a4c      	ldr	r2, [pc, #304]	; (8003b04 <UART_SetConfig+0x2fc>)
 80039d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d8:	461a      	mov	r2, r3
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d305      	bcc.n	80039fe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d903      	bls.n	8003a06 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a04:	e10e      	b.n	8003c24 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	60fa      	str	r2, [r7, #12]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <UART_SetConfig+0x2fc>)
 8003a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a28:	f7fc fba8 	bl	800017c <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	020b      	lsls	r3, r1, #8
 8003a3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a42:	0202      	lsls	r2, r0, #8
 8003a44:	6979      	ldr	r1, [r7, #20]
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	0849      	lsrs	r1, r1, #1
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	4605      	mov	r5, r0
 8003a50:	eb12 0804 	adds.w	r8, r2, r4
 8003a54:	eb43 0905 	adc.w	r9, r3, r5
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	469a      	mov	sl, r3
 8003a60:	4693      	mov	fp, r2
 8003a62:	4652      	mov	r2, sl
 8003a64:	465b      	mov	r3, fp
 8003a66:	4640      	mov	r0, r8
 8003a68:	4649      	mov	r1, r9
 8003a6a:	f7fc fb87 	bl	800017c <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4613      	mov	r3, r2
 8003a74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7c:	d308      	bcc.n	8003a90 <UART_SetConfig+0x288>
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a84:	d204      	bcs.n	8003a90 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e0c9      	b.n	8003c24 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a96:	e0c5      	b.n	8003c24 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d16d      	bne.n	8003b7e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d82d      	bhi.n	8003b08 <UART_SetConfig+0x300>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x2ac>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ad5 	.word	0x08003ad5
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003b09 	.word	0x08003b09
 8003ac0:	08003ae3 	.word	0x08003ae3
 8003ac4:	08003b09 	.word	0x08003b09
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b09 	.word	0x08003b09
 8003ad0:	08003aeb 	.word	0x08003aeb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad4:	f7fe fde0 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ada:	e01b      	b.n	8003b14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <UART_SetConfig+0x2f8>)
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ae0:	e018      	b.n	8003b14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae2:	f7fe fd43 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ae8:	e014      	b.n	8003b14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003af0:	e010      	b.n	8003b14 <UART_SetConfig+0x30c>
 8003af2:	bf00      	nop
 8003af4:	cfff69f3 	.word	0xcfff69f3
 8003af8:	40008000 	.word	0x40008000
 8003afc:	40013800 	.word	0x40013800
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	08004504 	.word	0x08004504
      default:
        pclk = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8084 	beq.w	8003c24 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <UART_SetConfig+0x448>)
 8003b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b26:	461a      	mov	r2, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2e:	005a      	lsls	r2, r3, #1
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	441a      	add	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	2b0f      	cmp	r3, #15
 8003b46:	d916      	bls.n	8003b76 <UART_SetConfig+0x36e>
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4e:	d212      	bcs.n	8003b76 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f023 030f 	bic.w	r3, r3, #15
 8003b58:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	8bfb      	ldrh	r3, [r7, #30]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	8bfa      	ldrh	r2, [r7, #30]
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e056      	b.n	8003c24 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b7c:	e052      	b.n	8003c24 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b82:	3b01      	subs	r3, #1
 8003b84:	2b07      	cmp	r3, #7
 8003b86:	d822      	bhi.n	8003bce <UART_SetConfig+0x3c6>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x388>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb1 	.word	0x08003bb1
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bbf 	.word	0x08003bbf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bcf 	.word	0x08003bcf
 8003ba8:	08003bcf 	.word	0x08003bcf
 8003bac:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe fd72 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bb6:	e010      	b.n	8003bda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <UART_SetConfig+0x44c>)
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bbc:	e00d      	b.n	8003bda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fcd5 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bc4:	e009      	b.n	8003bda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bcc:	e005      	b.n	8003bda <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d021      	beq.n	8003c24 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <UART_SetConfig+0x448>)
 8003be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	441a      	add	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	d909      	bls.n	8003c1e <UART_SetConfig+0x416>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d205      	bcs.n	8003c1e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60da      	str	r2, [r3, #12]
 8003c1c:	e002      	b.n	8003c24 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2200      	movs	r2, #0
 8003c38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003c40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3730      	adds	r7, #48	; 0x30
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4e:	bf00      	nop
 8003c50:	08004504 	.word	0x08004504
 8003c54:	00f42400 	.word	0x00f42400

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b098      	sub	sp, #96	; 0x60
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fc ff24 	bl	8000bf8 <HAL_GetTick>
 8003db0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d12f      	bne.n	8003e20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88e 	bl	8003ef0 <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d022      	beq.n	8003e20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dee:	653b      	str	r3, [r7, #80]	; 0x50
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e063      	b.n	8003ee8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d149      	bne.n	8003ec2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e36:	2200      	movs	r2, #0
 8003e38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f857 	bl	8003ef0 <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d03c      	beq.n	8003ec2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	623b      	str	r3, [r7, #32]
   return(result);
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
 8003e68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e9a:	61fa      	str	r2, [r7, #28]
 8003e9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	69b9      	ldr	r1, [r7, #24]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e012      	b.n	8003ee8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3758      	adds	r7, #88	; 0x58
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f00:	e049      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d045      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fc fe75 	bl	8000bf8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e048      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d031      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d110      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2208      	movs	r2, #8
 8003f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f838 	bl	8003fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2208      	movs	r2, #8
 8003f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e029      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f70:	d111      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f81e 	bl	8003fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d0a6      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b095      	sub	sp, #84	; 0x54
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	61fb      	str	r3, [r7, #28]
   return(result);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e3      	bne.n	8003ff8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d118      	bne.n	800406a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	60bb      	str	r3, [r7, #8]
   return(result);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f023 0310 	bic.w	r3, r3, #16
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	613b      	str	r3, [r7, #16]
   return(result);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800407e:	bf00      	nop
 8004080:	3754      	adds	r7, #84	; 0x54
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fb97 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b088      	sub	sp, #32
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e6      	bne.n	80040be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fb62 	bl	80037c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004104:	bf00      	nop
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_UARTEx_DisableFifoMode+0x16>
 800415a:	2302      	movs	r3, #2
 800415c:	e027      	b.n	80041ae <HAL_UARTEx_DisableFifoMode+0x66>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2224      	movs	r2, #36	; 0x24
 800416a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800418c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e02d      	b.n	800422e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f850 	bl	80042b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800424a:	2302      	movs	r3, #2
 800424c:	e02d      	b.n	80042aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2224      	movs	r2, #36	; 0x24
 800425a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f812 	bl	80042b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d108      	bne.n	80042d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042d4:	e031      	b.n	800433a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042d6:	2308      	movs	r3, #8
 80042d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042da:	2308      	movs	r3, #8
 80042dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	0e5b      	lsrs	r3, r3, #25
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	0f5b      	lsrs	r3, r3, #29
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042fe:	7bbb      	ldrb	r3, [r7, #14]
 8004300:	7b3a      	ldrb	r2, [r7, #12]
 8004302:	4911      	ldr	r1, [pc, #68]	; (8004348 <UARTEx_SetNbDataToProcess+0x94>)
 8004304:	5c8a      	ldrb	r2, [r1, r2]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800430a:	7b3a      	ldrb	r2, [r7, #12]
 800430c:	490f      	ldr	r1, [pc, #60]	; (800434c <UARTEx_SetNbDataToProcess+0x98>)
 800430e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004310:	fb93 f3f2 	sdiv	r3, r3, r2
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	7b7a      	ldrb	r2, [r7, #13]
 8004320:	4909      	ldr	r1, [pc, #36]	; (8004348 <UARTEx_SetNbDataToProcess+0x94>)
 8004322:	5c8a      	ldrb	r2, [r1, r2]
 8004324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004328:	7b7a      	ldrb	r2, [r7, #13]
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <UARTEx_SetNbDataToProcess+0x98>)
 800432c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800432e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	0800451c 	.word	0x0800451c
 800434c:	08004524 	.word	0x08004524

08004350 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004358:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800435c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	b29b      	uxth	r3, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	b29b      	uxth	r3, r3
 800436e:	4013      	ands	r3, r2
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004386:	b084      	sub	sp, #16
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	f107 0014 	add.w	r0, r7, #20
 8004394:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	b004      	add	sp, #16
 80043c6:	4770      	bx	lr

080043c8 <memset>:
 80043c8:	4402      	add	r2, r0
 80043ca:	4603      	mov	r3, r0
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d100      	bne.n	80043d2 <memset+0xa>
 80043d0:	4770      	bx	lr
 80043d2:	f803 1b01 	strb.w	r1, [r3], #1
 80043d6:	e7f9      	b.n	80043cc <memset+0x4>

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	4d0d      	ldr	r5, [pc, #52]	; (8004410 <__libc_init_array+0x38>)
 80043dc:	4c0d      	ldr	r4, [pc, #52]	; (8004414 <__libc_init_array+0x3c>)
 80043de:	1b64      	subs	r4, r4, r5
 80043e0:	10a4      	asrs	r4, r4, #2
 80043e2:	2600      	movs	r6, #0
 80043e4:	42a6      	cmp	r6, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	4d0b      	ldr	r5, [pc, #44]	; (8004418 <__libc_init_array+0x40>)
 80043ea:	4c0c      	ldr	r4, [pc, #48]	; (800441c <__libc_init_array+0x44>)
 80043ec:	f000 f818 	bl	8004420 <_init>
 80043f0:	1b64      	subs	r4, r4, r5
 80043f2:	10a4      	asrs	r4, r4, #2
 80043f4:	2600      	movs	r6, #0
 80043f6:	42a6      	cmp	r6, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004400:	4798      	blx	r3
 8004402:	3601      	adds	r6, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	f855 3b04 	ldr.w	r3, [r5], #4
 800440a:	4798      	blx	r3
 800440c:	3601      	adds	r6, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	08004534 	.word	0x08004534
 8004414:	08004534 	.word	0x08004534
 8004418:	08004534 	.word	0x08004534
 800441c:	08004538 	.word	0x08004538

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
